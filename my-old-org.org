This is my hand edited old org-mode setup that became a complete shambles.

* org-mode                                                              :org:
** Standard Settings
I start with Org mode


#+begin_src emacs-lisp 
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
  (add-hook 'org-mode-hook 'auto-fill-mode)
  (setq initial-major-mode (quote org-mode))
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
#+end_src

** Miscellaneous Settings
#+begin_src emacs-lisp 
  ;; shift-select
  (setq org-support-shift-select t)
  ;; keeps links so we can reuse/paste them again
  (setq org-keep-stored-link-after-insertion t)
  
#+end_src

** Starter Kit Keybindings
   :PROPERTIES:
   :CUSTOM_ID: keybindings
   :END:
- global key bindings are in my [[file:starter-kit-bindings.org][starter kit bindings]]
- [ ] toggle iimage not worging
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-iimage-in-org)))
#+end_src

** remaining key bindings
:PROPERTIES:
			:ID:       c0914200-d73d-4205-aba1-6cca8b2dd8f1
			:Effort:   0:15
                        			:END:

- [ ] still to rip and test
- [ ] switch to locally set???
#+begin_src emacs-lisp 
(global-set-key (kbd "<f5>") 'bh/org-todo)
(global-set-key (kbd "<S-f5>") 'bh/widen)
(global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
(global-set-key (kbd "<f9> c") 'org-cycle-agenda-files)
(global-set-key (kbd "<f9> <f9>") 'bh/show-org-agenda)
(global-set-key (kbd "<f9> h") 'bh/hide-other)
(global-set-key (kbd "<f9> n") 'org-narrow-to-subtree)
(global-set-key (kbd "<f9> w") 'widen)
(global-set-key (kbd "<f9> u") 'bh/narrow-up-one-level)
(global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
(global-set-key (kbd "<f9> v") 'visible-mode)
(global-set-key (kbd "<f9> p") 'org-publish-current-project)
(global-set-key (kbd "<f9> l") 'org-insert-last-link)
(global-set-key (kbd "M-<f9>") 'org-toggle-inline-images)
(global-set-key (kbd "C-x n r") 'narrow-to-region)
(global-set-key (kbd "C-c s") 'org-insert-subheading)
#+end_src

** search
 #+begin_src emacs-lisp  
(setq org-link-abbrev-alist
       '(("bugzilla"  . "http://10.1.2.9/bugzilla/show_bug.cgi?id=")
         ("url-to-ja" . "http://translate.google.fr/translate?sl=en&tl=ja&u=%h")
         ("google"    . "http://www.google.com/search?q=")
         ("gmap"      . "http://maps.google.com/maps?q=%s")
         ("omap"      . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
         ("ads"       .
         "http://adsabs.harvard.edu/cgi-bin/nph-abs_connect?author=%s&db_key=AST")))
#+end_src

 [[google:goofy]]

** Encryption within Org
#+begin_src emacs-lisp 
(require 'org-crypt)
; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
; GPG key to use for encryption
(setq org-crypt-key nil)
(setq org-crypt-disable-auto-save nil)
#+end_src



** MobileOrg

MobileOrg via Dropbox
#+begin_src emacs-lisp 
  (setq org-default-notes-file "~/stuff/org/refile.org")
  ;; Set to the name of the file where new notes will be stored
  (setq org-mobile-inbox-for-pull "~/stuff/org/refile.org")
  ;; Set to <your Dropbox root directory>/MobileOrg.
  (setq org-mobile-directory "~/Dropbox/MobileOrg")
#+end_src


Character encoding
- [ ] I think the character coding is already set ok by starter kit (but need to check)
#+begin_src emacs-lisp :tangle no
(if (eq system-type 'darwin)
    (progn
      (prefer-coding-system 'utf-8-unix)
      (set-default-coding-systems 'utf-8-unix)
      (if (< emacs-major-version 23)
          (set-keyboard-coding-system 'utf-8))
      (set-clipboard-coding-system 'utf-8)
      (set-terminal-coding-system 'utf-8)))
(if (or (eq system-type 'gnu/linux)
        (eq system-type 'windows-nt))
    (progn
      (prefer-coding-system 'utf-8-unix)
      (load-library "iso-transl")))
(define-coding-system-alias 'utf-8-emacs 'utf-8) ; needed by bbdb...
#+end_src

** Clocking into drawers
#+begin_src emacs-lisp 
;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
#+end_src


** State and Change
- I use a customised state change hook to record when state changes occur.
#+begin_src emacs-lisp 
(setq org-log-done nil)
(setq org-log-into-drawer t)
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)"))))
(setq org-use-fast-todo-selection t)
(setq org-treat-S-cursor-todo-selection-as-state-change t)
(setq org-todo-state-tags-triggers nil)
;;(add-hook 'org-after-todo-state-change-hook 'zyg/log-state-change)
#+end_src

- It's frustrating, but org is usually correct
#+begin_src emacs-lisp 
(setq org-enforce-todo-dependencies t)
#+end_src

  
** Plain Lists


- Demotion
  #+begin_src emacs-lisp 
  (setq org-list-demote-modify-bullet (quote (("+" . "-")
                                              ("*" . "-")
                                              ("1." . "-")
                                              ("1)" . "-"))))
  #+end_src

  - Reset Repeater Checklist
  Repeater checklists saved my career.
  http://orgmode.org/worg/org-contrib/org-checklist.html
  #+begin_src emacs-lisp 
  (require 'org-checklist)
  #+end_src

  - Use cycle for plain lists
  #+begin_src emacs-lisp 
  (setq org-cycle-include-plain-lists t)
  #+end_src

  

** Priority

Using priorities kills the ability to ever use S-down to select
regions.  Can't bring myself to do it - instead I use an urgent tag.

#+begin_src emacs-lisp 
  (setq org-enable-priority-commands nil)
#+end_src


** Capture
:PROPERTIES:
:ID:       e79ecad1-2428-452a-b9d6-9fdd3ef8a174
:END:

#+name: capture-table
| key | desc           | type       | target type   | target path                | target header | template                                             |
|-----+----------------+------------+---------------+----------------------------+---------------+------------------------------------------------------|
| ,   | ,,             | entry      | file          | ~/stuff/org/refile.org     |               | * %?\n                                               |
| t   | todo           |            |               |                            |               |                                                      |
| tu  | urgent todo    | entry      | file          | ~/stuff/org/refile.org     |               | * NEXT %? :urgent:\n:PROPERTIES:\n:OPEN: %U\n:END:\n |
| tl  | linked todo    | entry      | file          | ~/stuff/org/refile.org     |               | * TODO %?\n%a\n                                      |
| tn  | next todo      | entry      | file          | ~/stuff/org/refile.org     |               | * NEXT %?\n                                          |
| tt  | todo todo      | entry      | file          | ~/stuff/org/refile.org     |               | * TODO %?\n                                          |
| tb  | yank body      | entry      | file          | ~/stuff/org/refile.org     |               | * TODO %?\n%c\n                                      |
| th  | yank header    | entry      | file          | ~/stuff/org/refile.org     |               | * TODO %c\n%?\n                                      |
| i   | idea           |            |               |                            |               |                                                      |
| ii  | idea           | entry      | file+headline | ~/stuff/content/ideas.org  | incoming      | * %? \n                                              |
| il  | idea link      | entry      | file+headline | ~/stuff/content/ideas.org  | links         | * %a \n %?                                           |
| iy  | idea yank      | entry      | file+headline | ~/stuff/content/ideas.org  | incoming      | * %?%c \n                                            |
| z   | bugz           | entry      | file+headline | ~/stuff/org/bugz.org       | incoming      | * TODO %?\n%a                                        |
| s   | snipz          |            |               |                            |               |                                                      |
| sr  | snipz request  | entry      | file+headline | ~/stuff/org/snipz.org      | incoming      | * TODO %?\n%a\n                                      |
| sn  | snipz note     | entry      | file+headline | ~/stuff/org/snipz.org      | incoming      | * %?\n%c\n                                           |
| b   | binding        | table-line | file+headline | ~/stuff/emacs/bindings.org | incoming      | %?                                                   |
| k   | kill ring      |            |               |                            |               |                                                      |
| kb  | kill ring body | entry      | file          | ~/stuff/org/refile.org     |               | * %?\n%c\n                                           |
| kh  | kill ring head | entry      | file          | ~/stuff/org/refile.org     |               | * %c\n%?\n                                           |


#+begin_src emacs-lisp :var table=capture-table 
  (defun org-table-remove-header (table)
    "turns an org-table into a list"                                       
    (if (eq (cadr table) 'hline) 
        (setq table (cddr table))))
      
  (setq capture-data (org-table-remove-header table))  
  
  (setq org-capture-templates 
        (loop for row in capture-data
              collect
              (eval (quote (car (read-from-string 
                                (replace-regexp-in-string "(  )" ""                                                     (replace-regexp-in-string "\"\"" "" 
                                (replace-regexp-in-string "\\\\n" "n" 
                                 (apply 'format "(%S %S %s (%s %S %S) %S)" row))))))))))
#+end_src


** Refiling

#+begin_src emacs-lisp  
; Targets include this file and any file contributing to the agenda - up to 4 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 2)
                                 (org-agenda-files :maxlevel . 2))))
; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)
; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)
; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))
; every header is a refile target
(setq org-refile-target-verify-function nil)
; use IDO
(setq org-completion-use-ido t)

#+end_src

** Agenda view
:PROPERTIES:
		:Effort:   0.45
:ID: b6b3a794-7836-4259-8b9c-92ce0a35cd24
		:END:

Startup should take this table and create the org-agenda-files list.

#+TBLNAME: agenda-files-table
| stuff    |         | stuff.org         |
| .emacs.d |         | README.org        |
| .emacs.d |         | dotemacs.org      |
| stuff    | org     | refile.org        |
| stuff    | org     | bugz.org          |
| stuff    | org     | snipz.org         |
| stuff    | org     | org.org           |
| stuff    | emacs   | emacs.org         |
| stuff    | emacs   | bindings.org      |
| stuff    | sys     | sys.org           |
| stuff    | biz     | scarce.org        |
| stuff    | content | life.org          |
| stuff    | content | writing.org       |
| stuff    | dev     | webdev.org        |
| stuff    | dev     | sandpit.org       |
| stuff    | dev     | jsdev.org         |
| stuff    | factor  | factor.org        |
| stuff    | content | ideas.org         |
| stuff    | factor  | parity.org        |
| stuff    | quant   | rdev.org          |
| stuff    | quant   | volatility.org    |
| stuff    | quant   | da.org            |
| stuff    | quant   | emfx.org          |
| stuff    | sys     | git.org           |
| git      | scarce  | scarce.org        |
| git      | scarce  | mindev.org        |
| git      | scarce  | sitedev.org       |


- function to reset org-agenda-files based on the above table of directories
  and files
  #+begin_src emacs-lisp :var table=agenda-files-table
    (setq clean-table
          (delete nil  
                  (loop for line in table
                        collect 
                        (delete "" (delete-dups line)))))
    
    (setq org-agenda-files 
          (mapcar
           (lambda (x) 
             (concat "~/"
                     (mapconcat
                      'eval x "/")))
           clean-table))
  #+end_src

  

Standard settings
#+begin_src emacs-lisp 
  ;; Compact the block agenda view
  (setq org-agenda-compact-blocks t)
  
  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)
  (setq org-agenda-span 'day)
  (setq org-stuck-projects (quote ("" nil nil "")))

#+end_src

- Custom agenda
  This custom view is lidted straight from =norang=.  I have no idea
  how it does what it does, nor what it actually does, but it works
  for me.
  #+begin_src emacs-lisp :tangle yes
    ;; Custom agenda command definitions
    (setq org-agenda-custom-commands
          (quote (("N" "Notes" tags "NOTE"
                   ((org-agenda-overriding-header "Notes")
                    (org-tags-match-list-sublevels t)))
                  ("h" "Habits" tags-todo "STYLE=\"habit\""
                   ((org-agenda-overriding-header "Habits")
                    (org-agenda-sorting-strategy
                     '(todo-state-down effort-up category-keep))))
                  (" " "Agenda"
                   ((agenda "" nil)
                    (tags "REFILE"
                          ((org-agenda-overriding-header "Tasks to Refile")
                           (org-tags-match-list-sublevels nil)))
                    (tags-todo "-CANCELLED/!"
                               ((org-agenda-overriding-header "Stuck Projects")
                                (org-agenda-skip-function 'bh/skip-non-stuck-projects)))
                    (tags-todo "-WAITING-CANCELLED/!NEXT"
                               ((org-agenda-overriding-header "Next Tasks")
                                (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                                (org-agenda-todo-ignore-scheduled t)
                                (org-agenda-todo-ignore-deadlines t)
                                (org-tags-match-list-sublevels t)
                                (org-agenda-sorting-strategy
                                 '(todo-state-down effort-up category-keep))))
                    (tags-todo "-REFILE-CANCELLED/!-HOLD-WAITING"
                               ((org-agenda-overriding-header "Tasks")
                                (org-agenda-skip-function 'bh/skip-project-tasks-maybe)
                                (org-agenda-todo-ignore-scheduled t)
                                (org-agenda-todo-ignore-deadlines t)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-CANCELLED/!"
                               ((org-agenda-overriding-header "Projects")
                                (org-agenda-skip-function 'bh/skip-non-projects)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-CANCELLED/!WAITING|HOLD"
                               ((org-agenda-overriding-header "Waiting and Postponed Tasks")
                                (org-tags-match-list-sublevels nil)
                                (org-agenda-todo-ignore-scheduled 'future)
                                (org-agenda-todo-ignore-deadlines 'future)))
                    (tags "-REFILE/"
                          ((org-agenda-overriding-header "Tasks to Archive")
                           (org-agenda-skip-function 'bh/skip-non-archivable-tasks))))
                   nil)
                  ("r" "Tasks to Refile" tags "REFILE"
                   ((org-agenda-overriding-header "Tasks to Refile")
                    (org-tags-match-list-sublevels nil)))
                  ("#" "Stuck Projects" tags-todo "-CANCELLED/!"
                   ((org-agenda-overriding-header "Stuck Projects")
                    (org-agenda-skip-function 'bh/skip-non-stuck-projects)))
                  ("n" "Next Tasks" tags-todo "-WAITING-CANCELLED/!NEXT"
                   ((org-agenda-overriding-header "Next Tasks")
                    (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                    (org-agenda-todo-ignore-scheduled t)
                    (org-agenda-todo-ignore-deadlines t)
                    (org-tags-match-list-sublevels t)
                    (org-agenda-sorting-strategy
                     '(todo-state-down effort-up category-keep))))
                  ("R" "Tasks" tags-todo "-REFILE-CANCELLED/!-HOLD-WAITING"
                   ((org-agenda-overriding-header "Tasks")
                    (org-agenda-skip-function 'bh/skip-project-tasks-maybe)
                    (org-agenda-sorting-strategy
                     '(category-keep))))
                  ("p" "Projects" tags-todo "-CANCELLED/!"
                   ((org-agenda-overriding-header "Projects")
                    (org-agenda-skip-function 'bh/skip-non-projects)
                    (org-agenda-sorting-strategy
                     '(category-keep))))
                  ("w" "Waiting Tasks" tags-todo "-CANCELLED/!WAITING|HOLD"
                   ((org-agenda-overriding-header "Waiting and Postponed tasks"))
                   (org-tags-match-list-sublevels nil))
                  ("A" "Tasks to Archive" tags "-REFILE/"
                   ((org-agenda-overriding-header "Tasks to Archive")
                    (org-agenda-skip-function 'bh/skip-non-archivable-tasks))))))
  #+end_src

  


** Agenda Keys

Most of these agenda commands are from =norang=.  The defuns are
defined [[file:starter-kit-zyg-defuns-org.org::*%3Dnorang%3D%20defuns][here]].

#+begin_src emacs-lisp 
(add-hook 'org-agenda-mode-hook
          (lambda ()
            (define-key org-agenda-mode-map "q" 'bury-buffer))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "F" 'bh/restrict-to-file-or-follow))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "W" 'bh/widen))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "N" 'bh/narrow-to-subtree))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "P" 'bh/narrow-to-project))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "U" 'bh/narrow-up-one-level))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "\C-c\C-x<" 'bh/set-agenda-restriction-lock))
          'append)
#+end_src

** Agenda Settings - Miscellaneous

These follow the =norang= suggestions  
#+begin_src emacs-lisp 
;; Always hilight the current agenda line
(add-hook 'org-agenda-mode-hook
          '(lambda () (hl-line-mode 1))
          'append)

;; Keep tasks with dates on the global todo lists
(setq org-agenda-todo-ignore-with-date nil)

;; Keep tasks with deadlines on the global todo lists
(setq org-agenda-todo-ignore-deadlines nil)

;; Keep tasks with scheduled dates on the global todo lists
(setq org-agenda-todo-ignore-scheduled nil)

;; Keep tasks with timestamps on the global todo lists
(setq org-agenda-todo-ignore-timestamp nil)

;; Remove completed deadline tasks from the agenda view
(setq org-agenda-skip-deadline-if-done t)

;; Remove completed scheduled tasks from the agenda view
(setq org-agenda-skip-scheduled-if-done t)

;; Remove completed items from search results
(setq org-agenda-skip-timestamp-if-done t)

(setq org-agenda-include-diary nil)
(setq org-agenda-diary-file (expand-file-name "~/org/diary.org"))

(setq org-agenda-insert-diary-extract-time t)

;; Include agenda archive files when searching for things
(setq org-agenda-text-search-extra-files (quote (agenda-archives)))

;; Show all future entries for repeating tasks
(setq org-agenda-repeating-timestamp-show-all t)

;; Show all agenda dates - even if they are empty
(setq org-agenda-show-all-dates t)

;; Start the weekly agenda on Monday
(setq org-agenda-start-on-weekday 1)

;; Enable display of the time grid so we can see the marker for the current time
(setq org-agenda-time-grid (quote ((daily today remove-match)
                                   #("----------------" 0 16 (org-heading t))
                                   (830 1000 1200 1300 1500 1700))))

;; Display tags farther right
(setq org-agenda-tags-column -102)

;; Keep filters in place
(setq org-agenda-persistent-filter t)




#+end_src




** Agenda sort from =norang=

Defuns are defined [[file:starter-kit-zyg-defuns-org.org::*%3Dnorang%3D%20defuns][here]]. 
#+begin_src emacs-lisp
  
  ;; Sorting order for tasks on the agenda
  (setq org-agenda-sorting-strategy
        (quote ((agenda habit-down time-up user-defined-up priority-down effort-up category-keep)
                (todo category-up priority-down effort-up)
                (tags category-up priority-down effort-up)
                (search category-up))))
  ;;
  ;; Agenda sorting functions
  ;;
  (setq org-agenda-cmp-user-defined 'bh/agenda-sort)
#+end_src

** Tags

#+begin_src emacs-lisp 

; Tags with fast selection keys
(setq org-tag-alist (quote (("urgent" . ?u)
                            ("bill" . ?b)
                            ("scarce" . ?s)
                            ("crypt" . ?c)
                            ("emacs" . ?e))))
                            
; Allow setting single tags without the menu
(setq org-fast-tag-selection-single-key (quote expert))

; For tag searches ignore tasks with scheduled and deadline dates
(setq org-agenda-tags-todo-honor-ignore-options nil)

#+end_src

** Archiving

Anything with a =DONE= todo tag is a valid archiving candidate.
Though more often than not I'm going to set a section heading back to
=""= once I'm done.

#+begin_src emacs-lisp 
(setq org-archive-mark-done nil)
(setq org-archive-location "%s_archive::* Archived Tasks")
#+end_src

** Code Blocks

- lowercase results
  #+begin_src emacs-lisp 
  (setq org-babel-results-keyword "results")
  #+end_src

  - languages used
  #+begin_src emacs-lisp 
    (org-babel-do-load-languages
       (quote org-babel-load-languages)
       (quote ((emacs-lisp . t)
               (sh . t)
               (gnuplot . t)
               (org . t)
               (octave . t)
               (js . t)
               (R . t))))
  #+end_src

  - Don't cache me
  #+begin_src emacs-lisp 
    (setq org-babel-default-header-args
    (cons '(:cache . "no")
    (assq-delete-all :cache org-babel-default-header-args)))
  #+end_src

  - Don't prompt me
  #+begin_src emacs-lisp 
  (setq org-confirm-babel-evaluate nil)
  #+end_src

  - do not re-evaluate on export
  #+begin_src emacs-lisp 
  (setq org-export-babel-evaluate nil)
  #+end_src

  - Use the current window for C-c ' source editing
  #+begin_src emacs-lisp 
  (setq org-src-window-setup 'current-window)
  #+end_src

  - Always look your best
  #+begin_src emacs-lisp 
  (setq org-src-fontify-natively t)
  #+end_src

  - I wish I'd known about this before.
  #+begin_src emacs-lisp 
  (setq org-src-tab-acts-natively t)
  #+end_src

    

** Setting to get Octave Working
:PROPERTIES:
:ID: b142296d-b21d-4f4b-a462-3404ff6b4c57
:END:

- Results are value (needed for octave)
  #+begin_src emacs-lisp 
  (setq org-babel-default-header-args
       (cons '(:results . "value") org-babel-default-header-args)) 
  #+end_src

  - [ ] inline images break my windows emacs 
  #+begin_src emacs-lisp 
  (setq org-startup-with-inline-images nil)
  #+end_src

  - Single session for Octave
  - [ ] breaks other languages of course as it's a global variable
  - turning this off
  #+begin_src emacs-lisp :tangle no
  ; Run octave in the same session.  Without this set, octave opens
  ; and closes on every evaluation.
  (setq org-babel-default-header-args
         (cons '(:session . "*Inferior Octave*")
         (assq-delete-all :session org-babel-default-header-args)))
  #+end_src

  - tangle octave files with a .m suffix
  #+begin_src emacs-lisp 
  (add-to-list 'org-babel-tangle-lang-exts '("octave" . "m"))
  #+end_src

  - sub-scripts might mess with octave
  #+begin_src emacs-lisp 
  (setq org-use-sub-superscripts nil)
  #+end_src

  
** Export settings

HTML exported using org looks so clean and stylish.

- no post-amble thanks
  #+begin_src emacs-lisp 
  (setq org-export-html-postamble nil)
  #+end_src

    
- Inline images in HTML instead of producting links to the image
  #+begin_src emacs-lisp 
  (setq org-export-html-inline-images t)
  #+end_src

  - Using an external style file
  #+begin_src emacs-lisp 
    (setq org-export-html-style "<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>")
    (setq org-export-html-style-include-default nil)
  #+end_src

  - Do not generate internal css formatting for HTML exports
  - [ ] try this out M-x org-export-htmlize-generate-css
  #+begin_src emacs-lisp 
  (setq org-export-htmlize-output-type (quote css))
  #+end_src

  - Export with LaTeX fragments
  - [ ] dollar dollar bug
  #+begin_src emacs-lisp 
  (setq org-export-with-LaTeX-fragments t)
  #+end_src

  - html decl
  #+begin_src emacs-lisp 
  (setq org-export-html-xml-declaration (quote (("html" . "")
                                                ("was-html" . "<?xml version=\"1.0\" encoding=\"%s\"?>")
                                                ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>"))))
  #+end_src

  - allow BIND to do its thing
  #+begin_src emacs-lisp 
  (setq org-export-allow-BIND t)
  #+end_src

  - timestamps outside drawers are evil.
  #+begin_src emacs-lisp 
  (setq org-export-with-timestamps nil)
  #+end_src

  
** Publishing

This is still in test mode.

#+begin_src emacs-lisp 
  ;tmp - http://www.scarcecapital.com/qic
  (setq org-publish-project-alist
        ; mom-org are the org-files that generate the content
        ; mom-extra are images and css files that need to be included
        ; mom is the top-level project that gets published
        (quote (("mom-report-org"
                 :base-directory "~/projects/qic/momentum/draft"
                 :publishing-directory "~/pub/report"
                 ; :publishing-directory "/ssh:www-data@www:~/www.scarcecapital.com/tmp"
                 :recursive t
                 :section-numbers nil
                 :table-of-contents nil
                 :base-extension "org"
                 :publishing-function (org-publish-org-to-html org-publish-org-to-org)
                 :style "<link rel=\"stylesheet\" href=\"scarce.css\" type=\"text/css\" />"
                 :plain-source t
                 :htmlized-source t
                 :style-include-default nil
                 :auto-sitemap t
                 :sitemap-filename "index.html"
                 :sitemap-title "Momentum Report"
                 :sitemap-style "tree"
                 :author-info t
                 :creator-info t)
                ("mom-report-extra"
                 :base-directory "~/projects/qic/momentum/draft"
                 :publishing-directory "~/pub/report"
                 :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
                 :publishing-function org-publish-attachment
                 :recursive t
                 :author nil)
                ("mom-report"
                 :components ("mom-report-org" "mom-report-extra"))
                ; tmp for quick testing
                ("tmp-org"
                 :base-directory "~/tmp/publish"
                 :publishing-directory "~/pub/tmp"
                 ; :publishing-directory "/ssh:www-data@www:~/www.scarcecapital.com/tmp"
                 :recursive t
                 :section-numbers nil
                 :table-of-contents nil
                 :base-extension "org"
                 :publishing-function (org-publish-org-to-html org-publish-org-to-org)
                 ;:style "<link rel=\"stylesheet\" href=\"http://scarcecapital.com/tmp/org.css\" type=\"text/css\" />"
                 ; I assume you can then just put the stylesheet in the directory (tmp) and all is cool
                 :style "<link rel=\"stylesheet\" href=\"org.css\" type=\"text/css\" />"
                 :plain-source t
                 :htmlized-source t
                 :style-include-default nil
                 :auto-sitemap t
                 :sitemap-filename "index.html"
                 :sitemap-title "Test Publishing Environment"
                 :sitemap-style "tree"
                 :author-info t
                 :creator-info t)
                ("tmp-extra"
                 :base-directory "~/tmp/publish/"
                 :publishing-directory "~/pub/tmp"
                 :base-extension "css\\|pdf\\|png\\|jpg\\|gif\\|el"
                 :publishing-function org-publish-attachment
                 :recursive t
                 :author nil)
                ("tmp"
                 :components ("tmp-org" "tmp-extra"))
                ; mom-dev is a testing version
                ("mom-dev-org"
                 :base-directory "~/projects/momentum/dev"
                 :publishing-directory "~/pub/dev"
                 ; :publishing-directory "/ssh:www-data@www:~/www.scarcecapital.com/tmp"
                 :recursive t
                 :section-numbers nil
                 :table-of-contents nil
                 :base-extension "org"
                 :publishing-function (org-publish-org-to-html org-publish-org-to-org)
                 :style "<link rel=\"stylesheet\" href=\"http://scarcecapital.com/tmp/org.css\" type=\"text/css\" />"
                 :plain-source t
                 :htmlized-source t
                 :style-include-default nil
                 :auto-sitemap t
                 :sitemap-filename "index.html"
                 :sitemap-title "Momemtum Development"
                 :sitemap-style "tree"
                 :author-info t
                 :creator-info t)
                ("mom-dev-extra"
                 :base-directory "~/projects/momentum/dev"
                 :publishing-directory "~/pub/dev"
                 :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
                 :publishing-function org-publish-attachment
                 :recursive t
                 :author nil)
                ("mom-dev"
                 :components ("mom-dev-org" "mom-dev-extra")))))

#+end_src


** Visuals

Various visual stylistic choices 
#+begin_src emacs-lisp 
  (setq org-hide-leading-stars nil)
  (setq org-startup-indented t)
  (setq org-cycle-separator-lines 0)
  (setq org-blank-before-new-entry (quote ((heading)
                                           (plain-list-item . auto))))

  (setq org-emphasis-alist (quote (("*" bold "<b>" "</b>")
                                   ("/" italic "<i>" "</i>")
                                   ("_" underline "<span style=\"text-decoration:underline;\">" "</span>")
                                   ("=" org-code "<code>" "</code>" verbatim)
                                   ("~" org-verbatim "<code>" "</code>" verbatim))))
  
#+end_src

** Action Modification

Various stylistic choices 
#+begin_src emacs-lisp 
(setq org-return-follows-link t)
#+end_src


** Special Key

#+begin_src emacs-lisp :tangle yes
  (setq org-special-ctrl-a/e 'reversed)
  (setq org-special-ctrl-k t)
  (setq org-yank-adjusted-subtrees t)
#+end_src

 
** Speed keys
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the =org-speed-commands-default= variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to `=org-babel-describe-bindings=') will
display a list of the code blocks commands and their related keys.

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
(setq org-speed-commands-user (quote (("0" . ignore)
                                        ("1" . ignore)
                                        ("2" . ignore)
                                        ("3" . ignore)
                                        ("4" . ignore)
                                        ("5" . ignore)
                                        ("6" . ignore)
                                        ("7" . ignore)
                                        ("8" . ignore)
                                        ("9" . ignore)
  
                                        ("a" . ignore)
                                        ("d" . ignore)
                                        ("h" . bh/hide-other)
                                        ("i" progn
                                         (forward-char 1)
                                         (call-interactively 'org-insert-heading-respect-content))
                                        ("k" . org-kill-note-or-show-branches)
                                        ("l" . ignore)
                                        ("m" . ignore)
                                        ("q" . bh/show-org-agenda)
                                        ("r" . ignore)
                                        ("s" . org-save-all-org-buffers)
                                        ("w" . org-refile)
                                        ("x" . ignore)
                                        ("y" . ignore)
                                        ("z" . org-add-note)
  
                                        ("A" . ignore)
                                        ("B" . ignore)
                                        ("E" . ignore)
                                        ("F" . bh/restrict-to-file-or-follow)
                                        ("G" . ignore)
                                        ("H" . ignore)
                                        ("J" . org-clock-goto)
                                        ("K" . ignore)
                                        ("L" . ignore)
                                        ("M" . ignore)
                                        ("N" . bh/narrow-to-subtree)
                                        ("P" . bh/narrow-to-project)
                                        ("Q" . ignore)
                                        ("R" . ignore)
                                        ("S" . ignore)
                                        ("T" . bh/org-todo)
                                        ("U" . bh/narrow-up-one-level)
                                        ("V" . ignore)
                                        ("W" . bh/widen)
                                        ("X" . ignore)
                                        ("Y" . ignore)
                                        ("Z" . ignore))))


#+end_src


** Auto Save and Revert

#+begin_src emacs-lisp
(run-at-time "00:59" 3600 'org-save-all-org-buffers)
(global-auto-revert-mode t)
#+end_src

** org2blog

#+begin_src emacs-lisp
(require 'org2blog-autoloads)
#+end_src

#+begin_src emacs-lisp
  (setq org2blog/wp-blog-alist
       '(("scarce"
          :url "http://scarcecapital.com/wordpress/xmlrpc.php"
          :username "Tony Day")
         ("dev"
          :url "http://127.0.0.1:4001/wpdev/xmlrpc.php"
          :username "Tony Day"
          :default-title "test title (production)"
          :default-categories ("quant" "org" "emacs")
          :tags-as-categories nil)))
#+end_src





** clipboard

#+begin_src emacs-lisp
  (setq org-cycle-global-at-bob t)
#+end_src

#+begin_src emacs-lisp :tangle no
(message "%s" "features")
(message "%s" features)
(message "%s" (locate-library "org-compat"))
  (load "org-compat")
  (require 'org-jsinfo)
#+end_src

#+begin_src emacs-lisp :tangle no
  ; Enable habit tracking (and a bunch of other modules)
  (setq org-modules (quote (org-bbdb
                            org-bibtex
                            org-crypt
                            org-gnus
                            org-id
                            org-info
                            org-habit
                            org-inlinetask
                            org-irc
                            org-mew
                            org-mhe
                            org-protocol
                            org-rmail
                            org-vm
                            org-wl
                            org-w3m)))
  
  ; position the habit graph on the agenda to the right of the default
  (setq org-habit-graph-column 50)
  (require 'org-habit)
  
#+end_src




#+begin_src emacs-lisp :tangle no
  (require 'org-jsinfo)

(require 'org-compat)

(library-path "org-compat")

(load "org-compat.elc")

  (locate-library "org-compat")

(load "org-compat")

#+end_src
** MobileOrg hack

#+begin_src emacs-lisp
  (setq org-mobile-force-id-on-agenda-items nil)
  (setq org-directory "~")
(require 'org-habit)
#+end_src

** org defuns
#+begin_src emacs-lisp
(defun org-insert-last-link()
  (interactive)
  (insert (concat "[[" 
        (plist-get org-store-link-plist :link)
        "]["
        (plist-get org-store-link-plist :description)
        "]]")))
#+end_src


*** Get Timestamp as String
Return a timestamp string for use in my logging process.
#+begin_src emacs-lisp 
(defun org-string-timestamp (time &optional with-hm inactive pre post extra)
  "return a string for the date given by the internal TIME.
WITH-HM means use the stamp format that includes the time of the day.
INACTIVE means use square brackets instead of angular ones, so that the
stamp will not contribute to the agenda.
PRE and POST are optional strings to be inserted before and after the
stamp.
The command returns the time stamp as a string.
This is the same as org-insert-time-stamp without the insert.
"
  (let ((fmt (funcall (if with-hm 'cdr 'car) org-time-stamp-formats))
          stamp)
      (if inactive (setq fmt (concat "[" (substring fmt 1 -1) "]")))
      (when (listp extra)
        (setq extra (car extra))
        (if (and (stringp extra)
                 (string-match "\\([0-9]+\\):\\([0-9]+\\)" extra))
            (setq extra (format "-%02d:%02d"
                                (string-to-number (match-string 1 extra))
                                (string-to-number (match-string 2 extra))))
          (setq extra nil)))
      (when extra
        (setq fmt (concat (substring fmt 0 -1) extra (substring fmt -1))))
      (setq stamp (format-time-string fmt time))
      ))
#+end_src

*** Log State Change
#+begin_src emacs-lisp 
  (defun zyg/log-state-change ()
    "logs timestamps in PROPERTIES for any todo-tag state change (LASTTOUCH),
      first state change (OPENED), and when last entered a done state
      (CLOSE).
  "
    (interactive)
    (save-excursion 
      (let* ((has-opened (org-entry-get nil "OPEN"))
             (stamp (org-string-timestamp nil t t nil nil nil)))
        (if (not has-opened)
            (org-set-property "OPEN" stamp))
        (if (or (equal org-state nil)
                (equal org-state "DONE"))
            (org-set-property "CLOSE" stamp))
        (if (or (equal org-state "TODO")
                (equal org-state "NEXT"))
            (org-entry-delete nil "CLOSE"))
        (org-set-property "LAST" (concatenate 'string org-state " " stamp)))))
#+end_src


*** =norang= general defuns


#+begin_src emacs-lisp 
(defun bh/show-org-agenda ()
    (interactive)
    (switch-to-buffer "*Org Agenda*")
    (delete-other-windows))

(defun bh/hide-other ()
  (interactive)
  (save-excursion
    (org-back-to-heading 'invisible-ok)
    (hide-other)
    (org-cycle)
    (org-cycle)
    (org-cycle)))

(defun bh/set-truncate-lines ()
  "Toggle value of truncate-lines and refresh window display."
  (interactive)
  (setq truncate-lines (not truncate-lines))
  ;; now refresh window display (an idiom from simple.el):
  (save-excursion
    (set-window-start (selected-window)
                      (window-start (selected-window)))))

(defun bh/org-todo (arg)
  (interactive "p")
  (if (equal arg 4)
      (save-restriction
        (widen)
        (org-narrow-to-subtree)
        (org-show-todo-tree nil))
    (widen)
    (org-narrow-to-subtree)
    (org-show-todo-tree nil)))

(defun bh/widen ()
  (interactive)
  (widen)
  (org-agenda-remove-restriction-lock))

(defun bh/restrict-to-file-or-follow (arg)
  "Set agenda restriction to 'file or with argument invoke follow mode.
I don't use follow mode very often but I restrict to file all the time
so change the default 'F' binding in the agenda to allow both"
  (interactive "p")
  (if (equal arg 4)
      (org-agenda-follow-mode)
    (if (equal major-mode 'org-agenda-mode)
        (bh/set-agenda-restriction-lock 4)
      (widen))))

(defun bh/narrow-to-org-subtree ()
  (widen)
  (org-narrow-to-subtree)
  (save-restriction
    (org-agenda-set-restriction-lock)))

(defun bh/narrow-to-subtree ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (org-with-point-at (org-get-at-bol 'org-hd-marker)
        (bh/narrow-to-org-subtree))
    (bh/narrow-to-org-subtree)))

(defun bh/narrow-up-one-org-level ()
  (widen)
  (save-excursion
    (outline-up-heading 1 'invisible-ok)
    (bh/narrow-to-org-subtree)))

(defun bh/narrow-up-one-level ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (org-with-point-at (org-get-at-bol 'org-hd-marker)
        (bh/narrow-up-one-org-level))
    (bh/narrow-up-one-org-level)))

(defun bh/narrow-to-org-project ()
  (widen)
  (save-excursion
    (bh/find-project-task)
    (bh/narrow-to-org-subtree)))

(defun bh/narrow-to-project ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (org-with-point-at (org-get-at-bol 'org-hd-marker)
        (bh/narrow-to-org-project))
    (bh/narrow-to-org-project)))

(defun bh/set-agenda-restriction-lock (arg)
  "Set restriction lock to current task subtree or file if prefix is specified"
  (interactive "p")
  (let* ((pom (or (org-get-at-bol 'org-hd-marker)
                  org-agenda-restrict-begin))
         (tags (org-with-point-at pom (org-get-tags-at))))
    (let ((restriction-type (if (equal arg 4) 'file 'subtree)))
      (save-restriction
        (cond
         ((equal major-mode 'org-agenda-mode)
          (org-with-point-at pom
            (org-agenda-set-restriction-lock restriction-type)))
         ((and (equal major-mode 'org-mode) (org-before-first-heading-p))
          (org-agenda-set-restriction-lock 'file))
         (t
          (org-with-point-at pom
            (org-agenda-set-restriction-lock restriction-type))))))))

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/show-org-agenda ()
    (interactive)
    (switch-to-buffer "*Org Agenda*")
    (delete-other-windows))




#+end_src


*** =norang= agenda helper defuns

#+begin_src emacs-lisp 
    (defun bh/is-project-p ()
      "Any task with a todo keyword subtask"
      (save-restriction
        (widen)
        (let ((has-subtask)
              (subtree-end (save-excursion (org-end-of-subtree t)))
              (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task has-subtask))))
    
    (defun bh/is-project-subtree-p ()
      "Any task with a todo keyword that is in a project subtree.
    Callers of this function already widen the buffer view."
      (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                  (point))))
        (save-excursion
          (bh/find-project-task)
          (if (equal (point) task)
              nil
            t))))
    
    (defun bh/is-task-p ()
      "Any task with a todo keyword and no subtask"
      (save-restriction
        (widen)
        (let ((has-subtask)
              (subtree-end (save-excursion (org-end-of-subtree t)))
              (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task (not has-subtask)))))
    
    (defun bh/is-subproject-p ()
      "Any task which is a subtask of another project"
      (let ((is-subproject)
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (while (and (not is-subproject) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq is-subproject t))))
        (and is-a-task is-subproject)))
    
    (defun bh/list-sublevels-for-projects-indented ()
      "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
      This is normally used by skipping functions where this variable is already local to the agenda."
      (if (marker-buffer org-agenda-restrict-begin)
          (setq org-tags-match-list-sublevels 'indented)
        (setq org-tags-match-list-sublevels nil))
      nil)
    
    (defun bh/list-sublevels-for-projects ()
      "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
      This is normally used by skipping functions where this variable is already local to the agenda."
      (if (marker-buffer org-agenda-restrict-begin)
          (setq org-tags-match-list-sublevels t)
        (setq org-tags-match-list-sublevels nil))
      nil)
    
    (defun bh/skip-non-stuck-projects ()
      "Skip trees that are not stuck projects"
      (bh/list-sublevels-for-projects-indented)
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (if (bh/is-project-p)
              (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                     (has-next (save-excursion
                                 (forward-line 1)
                                 (and (< (point) subtree-end)
                                      (re-search-forward "^\\*+ \\(NEXT\\) " subtree-end t)))))
                (if has-next
                    next-headline
                  nil)) ; a stuck project, has subtasks but no next task
            next-headline))))
    
    (defun bh/skip-non-projects ()
      "Skip trees that are not projects"
      (bh/list-sublevels-for-projects-indented)
      (if (save-excursion (bh/skip-non-stuck-projects))
          (save-restriction
            (widen)
            (let ((subtree-end (save-excursion (org-end-of-subtree t))))
              (if (bh/is-project-p)
                  nil
                subtree-end)))
        (org-end-of-subtree t)))
    
    (defun bh/skip-project-trees-and-habits ()
      "Skip trees that are projects"
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           (t
            nil)))))
    
    (defun bh/skip-projects-and-habits-and-single-tasks ()
      "Skip trees that are projects, tasks that are habits, single non-project tasks"
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (cond
           ((org-is-habit-p)
            next-headline)
           ((bh/is-project-p)
            next-headline)
           ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
            next-headline)
           (t
            nil)))))
    
    (defun bh/skip-project-tasks-maybe ()
      "Show tasks related to the current restriction.
    When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
    When not restricted, skip project and sub-project tasks, habits, and project related tasks."
      (save-restriction
        (widen)
        (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
               (next-headline (save-excursion (or (outline-next-heading) (point-max))))
               (limit-to-project (marker-buffer org-agenda-restrict-begin)))
          (cond
           ((bh/is-project-p)
            next-headline)
           ((org-is-habit-p)
            subtree-end)
           ((and (not limit-to-project)
                 (bh/is-project-subtree-p))
            subtree-end)
           ((and limit-to-project
                 (bh/is-project-subtree-p)
                 (member (org-get-todo-state) (list "NEXT")))
            subtree-end)
           (t
            nil)))))
    
    (defun bh/skip-projects-and-habits ()
      "Skip trees that are projects and tasks that are habits"
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           (t
            nil)))))
    
    (defun bh/skip-non-subprojects ()
      "Skip trees that are not projects"
      (let ((next-headline (save-excursion (outline-next-heading))))
        (if (bh/is-subproject-p)
            nil
          next-headline)))
    
  (defun bh/skip-non-archivable-tasks ()
      "Skip trees that are not available for archiving"
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          ;; Consider only tasks with done todo headings as archivable candidates
          (if (member (org-get-todo-state) org-done-keywords)
              (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                     (daynr (string-to-int (format-time-string "%d" (current-time))))
                     (a-month-ago (* 60 60 24 (+ daynr 1)))
                     (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                     (this-month (format-time-string "%Y-%m-" (current-time)))
                     (subtree-is-current (save-excursion
                                           (forward-line 1)
                                           (and (< (point) subtree-end)
                                                (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                (if subtree-is-current
                    next-headline ; Has a date in this month or last month, skip it
                  nil))  ; available to archive
            (or next-headline (point-max))))))
  
#+end_src





*** =norang= agenda sort

#+begin_src emacs-lisp
  (defun bh/agenda-sort (a b)
    "Sorting strategy for agenda items.
  Late deadlines first, then scheduled, then non-late deadlines"
    (let (result num-a num-b)
      (cond
       ; time specific items are already sorted first by org-agenda-sorting-strategy
  
       ; non-deadline and non-scheduled items next
       ((bh/agenda-sort-test 'bh/is-not-scheduled-or-deadline a b))
  
       ; deadlines for today next
       ((bh/agenda-sort-test 'bh/is-due-deadline a b))
  
       ; late deadlines next
       ((bh/agenda-sort-test-num 'bh/is-late-deadline '< a b))
  
       ; scheduled items for today next
       ((bh/agenda-sort-test 'bh/is-scheduled-today a b))
  
       ; late scheduled items next
       ((bh/agenda-sort-test-num 'bh/is-scheduled-late '> a b))
  
       ; pending deadlines last
       ((bh/agenda-sort-test-num 'bh/is-pending-deadline '< a b))
  
       ; finally default to unsorted
       (t (setq result nil)))
      result))
  
  (defmacro bh/agenda-sort-test (fn a b)
    "Test for agenda sort"
    `(cond
      ; if both match leave them unsorted
      ((and (apply ,fn (list ,a))
            (apply ,fn (list ,b)))
       (setq result nil))
      ; if a matches put a first
      ((apply ,fn (list ,a))
       (setq result -1))
      ; otherwise if b matches put b first
      ((apply ,fn (list ,b))
       (setq result 1))
      ; if none match leave them unsorted
      (t nil)))
  
  (defmacro bh/agenda-sort-test-num (fn compfn a b)
    `(cond
      ((apply ,fn (list ,a))
       (setq num-a (string-to-number (match-string 1 ,a)))
       (if (apply ,fn (list ,b))
           (progn
             (setq num-b (string-to-number (match-string 1 ,b)))
             (setq result (if (apply ,compfn (list num-a num-b))
                              -1
                            1)))
         (setq result -1)))
      ((apply ,fn (list ,b))
       (setq result 1))
      (t nil)))
  
  (defun bh/is-not-scheduled-or-deadline (date-str)
    (and (not (bh/is-deadline date-str))
         (not (bh/is-scheduled date-str))))
  
  (defun bh/is-due-deadline (date-str)
    (string-match "Deadline:" date-str))
  
  (defun bh/is-late-deadline (date-str)
    (string-match "In *\\(-.*\\)d\.:" date-str))
  
  (defun bh/is-pending-deadline (date-str)
    (string-match "In \\([^-]*\\)d\.:" date-str))
  
  (defun bh/is-deadline (date-str)
    (or (bh/is-due-deadline date-str)
        (bh/is-late-deadline date-str)
        (bh/is-pending-deadline date-str)))
  
  (defun bh/is-scheduled (date-str)
    (or (bh/is-scheduled-today date-str)
        (bh/is-scheduled-late date-str)))
  
  (defun bh/is-scheduled-today (date-str)
    (string-match "Scheduled:" date-str))
  
  (defun bh/is-scheduled-late (date-str)
    (string-match "Sched\.\\(.*\\)x:" date-str))
#+end_src









** org-clock
#+begin_src emacs-lisp
  (require 'org-clock)
  (require 'org-colview)

#+end_src


