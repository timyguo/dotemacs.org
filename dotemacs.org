#+TITLE: dotemacs
#+AUTHOR: Tony Day
#+EMAIL: tonyday567 at gmail dot com
#+COLUMNS: %25ITEM %30tangle
#+PROPERTIES: tangle yes

* upfront
:PROPERTIES:
:OPEN: [2012-08-01 Wed 18:27]
:LAST: TODO [2012-08-01 Wed 18:27]
:tangle:   no
:END:
#+begin_quote
  business in the front, party in the back

  -- [[http://en.wikipedia.org/wiki/The_Mullets_(TV_series)][The Mullets]]
#+end_quote

Playing around with your emacs config is all about trying out new
stuff, adding new packages, tweaking bindings and deleting old stuff
you no longer need.  This file is all about that process and is intended to be used as a
emacs laboratory.

The use of org as the lab is what separates this
dotemacs from other (perhaps more rigorous) patterns.  Org mode is used:
+ as a literate programming environment
+ for its ease of header manipulation, its column view and tangling ability. If you haven'n tried it
  yet, go to the top of the file and hit C-c C-x C-c. Turning on and
  off, adding and subtracting code requires a simple edit of the
  tangle property.
+ for org-tables. The init.el file is data and much of this data
  belongs in a table. Where it makes sense, we place data in a table,
  often with a toggle to again turn things on and off. Babel then
  takes care of turning the table into code.  Simple as C-c C-v t.  

** design
:PROPERTIES:
:tangle:   no
:END:

General design:
- is restrained by the necessary existence of init.el.
- has gone for as flat a structure as possible
- is opinionated as to what should be added (mostly according to
  questionable author tastes)
- uses use-package and bind from jweigley
** flow 
The main sections are (in order)
- bootstrap. stuff that absolutely has to go at the front and load before
  everything else. order matters.
- guff. code that is not associated with packages but where ordering
  is unimportant.
- packages. package requires and configurations that can be put most anywhere and can be
  unordered (or in alphabetical order for the neatos).
- files. file loads that are files just for convenience (and can be loaded
  in alphabetical order).
- endboot. stuff that has to go at the end.

* init.el
:PROPERTIES:
:tangle:   init.el
:END:

The init.el file is the only file in the startup of emacs
that *needs* to be a .el file.  If you update it here and don't
tangle it the old copy will remain in place only to be overwritten
automatically next restart.

Not much we can do about that.

It weighs in at a muscular 3 lines and does exactly 3 things.
1. finds out where it is and sets the current directory as the
   user-emacs-directory (~/.emacs.d in 99% of cases these days). This
   means that it can start anywhere if pointed to with:
  
   #+begin_src sh :tangle no
     /Applications/Emacs.app/Contents/MacOS/Emacs -q -l not-the-home/init.el     
   #+end_src
  
  or

  #+begin_src sh :tangle no
    emacs -q -l not-the-home/init.el     
  #+end_src
  
  The other way to test outside of your regular ~/.emacs.d is to set
  $HOME=~/fakehome and place init.el in ~/fakehome/.emacs.d.  
2. loads the org directory (if it exists).  This is needed in case
  there is a more recent org-mode installed in which case usage of
  babel before loading the path will result in a mixed install.  Not
  fun debugging that.    
3. loads the /real/ init code, which i have called dotemacs and which
   is contained in this file.

** debug initial values
:PROPERTIES:
:tangle:   no
:END:
   set debugs as separate blocks and turn on and off in org using tangle
     #+begin_src emacs-lisp
     (defun debug-message (&optional debug-name debug-value)
             (message (concat 
                "#+begin_debug\n"
                (format "%s\n" buffer-file-name)
                (if debug-name
                  (format "%s\n" debug-name))
                (if debug-value
                    (format "%s\n" debug-value))
                "#+end_debug\n")))
     #+end_src

  #+begin_src emacs-lisp
     (debug-message "load-path init.el entry" load-path)
     (debug-message "user-emacs-directory init.el entry" user-emacs-directory)
  #+end_src
 
** init.el

  #+results:
  : init-debug-wrap


#+Begin_src emacs-lisp :tangle init.el
  ;; see org-init.org for documentation
  (setq user-emacs-directory
        (file-name-directory (or load-file-name (buffer-file-name))))
  (let ((org-dir (expand-file-name "src/org-mode/lisp" user-emacs-directory)))
    (add-to-list 'load-path org-dir))
  (org-babel-load-file (expand-file-name "dotemacs.org" user-emacs-directory))
#+end_src
    
* bootstrap
:PROPERTIES:
:tangle:   yes
:END:
** initialization
:PROPERTIES:
:TANGLE:   yes
:END:

#+begin_src emacs-lisp
;;;_. Initialization

(setq message-log-max 16384)

(defconst emacs-start-time (current-time))

(unless noninteractive
  (message "Loading %s..." load-file-name))

#+end_src

#+RESULTS:
: Loading nil...

** using org tables in the startup process

Helper code to enable the use of org-tables

Remember right here we are in a load environment and relying on
standard emacs packages to do stuff.

#+begin_src emacs-lisp
(require 'cl)
(defun org-table-list-and-toggle (table)
"turns an org-table into a list"                                       
(if (eq (cadr table) 'hline) 
    (setq table (cddr table)))
(loop for el in table
      when (not (equal "" (cadr el))) 
      collect
      (car el)))
#+end_src
 
** load-path
  :PROPERTIES:
  :tangle: 
  :END:
*** path load defuns
#+begin_src emacs-lisp
(defun add-to-load-path (path &optional dir)
  "add dir to load path. "  
  (setq load-path
        (cons (expand-file-name path (or dir user-emacs-directory)) 
load-path)))

(defun add-to-load-path-include-subdirs (path)
  "add level 1 subdirectories of path to te load-path."
  (add-to-load-path path)
  (dolist (entry (nreverse (directory-files-and-attributes
                            (expand-file-name path user-emacs-directory))))
    (if (and (cadr entry)
             (not (equal "." (car entry)))
             (not (equal ".." (car entry)))) 
        (add-to-load-path (car entry)
                          (expand-file-name path user-emacs-directory)))))
#+end_src

*** group load path table

There are a few standard grouped path loads:
- emacs standard configure
- elpa (~/.emacs.d/elpa here), defined by ???
- ~/.emacs.d/src as the main extra source directory, for extras and for overrides.

Grouped means that every sub-directory is also added to the path.

#+name: group-load-path-table
| directory                | toggle |
|--------------------------+--------|
| src                      | t      |
| jwiegley/site-lisp       | t      |
| elpa                     | t      |

And here's where we start taking advantage of using org on startup.
If you would like to add more group loads, just add to the above
table. You can temporarily turn anything off by deleting the toggle
row.

#+begin_src emacs-lisp :var table=group-load-path-table
(defvar group-load-directories
      (list "src")
      "directory that should have their subdirectories added 
to the load-path.")

(setq group-load-directories (org-table-list-and-toggle table))
(mapc #'add-to-load-path-include-subdirs
          (nreverse group-load-directories))
#+end_src

#+results:
| src |

*** debug group load-path add
:PROPERTIES:
:tangle:   no
:END:
  #+begin_src emacs-lisp
     (debug-message "load-path after group add" load-path)
     (debug-message "group dirs" group-load-dirs)
     (debug-message "default dir" default-directory)
  #+end_src

*** load path table

Any other directories needed to be loaded onto the path go here:

#+name: load-path-table
| directory  | toggle |
|------------+--------|
| ~/.emacs.d | t      |
|            |        |

#+begin_src emacs-lisp :var table=load-path-table
(defvar path-directories
      (list "~/.emacs.d")
      "Directories that should be added to load-path.")

(setq path-directories (org-table-list-and-toggle table))
    (mapc #'add-to-load-path
          (nreverse path-directories))
    (setq load-path (delete-dups load-path))
(require 'autoloads nil t)
(require 'cus-load nil t)
#+end_src

#+results:
: cus-load

*** load-path check
    :PROPERTIES:
    :tangle:   no
    :END:

checking on the result ...

The nice thing here is the startup process can store results in
variable, or you can just C-c C-c the block in org-mode after the event.

#+begin_src emacs-lisp
(setq load-path-check 
(loop for f in load-path
               collect
               (list f)))
#+end_src

#+RESULTS:
| /Users/tonyday/.emacs.d                                             |
| /Users/tonyday/.emacs.d/src/elnode                                  |
| /Users/tonyday/.emacs.d/src/o-blog                                  |
| /Users/tonyday/.emacs.d/src/org-ehtml                               |
| /Users/tonyday/.emacs.d/src/org-mac-protocol                        |
| /Users/tonyday/.emacs.d/src/org-mode                                |
| /Users/tonyday/.emacs.d/src/org2blog                                |
| /Users/tonyday/.emacs.d/src/use-package                             |
| /Users/tonyday/.emacs.d/src                                         |
| /Users/tonyday/.emacs.d/elpa/anything-1.287                         |
| /Users/tonyday/.emacs.d/elpa/archives                               |
| /Users/tonyday/.emacs.d/elpa/auctex-11.86                           |
| /Users/tonyday/.emacs.d/elpa/clojure-mode-1.11.5                    |
| /Users/tonyday/.emacs.d/elpa/elisp-slime-nav-0.2                    |
| /Users/tonyday/.emacs.d/elpa/ess-5.14                               |
| /Users/tonyday/.emacs.d/elpa/ess-smart-underscore-0.73              |
| /Users/tonyday/.emacs.d/elpa/find-file-in-project-3.2               |
| /Users/tonyday/.emacs.d/elpa/htmlize-1.39                           |
| /Users/tonyday/.emacs.d/elpa/js-comint-0.0.1                        |
| /Users/tonyday/.emacs.d/elpa/js2-mode-20090814                      |
| /Users/tonyday/.emacs.d/elpa/json-1.2                               |
| /Users/tonyday/.emacs.d/elpa/magit-1.1.1                            |
| /Users/tonyday/.emacs.d/elpa/magithub-0.2                           |
| /Users/tonyday/.emacs.d/elpa/org-magit-0.2.0                        |
| /Users/tonyday/.emacs.d/elpa/org2blog-0.5                           |
| /Users/tonyday/.emacs.d/elpa/paredit-22                             |
| /Users/tonyday/.emacs.d/elpa/slime-20100404.1                       |
| /Users/tonyday/.emacs.d/elpa/smex-1.1.4                             |
| /Users/tonyday/.emacs.d/elpa/xml-rpc-1.6.8                          |
| /Users/tonyday/.emacs.d/elpa/yaml-mode-0.0.7                        |
| /Users/tonyday/.emacs.d/elpa/yasnippet-bundle-0.6.1                 |
| /Users/tonyday/.emacs.d/elpa/zenburn-theme-1.5                      |
| /Users/tonyday/.emacs.d/elpa                                        |
| /Users/tonyday/.emacs.d/src/org-mode/lisp                           |
| /usr/local/share/emacs/site-lisp                                    |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp               |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/vc            |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/url           |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/textmodes     |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/progmodes     |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/play          |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/org           |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/nxml          |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/net           |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/mh-e          |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/mail          |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/language      |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/international |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/gnus          |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/eshell        |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/erc           |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/emulation     |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/emacs-lisp    |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/cedet         |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/calendar      |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/calc          |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/obsolete      |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/leim               |

** simple custom
   #+begin_src emacs-lisp
 (setq custom-file "~/.emacs.d/settings.el")
(load custom-file)
   #+end_src

** elpa
   :PROPERTIES:
   :tangle:   no
   :END:
*** turn elpa package load off
    :PROPERTIES:
    :tangle:   yes
    :END:

#+begin_src emacs-lisp
    (setq package-enable-at-startup nil)
 #+end_src


*** elpa archive repositories
    :PROPERTIES:
    :tangle: 
    :END:

#+begin_src emacs-lisp
    (setq package-enable-at-startup nil)
    (setq package-archives
          '(("melpa" . "http://melpa.milkbox.net/packages/")
            ("gnu"         . "http://elpa.gnu.org/packages/")
            ("marmalade"   . "http://marmalade-repo.org/packages/")))
    (package-initialize)
 #+end_src

#+RESULTS:
: t

*** dependency checks

#+TBLNAME: table-elpa-check
| package              | check? | notes                      |
|----------------------+--------+----------------------------|
| auctex               | t      |                            |
| clojure-mode         |        |                            |
| elisp-slime-nav      | t      | add to sklisp              |
| find-file-in-project | t      | delay                      |
| idle-highlight-...   |        | didnt install properly     |
| ido-ubiquitous       | t      | package add elsewhere      |
| js-comint            |        |                            |
| js2-mode             |        |                            |
| json                 |        |                            |
| magit                | t      |                            |
| magithub             | t      | learn                      |
| org                  |        | direct from repo           |
| org-magit            | t      |                            |
| org2blog             |        |                            |
| paredit              | t      |                            |
| slime                | t      | check                      |
| smex                 | t      |                            |
| xml-rpc              | t      | dep for org2blog           |
| yaml-mode            | t      | check                      |
| yasnippet            | t      |                            |
| yasnippet-bundle     | t      | check versus yasnippet     |
| zenburn-theme        | t      | check how themes are added |

#+begin_src emacs-lisp :var table=table-elpa-check
  (defvar package-list-to-check
        (list "")
        "packages that should be checked and loaded if not found")
  (setq package-list-to-check (org-table-list-and-toggle table))
      (unless package-archive-contents
        (package-refresh-contents))
      (dolist (package package-list-to-check)
         (eval (car (read-from-string (format "(unless (package-installed-p '%s)
                                               (package-install '%s))" package package)))))
#+end_src

    (eval (car (read-from-string (format "(unless (package-installed-p '%s)
                                               (package-install '%s))" "xyz" "xyz")))))


(package-install 'xyz)



(package-installed-p 'zenburn-theme)

'(xyz abc)

** theme
  #+begin_src emacs-lisp
    (load-theme 'zenburn t)
  #+end_src

  #+RESULTS:
  : t

** use-package
   :PROPERTIES:
   :tangle: 
   :END:
#+begin_src emacs-lisp
(require 'use-package)
(eval-when-compile
  (setq use-package-verbose (null byte-compile-current-file)))
#+end_src

** Read system environment
#+begin_src emacs-lisp
;;;_ , Read system environment

(let ((plist (expand-file-name "~/.MacOSX/environment.plist")))
  (when (file-readable-p plist)
    (let ((dict (cdr (assq 'dict (cdar (xml-parse-file plist))))))
      (while dict
        (if (and (listp (car dict))
                 (eq 'key (caar dict)))
            (setenv (car (cddr (car dict)))
                    (car (cddr (car (cddr dict))))))
        (setq dict (cdr dict))))

    ;; Configure exec-path based on the new PATH
    (setq exec-path nil)
    (mapc (apply-partially #'add-to-list 'exec-path)
          (nreverse (split-string (getenv "PATH") ":")))))

#+end_src
** Load customization settings
#+begin_src emacs-lisp
;;;_ , Load customization settings

(defvar running-alternate-emacs nil)

(if (string-match (concat "/Applications/\\(Misc/\\)?"
                          "Emacs\\([A-Za-z]+\\).app/Contents/MacOS/")
                  invocation-directory)

    (let ((settings (with-temp-buffer
                      (insert-file-contents
                       (expand-file-name "settings.el" user-emacs-directory))
                      (goto-char (point-min))
                      (read (current-buffer))))
          (suffix (downcase (match-string 2 invocation-directory))))

      (setq running-alternate-emacs t
            user-data-directory
            (replace-regexp-in-string "/data/" (format "/data-%s/" suffix)
                                      user-data-directory))

      (let* ((regexp "/\\.emacs\\.d/data/")
             (replace (format "/.emacs.d/data-%s/" suffix)))
        (dolist (setting settings)
          (let ((value (and (listp setting)
                            (nth 1 (nth 1 setting)))))
            (if (and (stringp value)
                     (string-match regexp value))
                (setcar (nthcdr 1 (nth 1 setting))
                        (replace-regexp-in-string regexp replace value)))))

        (eval settings)))

  (load (expand-file-name "settings" user-emacs-directory)))

#+end_src
* guff
:PROPERTIES:
:tangle:   yes
:END:
** Window systems
#+srcname: starter-kit-window-view-stuff
#+begin_src emacs-lisp 
(when window-system
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
  (blink-cursor-mode -1))

(mouse-wheel-mode t)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

(setq visible-bell t
      echo-keystrokes 0.1
      font-lock-maximum-decoration t
      inhibit-startup-message t
      transient-mark-mode t
      color-theme-is-global t
      delete-by-moving-to-trash t
      shift-select-mode nil
      truncate-partial-width-windows nil
      uniquify-buffer-name-style 'forward
      whitespace-style '(trailing lines space-before-tab
                                  indentation space-after-tab)
      whitespace-line-column 100
      ediff-window-setup-function 'ediff-setup-windows-plain
      oddmuse-directory (concat user-emacs-directory "oddmuse")
      xterm-mouse-mode t
      save-place-file (concat user-emacs-directory "places"))
#+end_src





** file finding
#+begin_src emacs-lisp 
  (global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
  (global-set-key (kbd "C-x C-p") 'find-file-at-point)
  (global-set-key (kbd "C-c y") 'bury-buffer)
  (global-set-key (kbd "C-c r") 'revert-buffer)
  (global-set-key (kbd "M-`") 'file-cache-minibuffer-complete)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-x f") 'recentf-ido-find-file)  
#+end_src


** info docs
:PROPERTIES:
:OPEN: [2012-08-01 Wed 14:05]
:LAST:  [2012-09-07 Fri 17:45]
:CLOSE: [2012-09-07 Fri 17:45]
:END:

There's various snafu's happening:

- Auctex seems to add to info-directory not default and this clobbers
  the default usage (cellar link). 
- ess adds elpa/doc/info (which doesnt exist)

So,
- using the table below
- change both info and default variables to the list
- first directory is my own with customised dir file there

#+TBLNAME: info-dirs
| /Users/tonyday/.emacs.d/info                   |
| /usr/share/info/                               |



| /usr/local/Cellar/emacs/HEAD/share/info/emacs/ |
| /Users/tonyday/.emacs.d/elpa/magit-1.1.1       |
| /Users/tonyday/.emacs.d/elpa/auctex-11.86      |



- function to reset org-agenda-files based on the above table of directories
  and files
  #+begin_src emacs-lisp :var table=info-dirs
     (setq clean-table
           (delete nil  
                   (loop for line in table
                         collect 
                         (delete "" (delete-dups line)))))
    (setq Info-default-directory-list (apply #'append clean-table))
    (setq Info-directory-list Info-default-directory-list)
  #+end_src

  #+results:
  | /Users/tonyday/.emacs.d/info | /usr/share/info/ |


#+begin_src emacs-lisp :tangle no
(add-to-list 'Info-default-directory-list "/Users/tonyday/.emacs.d/src/org-mode/doc/")
#+end_src

#+begin_src emacs-lisp :tangle no
  (add-to-list 'Info-directory-list "/Users/tonyday/.emacs.d/src/org-mode/doc/")
#+end_src

#+results:
| /Users/tonyday/.emacs.d/src/org-mode/doc/ | /Users/tonyday/.emacs.d/elpa/auctex-11.86 | /usr/share/info/ |


#+begin_src emacs-lisp :tangle no
  (getenv "INFOPATH")
#+end_src

#+begin_src emacs-lisp :tangle no
  (print (loop for f in Info-default-directory-list
               collect
               (list f)))
#+end_src

#+results:
| /Users/tonyday/.emacs.d/elpa/doc/info/         |
| /Users/tonyday/.emacs.d/src/org-mode/doc/      |
| /usr/local/Cellar/emacs/HEAD/share/info/emacs/ |
| /usr/share/info/                               |

#+begin_src emacs-lisp :tangle no
  (print (loop for f in Info-directory-list
               collect
               (car f)))
#+end_src

#+results:
| /Users/tonyday/.emacs.d/src/org-mode/doc/ |
| /Users/tonyday/.emacs.d/elpa/auctex-11.86 |
| /usr/share/info/                          |

** window switching
#+begin_src emacs-lisp 
;;(windmove-default-keybindings) ;; Shift+direction
(global-set-key (kbd "C-x O") (lambda () (interactive) (other-window -1))) ;; back one
(global-set-key (kbd "C-x C-o") (lambda () (interactive) (other-window 2))) ;; forward two
#+end_src

** orphan bindings
#+begin_src emacs-lisp
    (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
    (global-set-key "\C-w" 'backward-kill-word)
    (global-set-key "\C-x\C-k" 'kill-region)
    (global-set-key "\C-c\C-k" 'kill-region)
    (global-set-key [f4] 'call-last-kbd-macro)
  (global-set-key "\C-x\C-m" 'execute-extended-command)
  (global-set-key "\C-c\C-m" 'execute-extended-command)
    (global-set-key (kbd "<f11> s") 'org-babel-execute-subtree)
    (global-set-key (kbd "<f11> b") 'org-babel-execute-buffer)
    (global-set-key (kbd "<f11> t") 'org-table-recalculate-buffer-tables)
    (global-set-key (kbd "<C-f4>") 'start-kbd-macro)
    (global-set-key (kbd "<S-f4>") 'end-kbd-macro)
  (global-set-key (kbd "C-<f9>") 'previous-buffer)
  (global-set-key (kbd "C-<f10>") 'next-buffer)
  (global-set-key (kbd "<f9> T") 'tabify)
  (global-set-key (kbd "<f9> U") 'untabify)
(global-set-key (kbd "C-x \\") 'align-regexp)
(global-set-key (kbd "C-M-h") 'backward-kill-word)
(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key [f1] 'menu-bar-mode)
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-x ^") 'join-line)
(global-set-key (kbd "C-h a") 'apropos)
  (define-key global-map "\C-x\C-r" 'rgrep)
  (global-unset-key (kbd "<f10>"))
  (global-set-key (kbd "<f10> y") 'yas/new-snippet)
  (global-set-key (kbd "<f10> p") 'org-publish-blog)
  (global-set-key (kbd "<f10> d") 'scarce-to-dev)

#+end_src
** orphan requires

  #+begin_src emacs-lisp
    (require 'saveplace)
    (require 'ffap)
    (require 'uniquify)
    (require 'ansi-color)
    (require 'recentf)
(require 'yaml-mode)
  (require 'find-file-in-project)
  (require 'o-blog)
  #+end_src

** orphan auto-mode-alists

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . diff-mode))
(add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
(add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.js\\(on\\)?$" . js2-mode))
;; (add-to-list 'auto-mode-alist '("\\.xml$" . nxml-mode))
#+end_src

** orphan settings
 #+begin_src emacs-lisp
   (whitespace-mode t)  
   (setq save-place t)
   (auto-fill-mode t)
   (column-number-mode t)
(setq shift-select-mode t)
(setq display-time-format " %I:%M%p %a %d %b ")
(display-time-mode)
(delete-selection-mode)
(setq ido-file-extensions-order '(".org"))
(setq sentence-end-double-space nil)  
(column-number-mode t)
 #+end_src

** orphaned defuns

*** transpose-windows
  #+begin_src emacs-lisp
    (defun transpose-windows (arg)
      "Transpose the buffers shown in two windows."
      (interactive "p")
      (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
        (while (/= arg 0)
          (let ((this-win (window-buffer))
                (next-win (window-buffer (funcall selector))))
            (set-window-buffer (selected-window) next-win)
            (set-window-buffer (funcall selector) this-win)
            (select-window (funcall selector)))
          (setq arg (if (plusp arg) (1- arg) (1+ arg))))))
    (define-key ctl-x-4-map (kbd "t") 'transpose-windows)
  #+end_src

*** plainlistify-paragraph
#+begin_src emacs-lisp
  (defun unfill-region (beg end)
      "Unfill the region, joining text paragraphs into a single
    logical line.  This is useful, e.g., for use with
    `visual-line-mode'."
      (interactive "*r")
      (let ((fill-column (point-max)))
        (fill-region beg end)))
    
    ;; Handy key definition
    (define-key global-map "\C-\M-Q" 'unfill-region)

  (defun unfill-paragraph ()
      "Takes a multi-line paragraph and makes it into a single line of text."
      (interactive)
      (let ((fill-column (point-max)))
        (fill-paragraph nil)))
    ;; Handy key definition
    (define-key global-map "\M-Q" 'unfill-paragraph)

#+end_src

#+results:
: unfill-paragraph







** orphaned mode sets

#+begin_src emacs-lisp
  (show-paren-mode 1)
(recentf-mode 1)
(auto-compression-mode t)
(menu-bar-mode -1)

#+end_src

** orphaned orphans
#+begin_src emacs-lisp 
  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (set-default 'imenu-auto-rescan t)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (random t)
(when window-system
  (tooltip-mode -1)
  (tool-bar-mode -1))
(setq backup-directory-alist `(("." . ,(expand-file-name
                                        (concat user-emacs-directory "backups")))))


#+end_src







** Utility macros and functions
#+begin_src emacs-lisp
;;;_ , Utility macros and functions

(defmacro hook-into-modes (func modes)
  `(dolist (mode-hook ,modes)
     (add-hook mode-hook ,func)))

(defun system-idle-time ()
  (with-temp-buffer
    (call-process "ioreg" nil (current-buffer) nil
                  "-c" "IOHIDSystem" "-d" "4" "-S")
    (goto-char (point-min))
    (and (re-search-forward "\"HIDIdleTime\" = \\([0-9]+\\)" nil t)
         (/ (float (string-to-number (match-string 1)))
            1000000000.0))))

(defun quickping (host)
  (= 0 (call-process "/sbin/ping" nil nil nil "-c1" "-W50" "-q" host)))

(defun cleanup-term-log ()
  "Do not show ^M in files containing mixed UNIX and DOS line endings."
  (interactive)
  (require 'ansi-color)
  (ansi-color-apply-on-region (point-min) (point-max))
  (goto-char (point-min))
  (while (re-search-forward "\\(.\\|
$\\|P.+\\\\\n\\)" nil t)
    (overlay-put (make-overlay (match-beginning 0) (match-end 0))
                 'invisible t))
  (set-buffer-modified-p nil))

(add-hook 'find-file-hooks
          (function
           (lambda ()
             (if (string-match "/\\.iTerm/.*\\.log\\'"
                               (buffer-file-name))
                 (cleanup-term-log)))))

#+end_src
** Enable disabled commands
#+begin_src emacs-lisp
;;;_ , Enable disabled commands

(put 'downcase-region  'disabled nil)   ; Let downcasing work
(put 'erase-buffer     'disabled nil)
(put 'eval-expression  'disabled nil)   ; Let ESC-ESC work
(put 'narrow-to-page   'disabled nil)   ; Let narrowing work
(put 'narrow-to-region 'disabled nil)   ; Let narrowing work
(put 'set-goal-column  'disabled nil)
(put 'upcase-region    'disabled nil)   ; Let upcasing work

#+end_src
** Keybindings
#+begin_src emacs-lisp
;;;_. Keybindings

;; Main keymaps for personal bindings are:
;;
;;   C-x <letter>  primary map (has many defaults too)
;;   C-c <letter>  secondary map (not just for mode-specific)
;;   C-. <letter>  tertiary map
;;
;;   M-g <letter>  goto map
;;   M-s <letter>  search map
;;   M-o <letter>  markup map (even if only temporarily)
;;
;;   C-<capital letter>
;;   M-<capital letter>
;;
;;   A-<anything>
;;   M-A-<anything>
;;
;; Single-letter bindings still available:
;;   C- ,'";:?<>|!#$%^&*`~ <tab>
;;   M- ?#

#+end_src
*** global-map
#+begin_src emacs-lisp
;;;_ , global-map

#+end_src
**** C-?
#+begin_src emacs-lisp
;;;_  . C-?

(defvar ctl-period-map)
(define-prefix-command 'ctl-period-map)
(bind-key "C-." 'ctl-period-map)

(bind-key* "<C-return>" 'other-window)

(defun collapse-or-expand ()
  (interactive)
  (if (> (length (window-list)) 1)
      (delete-other-windows)
    (bury-buffer)))

(bind-key "C-z" 'collapse-or-expand)

#+end_src
**** M-?
#+begin_src emacs-lisp
;;;_  . M-?

(defadvice async-shell-command (before uniqify-running-shell-command activate)
  (let ((buf (get-buffer "*Async Shell Command*")))
    (if buf
        (let ((proc (get-buffer-process buf)))
          (if (and proc (eq 'run (process-status proc)))
              (with-current-buffer buf
                (rename-uniquely)))))))

(bind-key "M-!" 'async-shell-command)
(bind-key "M-/" 'dabbrev-expand)
(bind-key "M-'" 'insert-pair)
(bind-key "M-\"" 'insert-pair)

(defun align-code (beg end &optional arg)
  (interactive "rP")
  (if (null arg)
      (align beg end)
    (let ((end-mark (copy-marker end)))
      (indent-region beg end-mark nil)
      (align beg end-mark))))

(bind-key "M-[" 'align-code)
(bind-key "M-`" 'other-frame)

(bind-key "M-j" 'delete-indentation-forward)
(bind-key "M-J" 'delete-indentation)

(bind-key "M-W" 'mark-word)

(defun mark-line (&optional arg)
  (interactive "p")
  (beginning-of-line)
  (let ((here (point)))
    (dotimes (i arg)
      (end-of-line))
    (set-mark (point))
    (goto-char here)))

(bind-key "M-L" 'mark-line)

(defun mark-sentence (&optional arg)
  (interactive "P")
  (backward-sentence)
  (mark-end-of-sentence arg))

(bind-key "M-S" 'mark-sentence)
(bind-key "M-X" 'mark-sexp)
(bind-key "M-H" 'mark-paragraph)
(bind-key "M-D" 'mark-defun)

(bind-key "M-g c" 'goto-char)
(bind-key "M-g l" 'goto-line)

(defun delete-indentation-forward ()
  (interactive)
  (delete-indentation t))

(bind-key "M-s n" 'find-name-dired)
(bind-key "M-s o" 'occur)

(bind-key "A-M-w" 'copy-code-as-rtf)

#+end_src
**** M-C-?
#+begin_src emacs-lisp
;;;_  . M-C-?

(bind-key "<C-M-backspace>" 'backward-kill-sexp)

(defun isearch-backward-other-window ()
  (interactive)
  (split-window-vertically)
  (call-interactively 'isearch-backward))

(bind-key "C-M-r" 'isearch-backward-other-window)

(defun isearch-forward-other-window ()
  (interactive)
  (split-window-vertically)
  (call-interactively 'isearch-forward))

(bind-key "C-M-s" 'isearch-forward-other-window)

;; Some further isearch bindings
(bind-key "C-c" 'isearch-toggle-case-fold isearch-mode-map)
(bind-key "C-t" 'isearch-toggle-regexp isearch-mode-map)
(bind-key "C-^" 'isearch-edit-string isearch-mode-map)
(bind-key "C-i" 'isearch-complete isearch-mode-map)

#+end_src
**** A-?
#+begin_src emacs-lisp
;;;_  . A-?

(define-key key-translation-map (kbd "A-TAB") (kbd "C-TAB"))

#+end_src
*** ctl-x-map
#+begin_src emacs-lisp
;;;_ , ctl-x-map

#+end_src
**** C-x ?
#+begin_src emacs-lisp
;;;_  . C-x ?

(bind-key "C-x B" 'ido-switch-buffer-other-window)
(bind-key "C-x d" 'delete-whitespace-rectangle)
(bind-key "C-x F" 'set-fill-column)
(bind-key "C-x t" 'toggle-truncate-lines)

#+end_src
**** C-x C-?
#+begin_src emacs-lisp
;;;_  . C-x C-?

(defun duplicate-line ()
  "Duplicate the line containing point."
  (interactive)
  (save-excursion
    (let (line-text)
      (goto-char (line-beginning-position))
      (let ((beg (point)))
        (goto-char (line-end-position))
        (setq line-text (buffer-substring beg (point))))
      (if (eobp)
          (insert ?\n)
        (forward-line))
      (open-line 1)
      (insert line-text))))

(bind-key "C-x C-d" 'duplicate-line)
(bind-key "C-x C-e" 'pp-eval-last-sexp)
(bind-key "C-x C-n" 'next-line)


(defun find-alternate-file-with-sudo (filename)
  (interactive
   (list (read-file-name "Find alternate file: " nil
                         nil nil (concat "/sudo::" (buffer-file-name)))))
  (find-alternate-file filename))

(bind-key "C-x C-v" 'find-alternate-file-with-sudo)

#+end_src
**** C-x M-?
#+begin_src emacs-lisp
;;;_  . C-x M-?

(bind-key "C-x M-n" 'set-goal-column)

(defun refill-paragraph (arg)
  (interactive "*P")
  (let ((fun (if (memq major-mode '(c-mode c++-mode))
                 'c-fill-paragraph
               (or fill-paragraph-function
                   'fill-paragraph)))
        (width (if (numberp arg) arg))
        prefix beg end)
    (forward-paragraph 1)
    (setq end (copy-marker (- (point) 2)))
    (forward-line -1)
    (let ((b (point)))
      (skip-chars-forward "^A-Za-z0-9`'\"(")
      (setq prefix (buffer-substring-no-properties b (point))))
    (backward-paragraph 1)
    (if (eolp)
        (forward-char))
    (setq beg (point-marker))
    (delete-horizontal-space)
    (while (< (point) end)
      (delete-indentation 1)
      (end-of-line))
    (let ((fill-column (or width fill-column))
          (fill-prefix prefix))
      (if prefix
          (setq fill-column
                (- fill-column (* 2 (length prefix)))))
      (funcall fun nil)
      (goto-char beg)
      (insert prefix)
      (funcall fun nil))
    (goto-char (+ end 2))))

(bind-key "C-x M-q" 'refill-paragraph)

#+end_src
*** mode-specific-map
#+begin_src emacs-lisp
;;;_ , mode-specific-map

#+end_src
**** C-c ?
#+begin_src emacs-lisp
;;;_  . C-c ?

(bind-key "C-c <tab>" 'ff-find-other-file)
(bind-key "C-c SPC" 'just-one-space)

;; inspired by Erik Naggum's `recursive-edit-with-single-window'
(defmacro recursive-edit-preserving-window-config (body)
  "*Return a command that enters a recursive edit after executing BODY.
 Upon exiting the recursive edit (with\\[exit-recursive-edit] (exit)
 or \\[abort-recursive-edit] (abort)), restore window configuration
 in current frame."
  `(lambda ()
     "See the documentation for `recursive-edit-preserving-window-config'."
     (interactive)
     (save-window-excursion
       ,body
       (recursive-edit))))

(bind-key "C-c 0"
  (recursive-edit-preserving-window-config (delete-window)))
(bind-key "C-c 1"
  (recursive-edit-preserving-window-config
   (if (one-window-p 'ignore-minibuffer)
       (error "Current window is the only window in its frame")
     (delete-other-windows))))

(defun delete-current-line (&optional arg)
  (interactive "p")
  (let ((here (point)))
    (beginning-of-line)
    (kill-line arg)
    (goto-char here)))

(bind-key "C-c d" 'delete-current-line)

(bind-key "C-c e E" 'elint-current-buffer)

(defun do-eval-buffer ()
  (interactive)
  (call-interactively 'eval-buffer)
  (message "Buffer has been evaluated"))

(bind-key "C-c e b" 'do-eval-buffer)
(bind-key "C-c e c" 'cancel-debug-on-entry)
(bind-key "C-c e d" 'debug-on-entry)
(bind-key "C-c e e" 'toggle-debug-on-error)
(bind-key "C-c e f" 'emacs-lisp-byte-compile-and-load)
(bind-key "C-c e j" 'emacs-lisp-mode)
(bind-key "C-c e l" 'find-library)
(bind-key "C-c e r" 'eval-region)
(bind-key "C-c e s" 'scratch)
(bind-key "C-c e v" 'edit-variable)

(defun find-which (name)
  (interactive "sCommand name: ")
  (find-file-other-window
   (substring (shell-command-to-string (format "which %s" name)) 0 -1)))

(bind-key "C-c e w" 'find-which)
(bind-key "C-c e z" 'byte-recompile-directory)

(bind-key "C-c f" 'flush-lines)
(bind-key "C-c g" 'goto-line)

(bind-key "C-c k" 'keep-lines)

(eval-when-compile
  (defvar emacs-min-top)
  (defvar emacs-min-left)
  (defvar emacs-min-height)
  (defvar emacs-min-width))

(unless noninteractive
  (if running-alternate-emacs
      (progn
        (defvar emacs-min-top (if (= 1050 (x-display-pixel-height)) 574 722))
        (defvar emacs-min-left 5)
        (defvar emacs-min-height 25)
        (defvar emacs-min-width 80))

    (defvar emacs-min-top 22)
    (defvar emacs-min-left (- (x-display-pixel-width) 918))
    (defvar emacs-min-height (if (= 1050 (x-display-pixel-height)) 55 64))
    (defvar emacs-min-width 100)))

(defun emacs-min ()
  (interactive)
  (set-frame-parameter (selected-frame) 'fullscreen nil)
  (set-frame-parameter (selected-frame) 'vertical-scroll-bars nil)
  (set-frame-parameter (selected-frame) 'horizontal-scroll-bars nil)
  (set-frame-parameter (selected-frame) 'top emacs-min-top)
  (set-frame-parameter (selected-frame) 'left emacs-min-left)
  (set-frame-parameter (selected-frame) 'height emacs-min-height)
  (set-frame-parameter (selected-frame) 'width emacs-min-width)

  (when running-alternate-emacs
    (set-background-color "grey85")
    (set-face-background 'fringe "gray80")))

(if window-system
    (add-hook 'after-init-hook 'emacs-min))

(defun emacs-max ()
  (interactive)
  (if t
      (progn
        (set-frame-parameter (selected-frame) 'fullscreen 'fullboth)
        (set-frame-parameter (selected-frame) 'vertical-scroll-bars nil)
        (set-frame-parameter (selected-frame) 'horizontal-scroll-bars nil))
    (set-frame-parameter (selected-frame) 'top 26)
    (set-frame-parameter (selected-frame) 'left 2)
    (set-frame-parameter (selected-frame) 'width
                         (floor (/ (float (x-display-pixel-width)) 9.15)))
    (if (= 1050 (x-display-pixel-height))
        (set-frame-parameter (selected-frame) 'height
                             (if (>= emacs-major-version 24)
                                 66
                               55))
      (set-frame-parameter (selected-frame) 'height
                           (if (>= emacs-major-version 24)
                               75
                             64)))))

(defun emacs-toggle-size ()
  (interactive)
  (if (> (cdr (assq 'width (frame-parameters))) 100)
      (emacs-min)
    (emacs-max)))

(bind-key "C-c m" 'emacs-toggle-size)

(defun insert-date ()
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))

(defcustom user-initials nil
  "*Initials of this user."
  :set
  #'(lambda (symbol value)
      (if (fboundp 'font-lock-add-keywords)
          (mapc
           #'(lambda (mode)
               (font-lock-add-keywords
                mode (list (list (concat "\\<\\(" value " [^:\n]+\\):")
                                 1 font-lock-warning-face t))))
           '(c-mode c++-mode emacs-lisp-mode lisp-mode
                    python-mode perl-mode java-mode groovy-mode
                    haskell-mode literate-haskell-mode)))
      (set symbol value))
  :type 'string
  :group 'mail)

(defun insert-user-timestamp ()
  "Insert a quick timestamp using the value of `user-initials'."
  (interactive)
  (insert (format "%s (%s): " user-initials
                  (format-time-string "%Y-%m-%d" (current-time)))))

(bind-key "C-c n" 'insert-user-timestamp)
(bind-key "C-c o" 'customize-option)
(bind-key "C-c O" 'customize-group)

(bind-key "C-c q" 'fill-region)
(bind-key "C-c r" 'replace-regexp)
(bind-key "C-c s" 'replace-string)
(bind-key "C-c u" 'rename-uniquely)

(autoload 'auth-source-search "auth-source")

(defun tinify-url (url)
  (interactive "sURL to shorten: ")
  (let* ((api-login "jwiegley")
         (api-key
          (funcall
           (plist-get
            (car (auth-source-search :host "api.j.mp" :user api-login
                                     :type 'netrc :port 80))
            :secret))))
    (flet ((message (&rest ignore)))
      (with-current-buffer
          (let ((query
                 (format "format=txt&longUrl=%s&login=%s&apiKey=%s"
                         (url-hexify-string url) api-login api-key)))
            (url-retrieve-synchronously
             (concat "http://api.j.mp/v3/shorten?" query)))
        (goto-char (point-min))
        (re-search-forward "^$")
        (prog1
            (kill-new (buffer-substring (1+ (point)) (1- (point-max))))
          (kill-buffer (current-buffer)))))))

(bind-key "C-c U" 'tinify-url)
(bind-key "C-c v" 'ffap)

(defun view-clipboard ()
  (interactive)
  (delete-other-windows)
  (switch-to-buffer "*Clipboard*")
  (let ((inhibit-read-only t))
    (erase-buffer)
    (clipboard-yank)
    (goto-char (point-min))
    (html-mode)
    (view-mode)))

(bind-key "C-c V" 'view-clipboard)
(bind-key "C-c z" 'clean-buffer-list)

(bind-key "C-c [" 'align-regexp)
(bind-key "C-c =" 'count-matches)
(bind-key "C-c ;" 'comment-or-uncomment-region)

#+end_src
**** C-c C-?
#+begin_src emacs-lisp
;;;_  . C-c C-?

(defun delete-to-end-of-buffer ()
  (interactive)
  (kill-region (point) (point-max)))

(bind-key "C-c C-z" 'delete-to-end-of-buffer)

#+end_src
**** C-c M-?
#+begin_src emacs-lisp
;;;_  . C-c M-?

(defun unfill-paragraph (arg)
  (interactive "*p")
  (let (beg end)
    (forward-paragraph arg)
    (setq end (copy-marker (- (point) 2)))
    (backward-paragraph arg)
    (if (eolp)
        (forward-char))
    (setq beg (point-marker))
    (when (> (count-lines beg end) 1)
      (while (< (point) end)
        (goto-char (line-end-position))
        (let ((sent-end (memq (char-before) '(?. ?\; ?! ??))))
          (delete-indentation 1)
          (if sent-end
              (insert ? )))
        (end-of-line))
      (save-excursion
        (goto-char beg)
        (while (re-search-forward "[^.;!?:]\\([ \t][ \t]+\\)" end t)
          (replace-match " " nil nil nil 1))))))

(bind-key "C-c M-q" 'unfill-paragraph)

(defun unfill-region (beg end)
  (interactive "r")
  (setq end (copy-marker end))
  (save-excursion
    (goto-char beg)
    (while (< (point) end)
      (unfill-paragraph 1)
      (forward-paragraph))))

#+end_src
*** ctl-period-map
#+begin_src emacs-lisp
;;;_ , ctl-period-map

#+end_src
**** C-. ?
#+begin_src emacs-lisp
;;;_  . C-. ?

(bind-key "C-. m" 'kmacro-keymap)

#+end_src
**** C-. C-i
#+begin_src emacs-lisp
;;;_  . C-. C-i

(bind-key "C-. C-i" 'indent-rigidly)

#+end_src
*** help-map
#+begin_src emacs-lisp
;;;_ , help-map

(defvar lisp-find-map)
(define-prefix-command 'lisp-find-map)

(bind-key "C-h e" 'lisp-find-map)

#+end_src
**** C-h e ?
#+begin_src emacs-lisp
;;;_  . C-h e ?

(bind-key "C-h e c" 'finder-commentary)
(bind-key "C-h e e" 'view-echo-area-messages)
(bind-key "C-h e f" 'find-function)
(bind-key "C-h e F" 'find-face-definition)

(defun my-describe-symbol  (symbol &optional mode)
  (interactive
   (info-lookup-interactive-arguments 'symbol current-prefix-arg))
  (let (info-buf find-buf desc-buf cust-buf)
    (save-window-excursion
      (ignore-errors
        (info-lookup-symbol symbol mode)
        (setq info-buf (get-buffer "*info*")))
      (let ((sym (intern-soft symbol)))
        (when sym
          (if (functionp sym)
              (progn
                (find-function sym)
                (setq find-buf (current-buffer))
                (describe-function sym)
                (setq desc-buf (get-buffer "*Help*")))
            (find-variable sym)
            (setq find-buf (current-buffer))
            (describe-variable sym)
            (setq desc-buf (get-buffer "*Help*"))
            ;;(customize-variable sym)
            ;;(setq cust-buf (current-buffer))
            ))))

    (delete-other-windows)

    (flet ((switch-in-other-buffer
            (buf)
            (when buf
              (split-window-vertically)
              (switch-to-buffer-other-window buf))))
      (switch-to-buffer find-buf)
      (switch-in-other-buffer desc-buf)
      (switch-in-other-buffer info-buf)
      ;;(switch-in-other-buffer cust-buf)
      (balance-windows))))

(bind-key "C-h e d" 'my-describe-symbol)
(bind-key "C-h e i" 'info-apropos)
(bind-key "C-h e k" 'find-function-on-key)
(bind-key "C-h e l" 'find-library)

(defvar lisp-modes  '(emacs-lisp-mode
                      inferior-emacs-lisp-mode
                      ielm-mode
                      lisp-mode
                      inferior-lisp-mode
                      lisp-interaction-mode
                      slime-repl-mode))

(defvar lisp-mode-hooks
  (mapcar (function
           (lambda (mode)
             (intern
              (concat (symbol-name mode) "-hook"))))
          lisp-modes))

(defun scratch ()
  (interactive)
  (let ((current-mode major-mode))
    (switch-to-buffer-other-window (get-buffer-create "*scratch*"))
    (goto-char (point-min))
    (when (looking-at ";")
      (forward-line 4)
      (delete-region (point-min) (point)))
    (goto-char (point-max))
    (if (memq current-mode lisp-modes)
        (funcall current-mode))))

(bind-key "C-h e s" 'scratch)
(bind-key "C-h e v" 'find-variable)
(bind-key "C-h e V" 'apropos-value)

#+end_src
* packages
:PROPERTIES:
:tangle:   yes
:END:
** scratch
:PROPERTIES:
:OPEN: [2012-07-23 Mon 12:12]
:LAST:     [2012-10-11 Thu 13:28]
:CLOSE:    [2012-10-11 Thu 13:28]
:END:
All this scratching is making me itch.
- [ ] test these
- [ ] find out how/where *scratch*
- [ ] make a *escratch*
#+begin_src emacs-lisp 
  (global-set-key (kbd "<f9> o") 'make-org-scratch)
  (global-set-key (kbd "<f9> s") 'switch-to-org-scratch)
  (global-set-key (kbd "<f9> e") 'make-elisp-scratch)
  (global-set-key (kbd "<f9> z") 'switch-to-elisp-scratch)
#+end_src

Defuns
#+begin_src emacs-lisp 
(defun make-org-scratch ()
  (interactive)
  (find-file "~/.emacs.d/tmp/scratch.org")
  (ido-make-directory "~/.emacs.d/tmp"))  
(defun make-elisp-scratch ()
  (interactive)
  (find-file "~/.emacs.d/tmp/scratch.el")
  (ido-make-directory "~/.emacs.d/tmp"))  
(defun switch-to-org-scratch ()
  (interactive)
  (switch-to-buffer "*scratch*"))
(defun switch-to-elisp-scratch ()
  (interactive)
  (switch-to-buffer "*escratch*"))
#+end_src



** isearch
#+begin_src emacs-lisp
    (define-key isearch-mode-map (kbd "C-o") 'isearch-occur)
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "\C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

#+end_src

#+begin_src emacs-lisp 
  (define-key isearch-mode-map (kbd "C-o")
    (lambda () (interactive)
      (let ((case-fold-search isearch-case-fold-search))
        (occur (if isearch-regexp
                   isearch-string
                 (regexp-quote isearch-string))))))
#+end_src


** hippie expand
** hippie expand
#+begin_src emacs-lisp
(delete 'try-expand-line hippie-expand-try-functions-list)
(delete 'try-expand-list hippie-expand-try-functions-list)
#+end_src

** ediff

#+begin_src emacs-lisp
  (setq diff-switches "-u")
(eval-after-load 'diff-mode
  '(progn
     (set-face-foreground 'diff-added "green4")
     (set-face-foreground 'diff-removed "red3")))

#+end_src


** yasnippet
[[http://code.google.com/p/yasnippet/][yasnippet]] is yet another snippet expansion system for Emacs.  It is
  inspired by TextMate's templating syntax.
  - watch the [[http://www.youtube.com/watch?v=vOj7btx3ATg][video on YouTube]]
  - see the [[http://yasnippet.googlecode.com/svn/trunk/doc/index.html][intro and tutorial]]

*** load the yasnippet bundle
  #+begin_src emacs-lisp
    (require 'yasnippet-bundle)
    (yas/initialize)
  #+end_src

*** load the snippets defined in the =./snippets/= directory
  #+begin_src emacs-lisp
    (yas/load-directory (expand-file-name "snippets" user-emacs-directory))
  #+end_src

*** org yas play nicely

  The latest version of yasnippets doesn't play well with Org-mode, the
  following function allows these two to play nicely together.
  #+begin_src emacs-lisp
    (defun yas/org-very-safe-expand ()
      (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
    
    (defun yas/org-setup ()
      ;; yasnippet (using the new org-cycle hooks)
      (make-variable-buffer-local 'yas/trigger-key)
      (setq yas/trigger-key [tab])
      (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
      (define-key yas/keymap [tab] 'yas/next-field))
    
    (add-hook 'org-mode-hook #'yas/org-setup)
  #+end_src


*** ido completion for yasnippet insertion
  #+begin_src emacs-lisp
    (setq yas/prompt-functions '(yas/ido-prompt yas/dropdown-prompt
                                                yas/completing-prompt yas/x-prompt yas/no-prompt))
  #+end_src

*** yas/insert bound to f9-y
  #+begin_src emacs-lisp 
    (global-set-key (kbd "<f9> y") 'yas/insert-snippet)
  #+end_src

** ido
*** ido mode
ido-mode is like magic pixie dust!
#+srcname: starter-kit-loves-ido-mode
#+begin_src emacs-lisp 
(when (> emacs-major-version 21)
  (ido-mode t)
  (setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
        ido-use-filename-at-point t
        ido-max-prospects 10))
#+end_src

*** recent-ido-find-file
#+begin_src emacs-lisp 
  (defun recentf-ido-find-file () 
    "Find a recent file using Ido." 
    (interactive) 
    (let* ((file-assoc-list 
            (mapcar (lambda (x) 
                      (cons (file-name-nondirectory x) 
                            x)) 
                    recentf-list)) 
           (filename-list 
            (remove-duplicates (mapcar #'car file-assoc-list) 
                               :test #'string=)) 
           (filename (ido-completing-read "Choose recent file: " 
                                          filename-list 
                                          nil 
                                          t))) 
      (when filename 
        (find-file (cdr (assoc filename 
                               file-assoc-list)))))) 
 #+end_src 




** org-mode                                                             :org:
:LOGBOOK:
- State "TODO"       from ""           [2012-07-19 Thu 09:49]
:END:
:PROPERTIES:
		:ID:       29d70d42-d144-4fe0-b28b-0edfa6cf91cc
                :OPEN:     [2012-07-21 Sat 20:51]
:LAST: TODO [2012-07-23 Mon 11:27]
		:END:
*** Standard Settings
I start with Org mode


#+begin_src emacs-lisp 
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
  (add-hook 'org-mode-hook 'auto-fill-mode)
  (setq initial-major-mode (quote org-mode))
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
#+end_src

#+results:
: org-mode

*** Miscellaneous Settings
#+begin_src emacs-lisp 
  ;; shift-select
  (setq org-support-shift-select t)
  ;; keeps links so we can reuse/paste them again
  (setq org-keep-stored-link-after-insertion t)
  
#+end_src

#+results:
: t

*** Starter Kit Keybindings
   :PROPERTIES:
   :CUSTOM_ID: keybindings
   :END:
- global key bindings are in my [[file:starter-kit-bindings.org][starter kit bindings]]
- [ ] toggle iimage not worging
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-iimage-in-org)))
#+end_src

#+results:
| #[nil \300\301\302\303\304$\207 [add-hook before-save-hook org-encrypt-entries nil t] 5] | #[nil \300\301\302\303\304$\207 [org-add-hook change-major-mode-hook org-show-block-all append local] 5] | (lambda nil (local-set-key \216 (quote outline-next-visible-heading)) (local-set-key \220 (quote outline-previous-visible-heading)) (local-set-key \225 (quote outline-up-heading)) (local-set-key \227 (quote org-table-copy-region)) (local-set-key \231 (quote org-table-paste-rectangle)) (local-set-key \214 (quote org-table-sort-lines)) (local-set-key \311 (quote org-toggle-iimage-in-org))) | auto-fill-mode | #[nil \300\301\302\303\304$\207 [org-add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

*** remaining key bindings
:PROPERTIES:
			:ID:       c0914200-d73d-4205-aba1-6cca8b2dd8f1
			:Effort:   0:15
                        :OPEN:     [2012-07-23 Mon 12:22]
:LAST:     [2012-10-11 Thu 13:11]
:CLOSE:    [2012-10-11 Thu 13:11]
			:END:

- [ ] still to rip and test
- [ ] switch to locally set???
#+begin_src emacs-lisp 
(global-set-key (kbd "<f5>") 'bh/org-todo)
(global-set-key (kbd "<S-f5>") 'bh/widen)
(global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
(global-set-key (kbd "<f9> c") 'org-cycle-agenda-files)
(global-set-key (kbd "<f9> <f9>") 'bh/show-org-agenda)
(global-set-key (kbd "<f9> h") 'bh/hide-other)
(global-set-key (kbd "<f9> n") 'org-narrow-to-subtree)
(global-set-key (kbd "<f9> w") 'widen)
(global-set-key (kbd "<f9> u") 'bh/narrow-up-one-level)
(global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
(global-set-key (kbd "<f9> v") 'visible-mode)
(global-set-key (kbd "<f9> p") 'org-publish-current-project)
(global-set-key (kbd "<f9> l") 'org-insert-last-link)
(global-set-key (kbd "M-<f9>") 'org-toggle-inline-images)
(global-set-key (kbd "C-x n r") 'narrow-to-region)
(global-set-key (kbd "C-c s") 'org-insert-subheading)
#+end_src

#+results:
: org-insert-subheading

*** search
 #+begin_src emacs-lisp  
(setq org-link-abbrev-alist
       '(("bugzilla"  . "http://10.1.2.9/bugzilla/show_bug.cgi?id=")
         ("url-to-ja" . "http://translate.google.fr/translate?sl=en&tl=ja&u=%h")
         ("google"    . "http://www.google.com/search?q=")
         ("gmap"      . "http://maps.google.com/maps?q=%s")
         ("omap"      . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
         ("ads"       .
         "http://adsabs.harvard.edu/cgi-bin/nph-abs_connect?author=%s&db_key=AST")))
#+end_src

 #+results:
 | (bugzilla . http://10.1.2.9/bugzilla/show_bug.cgi?id=) | (url-to-ja . http://translate.google.fr/translate?sl=en&tl=ja&u=%h) | (google . http://www.google.com/search?q=) | (gmap . http://maps.google.com/maps?q=%s) | (omap . http://nominatim.openstreetmap.org/search?q=%s&polygon=1) | (ads . http://adsabs.harvard.edu/cgi-bin/nph-abs_connect?author=%s&db_key=AST) |

[[google:goofy]]

*** Encryption within Org
#+begin_src emacs-lisp 
(require 'org-crypt)
; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
; GPG key to use for encryption
(setq org-crypt-key nil)
(setq org-crypt-disable-auto-save nil)
#+end_src

#+results:



*** MobileOrg
:PROPERTIES:
:OPEN: [2012-07-23 Mon 11:48]
:LAST:     [2012-09-16 Sun 09:11]
:CLOSE:    [2012-09-16 Sun 09:11]
:END:

MobileOrg via Dropbox
#+begin_src emacs-lisp 
  (setq org-default-notes-file "~/stuff/org/refile.org")
  ;; Set to the name of the file where new notes will be stored
  (setq org-mobile-inbox-for-pull "~/stuff/org/refile.org")
  ;; Set to <your Dropbox root directory>/MobileOrg.
  (setq org-mobile-directory "~/Dropbox/MobileOrg")
#+end_src

#+results:
: ~/Dropbox/MobileOrg


Character encoding
- [ ] I think the character coding is already set ok by starter kit (but need to check)
#+begin_src emacs-lisp :tangle no
(if (eq system-type 'darwin)
    (progn
      (prefer-coding-system 'utf-8-unix)
      (set-default-coding-systems 'utf-8-unix)
      (if (< emacs-major-version 23)
          (set-keyboard-coding-system 'utf-8))
      (set-clipboard-coding-system 'utf-8)
      (set-terminal-coding-system 'utf-8)))
(if (or (eq system-type 'gnu/linux)
        (eq system-type 'windows-nt))
    (progn
      (prefer-coding-system 'utf-8-unix)
      (load-library "iso-transl")))
(define-coding-system-alias 'utf-8-emacs 'utf-8) ; needed by bbdb...
#+end_src

#+results:

*** Clocking into drawers
#+begin_src emacs-lisp 
;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
#+end_src

#+results:
: t


*** State and Change
:PROPERTIES:
:OPEN: [2012-07-23 Mon 19:44]
:LAST:  [2012-07-23 Mon 20:24]
:CLOSE: [2012-07-23 Mon 20:24]
:END:
- I use a customised state change hook to record when state changes occur.
#+begin_src emacs-lisp 
(setq org-log-done nil)
(setq org-log-into-drawer t)
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)"))))
(setq org-use-fast-todo-selection t)
(setq org-treat-S-cursor-todo-selection-as-state-change t)
(setq org-todo-state-tags-triggers nil)
;;(add-hook 'org-after-todo-state-change-hook 'zyg/log-state-change)
#+end_src

#+results:
| org-clock-out-if-current | org-checklist | zyg/log-state-change |

- It's frustrating, but org is usually correct
#+begin_src emacs-lisp 
(setq org-enforce-todo-dependencies t)
#+end_src

#+results:
: t

  
*** Plain Lists


- Demotion
  #+begin_src emacs-lisp 
  (setq org-list-demote-modify-bullet (quote (("+" . "-")
                                              ("*" . "-")
                                              ("1." . "-")
                                              ("1)" . "-"))))
  #+end_src

  #+results:
  | (+ . -) | (* . -) | (1. . -) | (1) . -) |

- Reset Repeater Checklist
  Repeater checklists saved my career.
  http://orgmode.org/worg/org-contrib/org-checklist.html
  #+begin_src emacs-lisp 
  (require 'org-checklist)
  #+end_src

  #+results:
  : org-checklist

- Use cycle for plain lists
  #+begin_src emacs-lisp 
  (setq org-cycle-include-plain-lists t)
  #+end_src

  #+results:
  : t



*** Priority

Using priorities kills the ability to ever use S-down to select
regions.  Can't bring myself to do it - instead I use an urgent tag.

#+begin_src emacs-lisp 
  (setq org-enable-priority-commands nil)
#+end_src

#+results:


*** Capture
:LOGBOOK:
CLOCK: [2012-08-23 Thu 20:49]--[2012-08-24 Fri 10:02] => 13:13
- Note taken on [2012-07-21 Sat 21:09] \\
  edited to account for timestamp stuff
:END:
:PROPERTIES:
:ID:       e79ecad1-2428-452a-b9d6-9fdd3ef8a174
:END:



#+begin_src emacs-lisp 
  
  (setq org-capture-templates
        (quote (("t" "todo (with link)" entry (file "~/stuff/org/refile.org")
                 "* TODO %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n%a\n")
                ("j" "Journal" entry (file+datetree "~/stuff/org/diary.org")
                 "* %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n")
                ("u" "urgent todo" entry (file "~/stuff/org/refile.org")
                 "* TODO %? :urgent:\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n")
                ("n" "note" entry (file "~/stuff/org/refile.org")
                 "* %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n")
                ("z" "bugz" entry (file+headline "~/stuff/org/bugz.org" "incoming")
                 "* TODO %?\n:PROPERTIES:\n:OPEN: %U\n:LAST:%U\n:END:\n%a\n")
                ("i" "instadev" entry (file+headline "~/stuff/content/ideas.org" "instadev")
                 "* %c\n")
                ("s" "snipz")  
                ("sr" "snipz request" entry (file+headline "~/stuff/org/snipz.org" "incoming")
                 "* TODO %?\n:PROPERTIES:\n:OPEN: %U\n:LAST:%U\n:END:\n%a\n")
                ("sn" "snipz note" entry (file+headline "~/stuff/org/snipz.org" "incoming")
                 "* %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n%c\n")
                ("b" "binding" entry (file+headline "~/stuff/org/snipz.org" "bindings")
                 "* %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:")
                ("k" "kill ring")
                ("kb" "kill ring body" entry (file "~/stuff/org/refile.org")
                 "* %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n%c")
                ("kh" "kill ring head" entry (file "~/stuff/org/refile.org")
                 "* TODO %c\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n%?"))))
  
#+end_src

#+results:
| t  | todo (with link) | entry | (file ~/stuff/org/refile.org)                      | * TODO %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n%a\n      |
| j  | Journal          | entry | (file+datetree ~/stuff/org/diary.org)              | * %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n               |
| u  | urgent todo      | entry | (file ~/stuff/org/refile.org)                      | * TODO %? :urgent:\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n |
| n  | note             | entry | (file ~/stuff/org/refile.org)                      | * %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n               |
| z  | bugz             | entry | (file+headline ~/stuff/org/bugz.org incoming)      | * TODO %?\n:PROPERTIES:\n:OPEN: %U\n:LAST:%U\n:END:\n%a\n       |
| i  | instadev         | entry | (file+headline ~/stuff/content/ideas.org instadev) | * %c\n                                                          |
| s  | snipz            |       |                                                    |                                                                 |
| sr | snipz request    | entry | (file+headline ~/stuff/org/snipz.org incoming)     | * TODO %?\n:PROPERTIES:\n:OPEN: %U\n:LAST:%U\n:END:\n%a\n       |
| sn | snipz note       | entry | (file+headline ~/stuff/org/snipz.org incoming)     | * %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n%c\n           |
| b  | binding          | entry | (file+headline ~/stuff/org/snipz.org bindings)     | * %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:                 |
| k  | kill ring        |       |                                                    |                                                                 |
| kb | kill ring body   | entry | (file ~/stuff/org/refile.org)                      | * %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n%c             |
| kh | kill ring head   | entry | (file ~/stuff/org/refile.org)                      | * TODO %c\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n%?        |




*** Refiling
CLOSED: [2012-07-20 Fri 00:20]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2012-07-20 Fri 00:20]
- State "NEXT"       from "TODO"       [2012-07-20 Fri 00:20]
- State "TODO"       from ""           [2012-07-19 Thu 22:43]
:END:

#+begin_src emacs-lisp  
; Targets include this file and any file contributing to the agenda - up to 4 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 4)
                                 (org-agenda-files :maxlevel . 4))))
; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)
; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)
; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))
; every header is a refile target
(setq org-refile-target-verify-function nil)
; use IDO
(setq org-completion-use-ido t)

#+end_src

#+results:

*** Agenda view
:PROPERTIES:
		:Effort:   0.45
:OPEN: [2012-07-23 Mon 19:45]
:LAST:  [2012-07-23 Mon 20:24]
:CLOSE: [2012-07-23 Mon 20:24]
:ID: b6b3a794-7836-4259-8b9c-92ce0a35cd24
		:END:

Startup should take this table and create the org-agenda-files list.

#+TBLNAME: agenda-files-table
| stuff           | meta.org                    |                   |
| .emacs.d        | README.org                  |                   |
| stuff           | org                         | refile.org        |
| stuff           | org                         | bugz.org          |
| stuff           | org                         | snipz.org         |
| stuff           | org                         | org.org           |
| stuff           | emacs                       | emacs.org         |
| stuff           | sys                         | sys.org           |
| stuff           | biz                         | scarce.org        |
| stuff           | site                        | landing.org       |
| stuff           | site                        | scarcecapital.org |
| stuff           | content                     | life.org          |
| stuff           | content                     | writing.org       |
| stuff           | dev                         | webdev.org        |
| stuff           | emacs                       | bindings.org      |
| stuff           | sys                         | git.org           |
| stuff           | factor                      | factor.org        |
| stuff           | dev                         | jsdev.org         |
| stuff           | content                     | ideas.org         |
| git             | emfx_R                      | emfx.org          |
| git             | emfx_R                      | volatility.org    |
| git             | emfx_R                      | rdev.org          |
| git             | emfx_R                      | xkcd.org          |
| emfx            | README.org                  |                   |

- function to reset org-agenda-files based on the above table of directories
  and files
  #+begin_src emacs-lisp :var table=agenda-files-table
    (setq clean-table
          (delete nil  
                  (loop for line in table
                        collect 
                        (delete "" (delete-dups line)))))
    
    (setq org-agenda-files 
          (mapcar
           (lambda (x) 
             (concat "~/"
                     (mapconcat
                      'eval x "/")))
           clean-table))
  #+end_src

  #+results:
  | ~/stuff/meta.org | ~/.emacs.d/README.org | ~/stuff/org/refile.org | ~/stuff/org/bugz.org | ~/stuff/org/snipz.org | ~/stuff/org/org.org | ~/stuff/emacs/emacs.org | ~/stuff/sys/sys.org | ~/stuff/biz/scarce.org | ~/stuff/site/landing.org | ~/stuff/site/scarcecapital.org | ~/stuff/content/life.org | ~/stuff/content/writing.org | ~/stuff/dev/webdev.org | ~/stuff/emacs/bindings.org | ~/stuff/sys/git.org | ~/stuff/factor/factor.org | ~/stuff/dev/jsdev.org | ~/stuff/content/ideas.org | ~/git/emfx_R/emfx.org | ~/git/emfx_R/volatility.org | ~/git/emfx_R/rdev.org | ~/git/emfx_R/xkcd.org | ~/emfx/README.org |



- (Manual) Agenda Files (turned off)
  #+begin_src emacs-lisp :tangle no
    ;; the entire directory (hand edit this)
    (setq org-agenda-files (quote ("~/stuff/org/refile.org"
                                   "~/stuff/org/org.org"
                                   "~/stuff/org/bugz.org"
                                   "~/stuff/org/snipz.org"
                                   "~/stuff/biz/scarce.org"
                                   "~/stuff/meta.org"
                                   "~/stuff/content/life.org"
                                   "~/stuff/content/writing.org"
                                   "~/stuff/emacs/emacs.org"
                                   "~/stuff/emacs/bindings.org"
                                   "~/.emacs.d/tonyday.org"
                                   "~/.emacs.d/starter-kit-tonyday-org.org"
                                   "~/stuff/sys/sys.org"
                                   "~/stuff/sys/migrate.org"
                                   "~/stuff/site/scarcecapital.org"
                                   "~/stuff/dev/webdev.org"
                                   "~/stuff/sys/git.org"
                                   "~/stuff/factor/momentum/qic.org"
                                   "~/stuff/factor/emfx.org"
                                   "~/stuff/factor/factor.org"
                                   "~/emfx/emfx.org"
                                   "~/dotemacs-mashup/README.org"
                                   "~/stuff/dev/rdev.org"
                                   "~/stuff/dev/jsdev.org"
                                   "~/stuff/dev/webdev.org"
                                   "~/stuff/content/quant.org"
                                   "~/stuff/content/ideas.org")))
    
  #+end_src

  #+results:
  | ~/stuff/org/refile.org | ~/stuff/org/org.org | ~/stuff/org/bugz.org | ~/stuff/org/snipz.org | ~/stuff/biz/scarce.org | ~/stuff/meta.org | ~/stuff/content/life.org | ~/stuff/content/writing.org | ~/stuff/emacs/emacs.org | ~/stuff/emacs/bindings.org | ~/.emacs.d/tonyday.org | ~/.emacs.d/starter-kit-tonyday-org.org | ~/stuff/sys/sys.org | ~/stuff/sys/migrate.org | ~/stuff/site/scarcecapital.org | ~/stuff/dev/webdev.org | ~/stuff/sys/git.org | ~/stuff/factor/momentum/qic.org | ~/stuff/factor/emfx.org | ~/stuff/factor/factor.org | ~/emfx/emfx.org | ~/dotemacs-mashup/README.org | ~/stuff/dev/rdev.org | ~/stuff/dev/jsdev.org | ~/stuff/dev/webdev.org | ~/stuff/content/quant.org | ~/stuff/content/ideas.org |

- disable =C-c [=
  I adopt the same system as =norang=.  It becomes difficult to
  remember what's on and not on the agenda
 #+begin_src emacs-lisp
   ;; Disable C-c [ and C-c ] in org-mode
   (add-hook 'org-mode-hook
             (lambda ()
               ;; Undefine C-c [ and C-c ] since this breaks my
               ;; org-agenda files when directories are include It
               ;; expands the files in the directories individually
               (org-defkey org-mode-map "\C-c["    'undefined)
               (org-defkey org-mode-map "\C-c]"    'undefined))
             'append)
  #+end_src




Standard settings
#+begin_src emacs-lisp 
  ;; Compact the block agenda view
  (setq org-agenda-compact-blocks t)
  
  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)
  (setq org-agenda-span 'day)
  (setq org-stuck-projects (quote ("" nil nil "")))

#+end_src

#+results:
|   | nil | nil |   |

- Custom agenda
  This custom view is lidted straight from =norang=.  I have no idea
  how it does what it does, nor what it actually does, but it works
  for me.
  #+begin_src emacs-lisp :tangle yes
    ;; Custom agenda command definitions
    (setq org-agenda-custom-commands
          (quote (("N" "Notes" tags "NOTE"
                   ((org-agenda-overriding-header "Notes")
                    (org-tags-match-list-sublevels t)))
                  ("h" "Habits" tags-todo "STYLE=\"habit\""
                   ((org-agenda-overriding-header "Habits")
                    (org-agenda-sorting-strategy
                     '(todo-state-down effort-up category-keep))))
                  (" " "Agenda"
                   ((agenda "" nil)
                    (tags "REFILE"
                          ((org-agenda-overriding-header "Tasks to Refile")
                           (org-tags-match-list-sublevels nil)))
                    (tags-todo "-CANCELLED/!"
                               ((org-agenda-overriding-header "Stuck Projects")
                                (org-agenda-skip-function 'bh/skip-non-stuck-projects)))
                    (tags-todo "-WAITING-CANCELLED/!NEXT"
                               ((org-agenda-overriding-header "Next Tasks")
                                (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                                (org-agenda-todo-ignore-scheduled t)
                                (org-agenda-todo-ignore-deadlines t)
                                (org-tags-match-list-sublevels t)
                                (org-agenda-sorting-strategy
                                 '(todo-state-down effort-up category-keep))))
                    (tags-todo "-REFILE-CANCELLED/!-HOLD-WAITING"
                               ((org-agenda-overriding-header "Tasks")
                                (org-agenda-skip-function 'bh/skip-project-tasks-maybe)
                                (org-agenda-todo-ignore-scheduled t)
                                (org-agenda-todo-ignore-deadlines t)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-CANCELLED/!"
                               ((org-agenda-overriding-header "Projects")
                                (org-agenda-skip-function 'bh/skip-non-projects)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-CANCELLED/!WAITING|HOLD"
                               ((org-agenda-overriding-header "Waiting and Postponed Tasks")
                                (org-tags-match-list-sublevels nil)
                                (org-agenda-todo-ignore-scheduled 'future)
                                (org-agenda-todo-ignore-deadlines 'future)))
                    (tags "-REFILE/"
                          ((org-agenda-overriding-header "Tasks to Archive")
                           (org-agenda-skip-function 'bh/skip-non-archivable-tasks))))
                   nil)
                  ("r" "Tasks to Refile" tags "REFILE"
                   ((org-agenda-overriding-header "Tasks to Refile")
                    (org-tags-match-list-sublevels nil)))
                  ("#" "Stuck Projects" tags-todo "-CANCELLED/!"
                   ((org-agenda-overriding-header "Stuck Projects")
                    (org-agenda-skip-function 'bh/skip-non-stuck-projects)))
                  ("n" "Next Tasks" tags-todo "-WAITING-CANCELLED/!NEXT"
                   ((org-agenda-overriding-header "Next Tasks")
                    (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                    (org-agenda-todo-ignore-scheduled t)
                    (org-agenda-todo-ignore-deadlines t)
                    (org-tags-match-list-sublevels t)
                    (org-agenda-sorting-strategy
                     '(todo-state-down effort-up category-keep))))
                  ("R" "Tasks" tags-todo "-REFILE-CANCELLED/!-HOLD-WAITING"
                   ((org-agenda-overriding-header "Tasks")
                    (org-agenda-skip-function 'bh/skip-project-tasks-maybe)
                    (org-agenda-sorting-strategy
                     '(category-keep))))
                  ("p" "Projects" tags-todo "-CANCELLED/!"
                   ((org-agenda-overriding-header "Projects")
                    (org-agenda-skip-function 'bh/skip-non-projects)
                    (org-agenda-sorting-strategy
                     '(category-keep))))
                  ("w" "Waiting Tasks" tags-todo "-CANCELLED/!WAITING|HOLD"
                   ((org-agenda-overriding-header "Waiting and Postponed tasks"))
                   (org-tags-match-list-sublevels nil))
                  ("A" "Tasks to Archive" tags "-REFILE/"
                   ((org-agenda-overriding-header "Tasks to Archive")
                    (org-agenda-skip-function 'bh/skip-non-archivable-tasks))))))
  #+end_src

  #+results:
  | N | Notes            | tags| NOTE                                                                                                                                                                                                                                                                                                                                          | ((org-agenda-overriding-header Notes) (org-tags-match-list-sublevels t))                                                                                                                                                                                                                                                |                                                              |                                     |
  | h | Habits           | tags-todo| STYLE="habit"                                                                                                                                                                                                                                                                                                                                 | ((org-agenda-overriding-header Habits) (org-agenda-sorting-strategy (quote (todo-state-down effort-up category-keep))))                                                                                                                                                                                                 |                                                              |                                     |
  |   | Agenda           | ((agenda  nil) (tags REFILE ((org-agenda-overriding-header Tasks to Refile) (org-tags-match-list-sublevels nil))) (tags-todo -CANCELLED/! ((org-agenda-overriding-header Stuck Projects) (org-agenda-skip-function (quote bh/skip-non-stuck-projects)))) (tags-todo -WAITING-CANCELLED/!NEXT ((org-agenda-overriding-header Next Tasks) (org-agenda-skip-function (quote bh/skip-projects-and-habits-and-single-tasks)) (org-agenda-todo-ignore-scheduled t) (org-agenda-todo-ignore-deadlines t) (org-tags-match-list-sublevels t) (org-agenda-sorting-strategy (quote (todo-state-down effort-up category-keep))))) (tags-todo -REFILE-CANCELLED/!-HOLD-WAITING ((org-agenda-overriding-header Tasks) (org-agenda-skip-function (quote bh/skip-project-tasks-maybe)) (org-agenda-todo-ignore-scheduled t) (org-agenda-todo-ignore-deadlines t) (org-agenda-sorting-strategy (quote (category-keep))))) (tags-todo -CANCELLED/! ((org-agenda-overriding-header Projects) (org-agenda-skip-function (quote bh/skip-non-projects)) (org-agenda-sorting-strategy (quote (category-keep))))) (tags-todo -CANCELLED/!WAITING | HOLD ((org-agenda-overriding-header Waiting and Postponed Tasks) (org-tags-match-list-sublevels nil) (org-agenda-todo-ignore-scheduled (quote future)) (org-agenda-todo-ignore-deadlines (quote future)))) (tags -REFILE/ ((org-agenda-overriding-header Tasks to Archive) (org-agenda-skip-function (quote bh/skip-non-archivable-tasks))))) | nil                                                                                                                                                                                                                                                                                                                     |                                                              |                                     |
  | r | Tasks to Refile  | tags| REFILE                                                                                                                                                                                                                                                                                                                                        | ((org-agenda-overriding-header Tasks to Refile) (org-tags-match-list-sublevels nil))                                                                                                                                                                                                                                    |                                                              |                                     |
  | # | Stuck Projects   | tags-todo| -CANCELLED/!                                                                                                                                                                                                                                                                                                                                  | ((org-agenda-overriding-header Stuck Projects) (org-agenda-skip-function (quote bh/skip-non-stuck-projects)))                                                                                                                                                                                                           |                                                              |                                     |
  | n | Next Tasks       | tags-todo| -WAITING-CANCELLED/!NEXT                                                                                                                                                                                                                                                                                                                      | ((org-agenda-overriding-header Next Tasks) (org-agenda-skip-function (quote bh/skip-projects-and-habits-and-single-tasks)) (org-agenda-todo-ignore-scheduled t) (org-agenda-todo-ignore-deadlines t) (org-tags-match-list-sublevels t) (org-agenda-sorting-strategy (quote (todo-state-down effort-up category-keep)))) |                                                              |                                     |
  | R | Tasks            | tags-todo| -REFILE-CANCELLED/!-HOLD-WAITING                                                                                                                                                                                                                                                                                                              | ((org-agenda-overriding-header Tasks) (org-agenda-skip-function (quote bh/skip-project-tasks-maybe)) (org-agenda-sorting-strategy (quote (category-keep))))                                                                                                                                                             |                                                              |                                     |
  | p | Projects         | tags-todo| -CANCELLED/!                                                                                                                                                                                                                                                                                                                                  | ((org-agenda-overriding-header Projects) (org-agenda-skip-function (quote bh/skip-non-projects)) (org-agenda-sorting-strategy (quote (category-keep))))                                                                                                                                                                 |                                                              |                                     |
  | w | Waiting Tasks    | tags-todo                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | -CANCELLED/!WAITING                                                                                                                                                                                                                                                                                                                           | HOLD                                                                                                                                                                                                                                                                                                                    | ((org-agenda-overriding-header Waiting and Postponed tasks)) | (org-tags-match-list-sublevels nil) |
  | A | Tasks to Archive | tags| -REFILE/                                                                                                                                                                                                                                                                                                                                      | ((org-agenda-overriding-header Tasks to Archive) (org-agenda-skip-function (quote bh/skip-non-archivable-tasks)))                                                                                                                                                                                                       |                                                              |                                     |




*** Agenda Keys
:PROPERTIES:
:OPEN: [2012-07-23 Mon 20:41]
:LAST: NEXT [2012-08-01 Wed 15:08]
:END:

Most of these agenda commands are from =norang=.  The defuns are
defined [[file:starter-kit-zyg-defuns-org.org::*%3Dnorang%3D%20defuns][here]].

#+begin_src emacs-lisp 
(add-hook 'org-agenda-mode-hook
          (lambda ()
            (define-key org-agenda-mode-map "q" 'bury-buffer))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "F" 'bh/restrict-to-file-or-follow))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "W" 'bh/widen))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "N" 'bh/narrow-to-subtree))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "P" 'bh/narrow-to-project))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "U" 'bh/narrow-up-one-level))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "\C-c\C-x<" 'bh/set-agenda-restriction-lock))
          'append)
#+end_src

#+results:
| lambda | nil | (define-key org-agenda-mode-map q (quote bury-buffer))                        |
| lambda | nil | (org-defkey org-agenda-mode-map F (quote bh/restrict-to-file-or-follow))      |
| lambda | nil | (org-defkey org-agenda-mode-map W (quote bh/widen))                           |
| lambda | nil | (org-defkey org-agenda-mode-map N (quote bh/narrow-to-subtree))               |
| lambda | nil | (org-defkey org-agenda-mode-map P (quote bh/narrow-to-project))               |
| lambda | nil | (org-defkey org-agenda-mode-map U (quote bh/narrow-up-one-level))             |
| lambda | nil | (org-defkey org-agenda-mode-map < (quote bh/set-agenda-restriction-lock)) |
| lambda | nil | (hl-line-mode 1)                                                              |

*** Agenda Settings - Miscellaneous
:PROPERTIES:
:OPEN: [2012-08-01 Wed 13:57]
:CLOSE: [2012-08-01 Wed 13:57]
:LAST:  [2012-08-01 Wed 13:57]
:END:

These follow the =norang= suggestions  
#+begin_src emacs-lisp 
;; Always hilight the current agenda line
(add-hook 'org-agenda-mode-hook
          '(lambda () (hl-line-mode 1))
          'append)

;; Keep tasks with dates on the global todo lists
(setq org-agenda-todo-ignore-with-date nil)

;; Keep tasks with deadlines on the global todo lists
(setq org-agenda-todo-ignore-deadlines nil)

;; Keep tasks with scheduled dates on the global todo lists
(setq org-agenda-todo-ignore-scheduled nil)

;; Keep tasks with timestamps on the global todo lists
(setq org-agenda-todo-ignore-timestamp nil)

;; Remove completed deadline tasks from the agenda view
(setq org-agenda-skip-deadline-if-done t)

;; Remove completed scheduled tasks from the agenda view
(setq org-agenda-skip-scheduled-if-done t)

;; Remove completed items from search results
(setq org-agenda-skip-timestamp-if-done t)

(setq org-agenda-include-diary nil)
(setq org-agenda-diary-file (expand-file-name "~/org/diary.org"))

(setq org-agenda-insert-diary-extract-time t)

;; Include agenda archive files when searching for things
(setq org-agenda-text-search-extra-files (quote (agenda-archives)))

;; Show all future entries for repeating tasks
(setq org-agenda-repeating-timestamp-show-all t)

;; Show all agenda dates - even if they are empty
(setq org-agenda-show-all-dates t)

;; Start the weekly agenda on Monday
(setq org-agenda-start-on-weekday 1)

;; Enable display of the time grid so we can see the marker for the current time
(setq org-agenda-time-grid (quote ((daily today remove-match)
                                   #("----------------" 0 16 (org-heading t))
                                   (830 1000 1200 1300 1500 1700))))

;; Display tags farther right
(setq org-agenda-tags-column -102)

;; Keep filters in place
(setq org-agenda-persistent-filter t)




#+end_src

#+results:
: t




*** Agenda sort from =norang=

Defuns are defined [[file:starter-kit-zyg-defuns-org.org::*%3Dnorang%3D%20defuns][here]]. 
#+begin_src emacs-lisp
  
  ;; Sorting order for tasks on the agenda
  (setq org-agenda-sorting-strategy
        (quote ((agenda habit-down time-up user-defined-up priority-down effort-up category-keep)
                (todo category-up priority-down effort-up)
                (tags category-up priority-down effort-up)
                (search category-up))))
  ;;
  ;; Agenda sorting functions
  ;;
  (setq org-agenda-cmp-user-defined 'bh/agenda-sort)
#+end_src

#+results:
: bh/agenda-sort

*** Tags

#+begin_src emacs-lisp 

; Tags with fast selection keys
(setq org-tag-alist (quote (("urgent" . ?u)
                            ("bill" . ?b)
                            ("scarce" . ?s)
                            ("crypt" . ?c)
                            ("emacs" . ?e))))
                            
; Allow setting single tags without the menu
(setq org-fast-tag-selection-single-key (quote expert))

; For tag searches ignore tasks with scheduled and deadline dates
(setq org-agenda-tags-todo-honor-ignore-options nil)

#+end_src

#+results:

*** Archiving
:LOGBOOK:
- State "DONE"       from "NEXT"       [2012-07-19 Thu 23:19]
- State "NEXT"       from "TODO"       [2012-07-19 Thu 23:19]
- State "TODO"       from ""           [2012-07-19 Thu 23:19]
:END:

Anything with a =DONE= todo tag is a valid archiving candidate.
Though more often than not I'm going to set a section heading back to
=""= once I'm done.

#+begin_src emacs-lisp 
(setq org-archive-mark-done nil)
(setq org-archive-location "%s_archive::* Archived Tasks")
#+end_src

#+results:
: %s_archive::* Archived Tasks

*** Code Blocks
:PROPERTIES:
:OPEN: [2012-07-23 Mon 19:52]
:LAST: TODO [2012-07-23 Mon 19:52]
:END:

- lowercase results
  #+begin_src emacs-lisp 
  (setq org-babel-results-keyword "results")
  #+end_src

  #+results:
  : results

- languages used
  #+begin_src emacs-lisp 
    (org-babel-do-load-languages
       (quote org-babel-load-languages)
       (quote ((emacs-lisp . t)
               (sh . t)
               (gnuplot . t)
               (org . t)
               (octave . t)
               (js . t)
               (R . t))))
  #+end_src

  #+results:
  | (emacs-lisp . t) | (sh . t) | (gnuplot . t) | (org . t) | (octave . t) |

- Don't cache me
  #+begin_src emacs-lisp 
    (setq org-babel-default-header-args
    (cons '(:cache . "no")
    (assq-delete-all :cache org-babel-default-header-args)))
  #+end_src

  #+results:
  | (:cache . no) | (:session . *Inferior Octave*) | (:results . value) | (:results . replace) | (:exports . code) | (:noweb . no) | (:hlines . no) | (:tangle . no) | (:padnewline . yes) |

- Don't prompt me
  #+begin_src emacs-lisp 
  (setq org-confirm-babel-evaluate nil)
  #+end_src

  #+results:

- do not re-evaluate on export
  #+begin_src emacs-lisp 
  (setq org-export-babel-evaluate nil)
  #+end_src

  #+results:

- Use the current window for C-c ' source editing
  #+begin_src emacs-lisp 
  (setq org-src-window-setup 'current-window)
  #+end_src

  #+results:
  : current-window

- Always look your best
  #+begin_src emacs-lisp 
  (setq org-src-fontify-natively t)
  #+end_src

  #+results:
  : t

- I wish I'd known about this before.
  #+begin_src emacs-lisp 
  (setq org-src-tab-acts-natively t)
  #+end_src

  #+results:
  : t

  

*** Setting to get Octave Working
:PROPERTIES:
:ID: b142296d-b21d-4f4b-a462-3404ff6b4c57
:END:

- Results are value (needed for octave)
  #+begin_src emacs-lisp 
  (setq org-babel-default-header-args
       (cons '(:results . "value") org-babel-default-header-args)) 
  #+end_src

  #+results:
  | (:results . value) | (:cache . no) | (:session . *Inferior Octave*) | (:results . value) | (:results . replace) | (:exports . code) | (:noweb . no) | (:hlines . no) | (:tangle . no) | (:padnewline . yes) |

- [ ] inline images break my windows emacs 
  #+begin_src emacs-lisp 
  (setq org-startup-with-inline-images nil)
  #+end_src

  #+results:

- Single session for Octave
  - [ ] breaks other languages of course as it's a global variable
  - turning this off
  #+begin_src emacs-lisp :tangle no
  ; Run octave in the same session.  Without this set, octave opens
  ; and closes on every evaluation.
  (setq org-babel-default-header-args
         (cons '(:session . "*Inferior Octave*")
         (assq-delete-all :session org-babel-default-header-args)))
  #+end_src

  #+results:
  | (:session . *Inferior Octave*) | (:results . value) | (:cache . no) | (:results . value) | (:results . replace) | (:exports . code) | (:noweb . no) | (:hlines . no) | (:tangle . no) | (:padnewline . yes) |

- tangle octave files with a .m suffix
  #+begin_src emacs-lisp 
  (add-to-list 'org-babel-tangle-lang-exts '("octave" . "m"))
  #+end_src

  #+results:
  | (octave . m) | (emacs-lisp . el) |

- sub-scripts might mess with octave
  #+begin_src emacs-lisp 
  (setq org-use-sub-superscripts nil)
  #+end_src

  #+results:


*** Export settings
:LOGBOOK:
		 - State "DONE"       from "TODO"       [2012-05-29 Tue 09:10]
		 :END:
:PROPERTIES:
:Effort: 5:00
:ID: 85ec9756-18b2-4240-a021-7cfa8e6f718b
:END:

HTML exported using org looks so clean and stylish.

- no post-amble thanks
  #+begin_src emacs-lisp 
  (setq org-export-html-postamble nil)
  #+end_src

  #+results:

  
- Inline images in HTML instead of producting links to the image
  #+begin_src emacs-lisp 
  (setq org-export-html-inline-images t)
  #+end_src

  #+results:
  : t

- Using an external style file
  #+begin_src emacs-lisp 
    (setq org-export-html-style "<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>")
    (setq org-export-html-style-include-default nil)
  #+end_src

  #+results:

- Do not generate internal css formatting for HTML exports
  - [ ] try this out M-x org-export-htmlize-generate-css
  #+begin_src emacs-lisp 
  (setq org-export-htmlize-output-type (quote css))
  #+end_src

  #+results:
  : css

- Export with LaTeX fragments
  - [ ] dollar dollar bug
  #+begin_src emacs-lisp 
  (setq org-export-with-LaTeX-fragments t)
  #+end_src

  #+results:
  : t

- html decl
  #+begin_src emacs-lisp 
  (setq org-export-html-xml-declaration (quote (("html" . "")
                                                ("was-html" . "<?xml version=\"1.0\" encoding=\"%s\"?>")
                                                ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>"))))
  #+end_src

  #+results:
  | (html . ) | (was-html . <?xml version="1.0" encoding="%s"?>) | (php . <?php echo "<?xml version=\"1.0\" encoding=\"%s\" ?>"; ?>) |

- allow BIND to do its thing
  #+begin_src emacs-lisp 
  (setq org-export-allow-BIND t)
  #+end_src

  #+results:
  : t

- timestamps outside drawers are evil.
  #+begin_src emacs-lisp 
  (setq org-export-with-timestamps nil)
  #+end_src

  #+results:


*** Publishing
:PROPERTIES:
:OPEN: [2012-07-23 Mon 20:14]
:LAST:     [2012-10-11 Thu 13:31]
:CLOSE:    [2012-10-11 Thu 13:31]
:END:

This is still in test mode.

#+begin_src emacs-lisp 
  ;tmp - http://www.scarcecapital.com/qic
  (setq org-publish-project-alist
        ; mom-org are the org-files that generate the content
        ; mom-extra are images and css files that need to be included
        ; mom is the top-level project that gets published
        (quote (("mom-report-org"
                 :base-directory "~/projects/qic/momentum/draft"
                 :publishing-directory "~/pub/report"
                 ; :publishing-directory "/ssh:www-data@www:~/www.scarcecapital.com/tmp"
                 :recursive t
                 :section-numbers nil
                 :table-of-contents nil
                 :base-extension "org"
                 :publishing-function (org-publish-org-to-html org-publish-org-to-org)
                 :style "<link rel=\"stylesheet\" href=\"scarce.css\" type=\"text/css\" />"
                 :plain-source t
                 :htmlized-source t
                 :style-include-default nil
                 :auto-sitemap t
                 :sitemap-filename "index.html"
                 :sitemap-title "Momentum Report"
                 :sitemap-style "tree"
                 :author-info t
                 :creator-info t)
                ("mom-report-extra"
                 :base-directory "~/projects/qic/momentum/draft"
                 :publishing-directory "~/pub/report"
                 :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
                 :publishing-function org-publish-attachment
                 :recursive t
                 :author nil)
                ("mom-report"
                 :components ("mom-report-org" "mom-report-extra"))
                ; tmp for quick testing
                ("tmp-org"
                 :base-directory "~/tmp/publish"
                 :publishing-directory "~/pub/tmp"
                 ; :publishing-directory "/ssh:www-data@www:~/www.scarcecapital.com/tmp"
                 :recursive t
                 :section-numbers nil
                 :table-of-contents nil
                 :base-extension "org"
                 :publishing-function (org-publish-org-to-html org-publish-org-to-org)
                 ;:style "<link rel=\"stylesheet\" href=\"http://scarcecapital.com/tmp/org.css\" type=\"text/css\" />"
                 ; I assume you can then just put the stylesheet in the directory (tmp) and all is cool
                 :style "<link rel=\"stylesheet\" href=\"org.css\" type=\"text/css\" />"
                 :plain-source t
                 :htmlized-source t
                 :style-include-default nil
                 :auto-sitemap t
                 :sitemap-filename "index.html"
                 :sitemap-title "Test Publishing Environment"
                 :sitemap-style "tree"
                 :author-info t
                 :creator-info t)
                ("tmp-extra"
                 :base-directory "~/tmp/publish/"
                 :publishing-directory "~/pub/tmp"
                 :base-extension "css\\|pdf\\|png\\|jpg\\|gif\\|el"
                 :publishing-function org-publish-attachment
                 :recursive t
                 :author nil)
                ("tmp"
                 :components ("tmp-org" "tmp-extra"))
                ; mom-dev is a testing version
                ("mom-dev-org"
                 :base-directory "~/projects/momentum/dev"
                 :publishing-directory "~/pub/dev"
                 ; :publishing-directory "/ssh:www-data@www:~/www.scarcecapital.com/tmp"
                 :recursive t
                 :section-numbers nil
                 :table-of-contents nil
                 :base-extension "org"
                 :publishing-function (org-publish-org-to-html org-publish-org-to-org)
                 :style "<link rel=\"stylesheet\" href=\"http://scarcecapital.com/tmp/org.css\" type=\"text/css\" />"
                 :plain-source t
                 :htmlized-source t
                 :style-include-default nil
                 :auto-sitemap t
                 :sitemap-filename "index.html"
                 :sitemap-title "Momemtum Development"
                 :sitemap-style "tree"
                 :author-info t
                 :creator-info t)
                ("mom-dev-extra"
                 :base-directory "~/projects/momentum/dev"
                 :publishing-directory "~/pub/dev"
                 :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
                 :publishing-function org-publish-attachment
                 :recursive t
                 :author nil)
                ("mom-dev"
                 :components ("mom-dev-org" "mom-dev-extra")))))

#+end_src

#+results:
| mom-report-org   | :base-directory | ~/projects/qic/momentum/draft     | :publishing-directory | ~/pub/report | :recursive      | t    | :section-numbers | nil  | :table-of-contents | nil  | :base-extension      | org                    | :publishing-function   | (org-publish-org-to-html org-publish-org-to-org) | :style  | <link rel="stylesheet" href="scarce.css" type="text/css" />                           | :plain-source | t | :htmlized-source | t | :style-include-default | nil | :auto-sitemap | t | :sitemap-filename | index.html | :sitemap-title | Momentum Report             | :sitemap-style | tree | :author-info | t | :creator-info | t |
| mom-report-extra | :base-directory | ~/projects/qic/momentum/draft     | :publishing-directory | ~/pub/report | :base-extension | css\ | pdf\             | png\ | jpg\               | gif  | :publishing-function | org-publish-attachment | :recursive             | t                                                | :author | nil                                                                                   |               |   |                  |   |                        |     |               |   |                   |            |                |                             |                |      |              |   |               |   |
| mom-report       | :components     | (mom-report-org mom-report-extra) |                       |              |                 |      |                  |      |                    |      |                      |                        |                        |                                                  |         |                                                                                       |               |   |                  |   |                        |     |               |   |                   |            |                |                             |                |      |              |   |               |   |
| tmp-org          | :base-directory | ~/tmp/publish                     | :publishing-directory | ~/pub/tmp    | :recursive      | t    | :section-numbers | nil  | :table-of-contents | nil  | :base-extension      | org                    | :publishing-function   | (org-publish-org-to-html org-publish-org-to-org) | :style  | <link rel="stylesheet" href="org.css" type="text/css" />                              | :plain-source | t | :htmlized-source | t | :style-include-default | nil | :auto-sitemap | t | :sitemap-filename | index.html | :sitemap-title | Test Publishing Environment | :sitemap-style | tree | :author-info | t | :creator-info | t |
| tmp-extra        | :base-directory | ~/tmp/publish/                    | :publishing-directory | ~/pub/tmp    | :base-extension | css\ | pdf\             | png\ | jpg\               | gif\ | el                   | :publishing-function   | org-publish-attachment | :recursive                                       | t       | :author                                                                               | nil           |   |                  |   |                        |     |               |   |                   |            |                |                             |                |      |              |   |               |   |
| tmp              | :components     | (tmp-org tmp-extra)               |                       |              |                 |      |                  |      |                    |      |                      |                        |                        |                                                  |         |                                                                                       |               |   |                  |   |                        |     |               |   |                   |            |                |                             |                |      |              |   |               |   |
| mom-dev-org      | :base-directory | ~/projects/momentum/dev           | :publishing-directory | ~/pub/dev    | :recursive      | t    | :section-numbers | nil  | :table-of-contents | nil  | :base-extension      | org                    | :publishing-function   | (org-publish-org-to-html org-publish-org-to-org) | :style  | <link rel="stylesheet" href="http://scarcecapital.com/tmp/org.css" type="text/css" /> | :plain-source | t | :htmlized-source | t | :style-include-default | nil | :auto-sitemap | t | :sitemap-filename | index.html | :sitemap-title | Momemtum Development        | :sitemap-style | tree | :author-info | t | :creator-info | t |
| mom-dev-extra    | :base-directory | ~/projects/momentum/dev           | :publishing-directory | ~/pub/dev    | :base-extension | css\ | pdf\             | png\ | jpg\               | gif  | :publishing-function | org-publish-attachment | :recursive             | t                                                | :author | nil                                                                                   |               |   |                  |   |                        |     |               |   |                   |            |                |                             |                |      |              |   |               |   |
| mom-dev          | :components     | (mom-dev-org mom-dev-extra)       |                       |              |                 |      |                  |      |                    |      |                      |                        |                        |                                                  |         |                                                                                       |               |   |                  |   |                        |     |               |   |                   |            |                |                             |                |      |              |   |               |   |


*** Visuals

Various visual stylistic choices 
#+begin_src emacs-lisp 
  (setq org-hide-leading-stars nil)
  (setq org-startup-indented t)
  (setq org-cycle-separator-lines 0)
  (setq org-blank-before-new-entry (quote ((heading)
                                           (plain-list-item . auto))))

  (setq org-emphasis-alist (quote (("*" bold "<b>" "</b>")
                                   ("/" italic "<i>" "</i>")
                                   ("_" underline "<span style=\"text-decoration:underline;\">" "</span>")
                                   ("=" org-code "<code>" "</code>" verbatim)
                                   ("~" org-verbatim "<code>" "</code>" verbatim))))
  
#+end_src

#+results:
| * | bold         | <b>                                       | </b>    |          |
| / | italic       | <i>                                       | </i>    |          |
| _ | underline    | <span style="text-decoration:underline;"> | </span> |          |
| = | org-code     | <code>                                    | </code> | verbatim |
| ~ | org-verbatim | <code>                                    | </code> | verbatim |

*** Action Modification

Various stylistic choices 
#+begin_src emacs-lisp 
(setq org-return-follows-link t)
#+end_src

#+results:
: t


*** Special Key

#+begin_src emacs-lisp :tangle yes
  (setq org-special-ctrl-a/e 'reversed)
  (setq org-special-ctrl-k t)
  (setq org-yank-adjusted-subtrees t)
#+end_src

#+results:
: t

 
*** Speed keys
:PROPERTIES:
:CUSTOM_ID: speed-keys
:END:
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the =org-speed-commands-default= variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to `=org-babel-describe-bindings=') will
display a list of the code blocks commands and their related keys.

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
(setq org-speed-commands-user (quote (("0" . ignore)
                                        ("1" . ignore)
                                        ("2" . ignore)
                                        ("3" . ignore)
                                        ("4" . ignore)
                                        ("5" . ignore)
                                        ("6" . ignore)
                                        ("7" . ignore)
                                        ("8" . ignore)
                                        ("9" . ignore)
  
                                        ("a" . ignore)
                                        ("d" . ignore)
                                        ("h" . bh/hide-other)
                                        ("i" progn
                                         (forward-char 1)
                                         (call-interactively 'org-insert-heading-respect-content))
                                        ("k" . org-kill-note-or-show-branches)
                                        ("l" . ignore)
                                        ("m" . ignore)
                                        ("q" . bh/show-org-agenda)
                                        ("r" . ignore)
                                        ("s" . org-save-all-org-buffers)
                                        ("w" . org-refile)
                                        ("x" . ignore)
                                        ("y" . ignore)
                                        ("z" . org-add-note)
  
                                        ("A" . ignore)
                                        ("B" . ignore)
                                        ("E" . ignore)
                                        ("F" . bh/restrict-to-file-or-follow)
                                        ("G" . ignore)
                                        ("H" . ignore)
                                        ("J" . org-clock-goto)
                                        ("K" . ignore)
                                        ("L" . ignore)
                                        ("M" . ignore)
                                        ("N" . bh/narrow-to-subtree)
                                        ("P" . bh/narrow-to-project)
                                        ("Q" . ignore)
                                        ("R" . ignore)
                                        ("S" . ignore)
                                        ("T" . bh/org-todo)
                                        ("U" . bh/narrow-up-one-level)
                                        ("V" . ignore)
                                        ("W" . bh/widen)
                                        ("X" . ignore)
                                        ("Y" . ignore)
                                        ("Z" . ignore))))


#+end_src

#+results:
: t


*** Auto Save and Revert

#+begin_src emacs-lisp
(run-at-time "00:59" 3600 'org-save-all-org-buffers)
(global-auto-revert-mode t)
#+end_src

#+results:
: t

*** org2blog
:LOGBOOK:
CLOCK: [2012-08-20 Mon 18:29]--[2012-08-20 Mon 18:29] =>  0:00
:END:
:PROPERTIES:
:OPEN: [2012-08-19 Sun 11:51]
:LAST:  [2012-09-09 Sun 12:30]
:CLOSE: [2012-09-09 Sun 12:30]
:END:

#+begin_src emacs-lisp
(require 'org2blog-autoloads)
#+end_src

#+results:
: org2blog-autoloads

#+begin_src emacs-lisp
  (setq org2blog/wp-blog-alist
       '(("scarce"
          :url "http://scarcecapital.com/wordpress/xmlrpc.php"
          :username "Tony Day")
         ("dev"
          :url "http://127.0.0.1:4001/wpdev/xmlrpc.php"
          :username "Tony Day"
          :default-title "test title (production)"
          :default-categories ("quant" "org" "emacs")
          :tags-as-categories nil)))
#+end_src

#+results:
| scarce | :url | http://scarcecapital.com/wordpress/xmlrpc.php | :username | Tony Day |                |                         |                     |                   |                     |     |
| dev    | :url | http://127.0.0.1:4001/wpdev/xmlrpc.php        | :username | Tony Day | :default-title | test title (production) | :default-categories | (quant org emacs) | :tags-as-categories | nil |





*** clipboard

#+begin_src emacs-lisp
  (setq org-cycle-global-at-bob t)
#+end_src

#+begin_src emacs-lisp :tangle no
(message "%s" "features")
(message "%s" features)
(message "%s" (locate-library "org-compat"))
  (load "org-compat")
  (require 'org-jsinfo)
#+end_src

#+results:
: org-compat

#+begin_src emacs-lisp :tangle no
  ; Enable habit tracking (and a bunch of other modules)
  (setq org-modules (quote (org-bbdb
                            org-bibtex
                            org-crypt
                            org-gnus
                            org-id
                            org-info
                            org-habit
                            org-inlinetask
                            org-irc
                            org-mew
                            org-mhe
                            org-protocol
                            org-rmail
                            org-vm
                            org-wl
                            org-w3m)))
  
  ; position the habit graph on the agenda to the right of the default
  (setq org-habit-graph-column 50)
  (require 'org-habit)
  
#+end_src

#+results:
: 50




#+begin_src emacs-lisp :tangle no
  (require 'org-jsinfo)

(require 'org-compat)

(library-path "org-compat")

(load "org-compat.elc")

  (locate-library "org-compat")

(load "org-compat")

#+end_src
*** MobileOrg hack

#+begin_src emacs-lisp
  (setq org-mobile-force-id-on-agenda-items nil)
  (setq org-directory "~")
(require 'org-habit)
#+end_src

*** org defuns
**** TODO Insert the last stored link
:PROPERTIES:
:OPEN: [2012-07-23 Mon 20:53]
:LAST: TODO [2012-07-23 Mon 20:53]
:ID:       56629caf-21e0-42c2-a6ac-69d78ff00993
:END:

- saving a button press
- [ ] broken
#+begin_src emacs-lisp
(defun org-insert-last-link()
  (interactive)
  (insert (concat "[[" 
        (plist-get org-store-link-plist :link)
        "]["
        (plist-get org-store-link-plist :description)
        "]]")))
#+end_src

#+results:
: org-insert-last-link


**** Get Timestamp as String
Return a timestamp string for use in my logging process.
#+begin_src emacs-lisp 
(defun org-string-timestamp (time &optional with-hm inactive pre post extra)
  "return a string for the date given by the internal TIME.
WITH-HM means use the stamp format that includes the time of the day.
INACTIVE means use square brackets instead of angular ones, so that the
stamp will not contribute to the agenda.
PRE and POST are optional strings to be inserted before and after the
stamp.
The command returns the time stamp as a string.
This is the same as org-insert-time-stamp without the insert.
"
  (let ((fmt (funcall (if with-hm 'cdr 'car) org-time-stamp-formats))
          stamp)
      (if inactive (setq fmt (concat "[" (substring fmt 1 -1) "]")))
      (when (listp extra)
        (setq extra (car extra))
        (if (and (stringp extra)
                 (string-match "\\([0-9]+\\):\\([0-9]+\\)" extra))
            (setq extra (format "-%02d:%02d"
                                (string-to-number (match-string 1 extra))
                                (string-to-number (match-string 2 extra))))
          (setq extra nil)))
      (when extra
        (setq fmt (concat (substring fmt 0 -1) extra (substring fmt -1))))
      (setq stamp (format-time-string fmt time))
      ))
#+end_src

#+results:
: org-string-timestamp

**** Log State Change
#+begin_src emacs-lisp 
  (defun zyg/log-state-change ()
    "logs timestamps in PROPERTIES for any todo-tag state change (LASTTOUCH),
      first state change (OPENED), and when last entered a done state
      (CLOSE).
  "
    (interactive)
    (save-excursion 
      (let* ((has-opened (org-entry-get nil "OPEN"))
             (stamp (org-string-timestamp nil t t nil nil nil)))
        (if (not has-opened)
            (org-set-property "OPEN" stamp))
        (if (or (equal org-state nil)
                (equal org-state "DONE"))
            (org-set-property "CLOSE" stamp))
        (if (or (equal org-state "TODO")
                (equal org-state "NEXT"))
            (org-entry-delete nil "CLOSE"))
        (org-set-property "LAST" (concatenate 'string org-state " " stamp)))))
#+end_src

#+results:
: zyg/log-state-change


**** =norang= general defuns
:PROPERTIES:
:OPEN: [2012-07-23 Mon 20:50]
:LAST:  [2012-08-01 Wed 13:54]
:CLOSE: [2012-08-01 Wed 13:54]
:END:


#+begin_src emacs-lisp 
(defun bh/show-org-agenda ()
    (interactive)
    (switch-to-buffer "*Org Agenda*")
    (delete-other-windows))

(defun bh/hide-other ()
  (interactive)
  (save-excursion
    (org-back-to-heading 'invisible-ok)
    (hide-other)
    (org-cycle)
    (org-cycle)
    (org-cycle)))

(defun bh/set-truncate-lines ()
  "Toggle value of truncate-lines and refresh window display."
  (interactive)
  (setq truncate-lines (not truncate-lines))
  ;; now refresh window display (an idiom from simple.el):
  (save-excursion
    (set-window-start (selected-window)
                      (window-start (selected-window)))))

(defun bh/org-todo (arg)
  (interactive "p")
  (if (equal arg 4)
      (save-restriction
        (widen)
        (org-narrow-to-subtree)
        (org-show-todo-tree nil))
    (widen)
    (org-narrow-to-subtree)
    (org-show-todo-tree nil)))

(defun bh/widen ()
  (interactive)
  (widen)
  (org-agenda-remove-restriction-lock))

(defun bh/restrict-to-file-or-follow (arg)
  "Set agenda restriction to 'file or with argument invoke follow mode.
I don't use follow mode very often but I restrict to file all the time
so change the default 'F' binding in the agenda to allow both"
  (interactive "p")
  (if (equal arg 4)
      (org-agenda-follow-mode)
    (if (equal major-mode 'org-agenda-mode)
        (bh/set-agenda-restriction-lock 4)
      (widen))))

(defun bh/narrow-to-org-subtree ()
  (widen)
  (org-narrow-to-subtree)
  (save-restriction
    (org-agenda-set-restriction-lock)))

(defun bh/narrow-to-subtree ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (org-with-point-at (org-get-at-bol 'org-hd-marker)
        (bh/narrow-to-org-subtree))
    (bh/narrow-to-org-subtree)))

(defun bh/narrow-up-one-org-level ()
  (widen)
  (save-excursion
    (outline-up-heading 1 'invisible-ok)
    (bh/narrow-to-org-subtree)))

(defun bh/narrow-up-one-level ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (org-with-point-at (org-get-at-bol 'org-hd-marker)
        (bh/narrow-up-one-org-level))
    (bh/narrow-up-one-org-level)))

(defun bh/narrow-to-org-project ()
  (widen)
  (save-excursion
    (bh/find-project-task)
    (bh/narrow-to-org-subtree)))

(defun bh/narrow-to-project ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (org-with-point-at (org-get-at-bol 'org-hd-marker)
        (bh/narrow-to-org-project))
    (bh/narrow-to-org-project)))

(defun bh/set-agenda-restriction-lock (arg)
  "Set restriction lock to current task subtree or file if prefix is specified"
  (interactive "p")
  (let* ((pom (or (org-get-at-bol 'org-hd-marker)
                  org-agenda-restrict-begin))
         (tags (org-with-point-at pom (org-get-tags-at))))
    (let ((restriction-type (if (equal arg 4) 'file 'subtree)))
      (save-restriction
        (cond
         ((equal major-mode 'org-agenda-mode)
          (org-with-point-at pom
            (org-agenda-set-restriction-lock restriction-type)))
         ((and (equal major-mode 'org-mode) (org-before-first-heading-p))
          (org-agenda-set-restriction-lock 'file))
         (t
          (org-with-point-at pom
            (org-agenda-set-restriction-lock restriction-type))))))))

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/show-org-agenda ()
    (interactive)
    (switch-to-buffer "*Org Agenda*")
    (delete-other-windows))




#+end_src

#+results:
: bh/show-org-agenda


**** =norang= agenda helper defuns

#+begin_src emacs-lisp 
    (defun bh/is-project-p ()
      "Any task with a todo keyword subtask"
      (save-restriction
        (widen)
        (let ((has-subtask)
              (subtree-end (save-excursion (org-end-of-subtree t)))
              (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task has-subtask))))
    
    (defun bh/is-project-subtree-p ()
      "Any task with a todo keyword that is in a project subtree.
    Callers of this function already widen the buffer view."
      (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                  (point))))
        (save-excursion
          (bh/find-project-task)
          (if (equal (point) task)
              nil
            t))))
    
    (defun bh/is-task-p ()
      "Any task with a todo keyword and no subtask"
      (save-restriction
        (widen)
        (let ((has-subtask)
              (subtree-end (save-excursion (org-end-of-subtree t)))
              (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task (not has-subtask)))))
    
    (defun bh/is-subproject-p ()
      "Any task which is a subtask of another project"
      (let ((is-subproject)
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (while (and (not is-subproject) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq is-subproject t))))
        (and is-a-task is-subproject)))
    
    (defun bh/list-sublevels-for-projects-indented ()
      "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
      This is normally used by skipping functions where this variable is already local to the agenda."
      (if (marker-buffer org-agenda-restrict-begin)
          (setq org-tags-match-list-sublevels 'indented)
        (setq org-tags-match-list-sublevels nil))
      nil)
    
    (defun bh/list-sublevels-for-projects ()
      "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
      This is normally used by skipping functions where this variable is already local to the agenda."
      (if (marker-buffer org-agenda-restrict-begin)
          (setq org-tags-match-list-sublevels t)
        (setq org-tags-match-list-sublevels nil))
      nil)
    
    (defun bh/skip-non-stuck-projects ()
      "Skip trees that are not stuck projects"
      (bh/list-sublevels-for-projects-indented)
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (if (bh/is-project-p)
              (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                     (has-next (save-excursion
                                 (forward-line 1)
                                 (and (< (point) subtree-end)
                                      (re-search-forward "^\\*+ \\(NEXT\\) " subtree-end t)))))
                (if has-next
                    next-headline
                  nil)) ; a stuck project, has subtasks but no next task
            next-headline))))
    
    (defun bh/skip-non-projects ()
      "Skip trees that are not projects"
      (bh/list-sublevels-for-projects-indented)
      (if (save-excursion (bh/skip-non-stuck-projects))
          (save-restriction
            (widen)
            (let ((subtree-end (save-excursion (org-end-of-subtree t))))
              (if (bh/is-project-p)
                  nil
                subtree-end)))
        (org-end-of-subtree t)))
    
    (defun bh/skip-project-trees-and-habits ()
      "Skip trees that are projects"
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           (t
            nil)))))
    
    (defun bh/skip-projects-and-habits-and-single-tasks ()
      "Skip trees that are projects, tasks that are habits, single non-project tasks"
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (cond
           ((org-is-habit-p)
            next-headline)
           ((bh/is-project-p)
            next-headline)
           ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
            next-headline)
           (t
            nil)))))
    
    (defun bh/skip-project-tasks-maybe ()
      "Show tasks related to the current restriction.
    When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
    When not restricted, skip project and sub-project tasks, habits, and project related tasks."
      (save-restriction
        (widen)
        (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
               (next-headline (save-excursion (or (outline-next-heading) (point-max))))
               (limit-to-project (marker-buffer org-agenda-restrict-begin)))
          (cond
           ((bh/is-project-p)
            next-headline)
           ((org-is-habit-p)
            subtree-end)
           ((and (not limit-to-project)
                 (bh/is-project-subtree-p))
            subtree-end)
           ((and limit-to-project
                 (bh/is-project-subtree-p)
                 (member (org-get-todo-state) (list "NEXT")))
            subtree-end)
           (t
            nil)))))
    
    (defun bh/skip-projects-and-habits ()
      "Skip trees that are projects and tasks that are habits"
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           (t
            nil)))))
    
    (defun bh/skip-non-subprojects ()
      "Skip trees that are not projects"
      (let ((next-headline (save-excursion (outline-next-heading))))
        (if (bh/is-subproject-p)
            nil
          next-headline)))
    
  (defun bh/skip-non-archivable-tasks ()
      "Skip trees that are not available for archiving"
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          ;; Consider only tasks with done todo headings as archivable candidates
          (if (member (org-get-todo-state) org-done-keywords)
              (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                     (daynr (string-to-int (format-time-string "%d" (current-time))))
                     (a-month-ago (* 60 60 24 (+ daynr 1)))
                     (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                     (this-month (format-time-string "%Y-%m-" (current-time)))
                     (subtree-is-current (save-excursion
                                           (forward-line 1)
                                           (and (< (point) subtree-end)
                                                (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                (if subtree-is-current
                    next-headline ; Has a date in this month or last month, skip it
                  nil))  ; available to archive
            (or next-headline (point-max))))))
  
#+end_src

#+results:
: bh/skip-non-archivable-tasks





**** =norang= agenda sort

#+begin_src emacs-lisp
  (defun bh/agenda-sort (a b)
    "Sorting strategy for agenda items.
  Late deadlines first, then scheduled, then non-late deadlines"
    (let (result num-a num-b)
      (cond
       ; time specific items are already sorted first by org-agenda-sorting-strategy
  
       ; non-deadline and non-scheduled items next
       ((bh/agenda-sort-test 'bh/is-not-scheduled-or-deadline a b))
  
       ; deadlines for today next
       ((bh/agenda-sort-test 'bh/is-due-deadline a b))
  
       ; late deadlines next
       ((bh/agenda-sort-test-num 'bh/is-late-deadline '< a b))
  
       ; scheduled items for today next
       ((bh/agenda-sort-test 'bh/is-scheduled-today a b))
  
       ; late scheduled items next
       ((bh/agenda-sort-test-num 'bh/is-scheduled-late '> a b))
  
       ; pending deadlines last
       ((bh/agenda-sort-test-num 'bh/is-pending-deadline '< a b))
  
       ; finally default to unsorted
       (t (setq result nil)))
      result))
  
  (defmacro bh/agenda-sort-test (fn a b)
    "Test for agenda sort"
    `(cond
      ; if both match leave them unsorted
      ((and (apply ,fn (list ,a))
            (apply ,fn (list ,b)))
       (setq result nil))
      ; if a matches put a first
      ((apply ,fn (list ,a))
       (setq result -1))
      ; otherwise if b matches put b first
      ((apply ,fn (list ,b))
       (setq result 1))
      ; if none match leave them unsorted
      (t nil)))
  
  (defmacro bh/agenda-sort-test-num (fn compfn a b)
    `(cond
      ((apply ,fn (list ,a))
       (setq num-a (string-to-number (match-string 1 ,a)))
       (if (apply ,fn (list ,b))
           (progn
             (setq num-b (string-to-number (match-string 1 ,b)))
             (setq result (if (apply ,compfn (list num-a num-b))
                              -1
                            1)))
         (setq result -1)))
      ((apply ,fn (list ,b))
       (setq result 1))
      (t nil)))
  
  (defun bh/is-not-scheduled-or-deadline (date-str)
    (and (not (bh/is-deadline date-str))
         (not (bh/is-scheduled date-str))))
  
  (defun bh/is-due-deadline (date-str)
    (string-match "Deadline:" date-str))
  
  (defun bh/is-late-deadline (date-str)
    (string-match "In *\\(-.*\\)d\.:" date-str))
  
  (defun bh/is-pending-deadline (date-str)
    (string-match "In \\([^-]*\\)d\.:" date-str))
  
  (defun bh/is-deadline (date-str)
    (or (bh/is-due-deadline date-str)
        (bh/is-late-deadline date-str)
        (bh/is-pending-deadline date-str)))
  
  (defun bh/is-scheduled (date-str)
    (or (bh/is-scheduled-today date-str)
        (bh/is-scheduled-late date-str)))
  
  (defun bh/is-scheduled-today (date-str)
    (string-match "Scheduled:" date-str))
  
  (defun bh/is-scheduled-late (date-str)
    (string-match "Sched\.\\(.*\\)x:" date-str))
#+end_src

#+results:
: bh/is-scheduled-late









*** org-clock
:PROPERTIES:
:OPEN: [2012-10-13 Sat 13:15]
:LAST: [2012-10-13 Sat 13:15]
:END:
#+begin_src emacs-lisp
  (require 'org-clock)
  (require 'org-colview)

#+end_src


** octave
#+begin_src emacs-lisp 
  (autoload 'octave-mode "octave-mod" nil t)
  (setq auto-mode-alist
     (cons '("\\.m$" . octave-mode) auto-mode-alist))
  (add-hook 'octave-mode-hook
                      (lambda ()
                        (abbrev-mode 1)
                        (auto-fill-mode 1)
                        (if (eq window-system 'x)
                            (font-lock-mode 1))))

  ;; if you have the win32 version of octave
  (add-hook 'inferior-octave-mode-hook
             '(lambda ()
                 (setq inferior-octave-program
                     "octave")))
  
  ;; run an inferior Octave process in a special Emacs buffer
  (autoload 'run-octave "octave-inf" nil t)
#+end_src





** magit

#+begin_src emacs-lisp
;;;_ , magit

(use-package magit
 :bind ("C-x g" . magit-status)
 :config
 (progn
 (setenv "GIT_PAGER" "")

 (add-hook 'magit-log-edit-mode-hook
 #'(lambda ()
 (set-fill-column 72)
 (flyspell-mode)))

 (require 'magit-topgit)
 (require 'rebase-mode)

 (defun start-git-monitor ()
 (interactive)
 (start-process "git-monitor" (current-buffer) "~/bin/git-monitor"))

 ;;(add-hook 'magit-status-mode-hook 'start-git-monitor)
 ))

#+end_src

#+results:
:t

#+begin_src emacs-lisp
 (setq magit-repo-dirs '("~/.emacs.d" 
 "~/stuff"))
#+end_src

#+results:
| ~/.emacs.d | ~/stuff |






** ess
#+begin_src emacs-lisp
  (setq-default inferior-R-program-name "R")
  (require 'ess-site)
#+end_src


** Keybindings
#+begin_src emacs-lisp
;;;_. Keybindings

;; Main keymaps for personal bindings are:
;;
;;   C-x <letter>  primary map (has many defaults too)
;;   C-c <letter>  secondary map (not just for mode-specific)
;;   C-. <letter>  tertiary map
;;
;;   M-g <letter>  goto map
;;   M-s <letter>  search map
;;   M-o <letter>  markup map (even if only temporarily)
;;
;;   C-<capital letter>
;;   M-<capital letter>
;;
;;   A-<anything>
;;   M-A-<anything>
;;
;; Single-letter bindings still available:
;;   C- ,'";:?<>|!#$%^&*`~ <tab>
;;   M- ?#

#+end_src
*** global-map
#+begin_src emacs-lisp
;;;_ , global-map

#+end_src
**** C-?
#+begin_src emacs-lisp
;;;_  . C-?

(defvar ctl-period-map)
(define-prefix-command 'ctl-period-map)
(bind-key "C-." 'ctl-period-map)

(bind-key* "<C-return>" 'other-window)

(defun collapse-or-expand ()
  (interactive)
  (if (> (length (window-list)) 1)
      (delete-other-windows)
    (bury-buffer)))

(bind-key "C-z" 'collapse-or-expand)

#+end_src
**** M-?
#+begin_src emacs-lisp
;;;_  . M-?

(defadvice async-shell-command (before uniqify-running-shell-command activate)
  (let ((buf (get-buffer "*Async Shell Command*")))
    (if buf
        (let ((proc (get-buffer-process buf)))
          (if (and proc (eq 'run (process-status proc)))
              (with-current-buffer buf
                (rename-uniquely)))))))

(bind-key "M-!" 'async-shell-command)
(bind-key "M-/" 'dabbrev-expand)
(bind-key "M-'" 'insert-pair)
(bind-key "M-\"" 'insert-pair)

(defun align-code (beg end &optional arg)
  (interactive "rP")
  (if (null arg)
      (align beg end)
    (let ((end-mark (copy-marker end)))
      (indent-region beg end-mark nil)
      (align beg end-mark))))

(bind-key "M-[" 'align-code)
(bind-key "M-`" 'other-frame)

(bind-key "M-j" 'delete-indentation-forward)
(bind-key "M-J" 'delete-indentation)

(bind-key "M-W" 'mark-word)

(defun mark-line (&optional arg)
  (interactive "p")
  (beginning-of-line)
  (let ((here (point)))
    (dotimes (i arg)
      (end-of-line))
    (set-mark (point))
    (goto-char here)))

(bind-key "M-L" 'mark-line)

(defun mark-sentence (&optional arg)
  (interactive "P")
  (backward-sentence)
  (mark-end-of-sentence arg))

(bind-key "M-S" 'mark-sentence)
(bind-key "M-X" 'mark-sexp)
(bind-key "M-H" 'mark-paragraph)
(bind-key "M-D" 'mark-defun)

(bind-key "M-g c" 'goto-char)
(bind-key "M-g l" 'goto-line)

(defun delete-indentation-forward ()
  (interactive)
  (delete-indentation t))

(bind-key "M-s n" 'find-name-dired)
(bind-key "M-s o" 'occur)

(bind-key "A-M-w" 'copy-code-as-rtf)

#+end_src
**** M-C-?
#+begin_src emacs-lisp
;;;_  . M-C-?

(bind-key "<C-M-backspace>" 'backward-kill-sexp)

(defun isearch-backward-other-window ()
  (interactive)
  (split-window-vertically)
  (call-interactively 'isearch-backward))

(bind-key "C-M-r" 'isearch-backward-other-window)

(defun isearch-forward-other-window ()
  (interactive)
  (split-window-vertically)
  (call-interactively 'isearch-forward))

(bind-key "C-M-s" 'isearch-forward-other-window)

;; Some further isearch bindings
(bind-key "C-c" 'isearch-toggle-case-fold isearch-mode-map)
(bind-key "C-t" 'isearch-toggle-regexp isearch-mode-map)
(bind-key "C-^" 'isearch-edit-string isearch-mode-map)
(bind-key "C-i" 'isearch-complete isearch-mode-map)

#+end_src
**** A-?
#+begin_src emacs-lisp
;;;_  . A-?

(define-key key-translation-map (kbd "A-TAB") (kbd "C-TAB"))

#+end_src
*** ctl-x-map
#+begin_src emacs-lisp
;;;_ , ctl-x-map

#+end_src
**** C-x ?
#+begin_src emacs-lisp
;;;_  . C-x ?

(bind-key "C-x B" 'ido-switch-buffer-other-window)
(bind-key "C-x d" 'delete-whitespace-rectangle)
(bind-key "C-x F" 'set-fill-column)
(bind-key "C-x t" 'toggle-truncate-lines)

#+end_src
**** C-x C-?
#+begin_src emacs-lisp
;;;_  . C-x C-?

(defun duplicate-line ()
  "Duplicate the line containing point."
  (interactive)
  (save-excursion
    (let (line-text)
      (goto-char (line-beginning-position))
      (let ((beg (point)))
        (goto-char (line-end-position))
        (setq line-text (buffer-substring beg (point))))
      (if (eobp)
          (insert ?\n)
        (forward-line))
      (open-line 1)
      (insert line-text))))

(bind-key "C-x C-d" 'duplicate-line)
(bind-key "C-x C-e" 'pp-eval-last-sexp)
(bind-key "C-x C-n" 'next-line)


(defun find-alternate-file-with-sudo (filename)
  (interactive
   (list (read-file-name "Find alternate file: " nil
                         nil nil (concat "/sudo::" (buffer-file-name)))))
  (find-alternate-file filename))

(bind-key "C-x C-v" 'find-alternate-file-with-sudo)

#+end_src
**** C-x M-?
#+begin_src emacs-lisp
;;;_  . C-x M-?

(bind-key "C-x M-n" 'set-goal-column)

(defun refill-paragraph (arg)
  (interactive "*P")
  (let ((fun (if (memq major-mode '(c-mode c++-mode))
                 'c-fill-paragraph
               (or fill-paragraph-function
                   'fill-paragraph)))
        (width (if (numberp arg) arg))
        prefix beg end)
    (forward-paragraph 1)
    (setq end (copy-marker (- (point) 2)))
    (forward-line -1)
    (let ((b (point)))
      (skip-chars-forward "^A-Za-z0-9`'\"(")
      (setq prefix (buffer-substring-no-properties b (point))))
    (backward-paragraph 1)
    (if (eolp)
        (forward-char))
    (setq beg (point-marker))
    (delete-horizontal-space)
    (while (< (point) end)
      (delete-indentation 1)
      (end-of-line))
    (let ((fill-column (or width fill-column))
          (fill-prefix prefix))
      (if prefix
          (setq fill-column
                (- fill-column (* 2 (length prefix)))))
      (funcall fun nil)
      (goto-char beg)
      (insert prefix)
      (funcall fun nil))
    (goto-char (+ end 2))))

(bind-key "C-x M-q" 'refill-paragraph)

#+end_src
*** mode-specific-map
#+begin_src emacs-lisp
;;;_ , mode-specific-map

#+end_src
**** C-c ?
#+begin_src emacs-lisp
;;;_  . C-c ?

(bind-key "C-c <tab>" 'ff-find-other-file)
(bind-key "C-c SPC" 'just-one-space)

;; inspired by Erik Naggum's `recursive-edit-with-single-window'
(defmacro recursive-edit-preserving-window-config (body)
  "*Return a command that enters a recursive edit after executing BODY.
 Upon exiting the recursive edit (with\\[exit-recursive-edit] (exit)
 or \\[abort-recursive-edit] (abort)), restore window configuration
 in current frame."
  `(lambda ()
     "See the documentation for `recursive-edit-preserving-window-config'."
     (interactive)
     (save-window-excursion
       ,body
       (recursive-edit))))

(bind-key "C-c 0"
  (recursive-edit-preserving-window-config (delete-window)))
(bind-key "C-c 1"
  (recursive-edit-preserving-window-config
   (if (one-window-p 'ignore-minibuffer)
       (error "Current window is the only window in its frame")
     (delete-other-windows))))

(defun delete-current-line (&optional arg)
  (interactive "p")
  (let ((here (point)))
    (beginning-of-line)
    (kill-line arg)
    (goto-char here)))

(bind-key "C-c d" 'delete-current-line)

(bind-key "C-c e E" 'elint-current-buffer)

(defun do-eval-buffer ()
  (interactive)
  (call-interactively 'eval-buffer)
  (message "Buffer has been evaluated"))

(bind-key "C-c e b" 'do-eval-buffer)
(bind-key "C-c e c" 'cancel-debug-on-entry)
(bind-key "C-c e d" 'debug-on-entry)
(bind-key "C-c e e" 'toggle-debug-on-error)
(bind-key "C-c e f" 'emacs-lisp-byte-compile-and-load)
(bind-key "C-c e j" 'emacs-lisp-mode)
(bind-key "C-c e l" 'find-library)
(bind-key "C-c e r" 'eval-region)
(bind-key "C-c e s" 'scratch)
(bind-key "C-c e v" 'edit-variable)

(defun find-which (name)
  (interactive "sCommand name: ")
  (find-file-other-window
   (substring (shell-command-to-string (format "which %s" name)) 0 -1)))

(bind-key "C-c e w" 'find-which)
(bind-key "C-c e z" 'byte-recompile-directory)

(bind-key "C-c f" 'flush-lines)
(bind-key "C-c g" 'goto-line)

(bind-key "C-c k" 'keep-lines)

(eval-when-compile
  (defvar emacs-min-top)
  (defvar emacs-min-left)
  (defvar emacs-min-height)
  (defvar emacs-min-width))

(unless noninteractive
  (if running-alternate-emacs
      (progn
        (defvar emacs-min-top (if (= 1050 (x-display-pixel-height)) 574 722))
        (defvar emacs-min-left 5)
        (defvar emacs-min-height 25)
        (defvar emacs-min-width 80))

    (defvar emacs-min-top 22)
    (defvar emacs-min-left (- (x-display-pixel-width) 918))
    (defvar emacs-min-height (if (= 1050 (x-display-pixel-height)) 55 64))
    (defvar emacs-min-width 100)))

(defun emacs-min ()
  (interactive)
  (set-frame-parameter (selected-frame) 'fullscreen nil)
  (set-frame-parameter (selected-frame) 'vertical-scroll-bars nil)
  (set-frame-parameter (selected-frame) 'horizontal-scroll-bars nil)
  (set-frame-parameter (selected-frame) 'top emacs-min-top)
  (set-frame-parameter (selected-frame) 'left emacs-min-left)
  (set-frame-parameter (selected-frame) 'height emacs-min-height)
  (set-frame-parameter (selected-frame) 'width emacs-min-width)

  (when running-alternate-emacs
    (set-background-color "grey85")
    (set-face-background 'fringe "gray80")))

(if window-system
    (add-hook 'after-init-hook 'emacs-min))

(defun emacs-max ()
  (interactive)
  (if t
      (progn
        (set-frame-parameter (selected-frame) 'fullscreen 'fullboth)
        (set-frame-parameter (selected-frame) 'vertical-scroll-bars nil)
        (set-frame-parameter (selected-frame) 'horizontal-scroll-bars nil))
    (set-frame-parameter (selected-frame) 'top 26)
    (set-frame-parameter (selected-frame) 'left 2)
    (set-frame-parameter (selected-frame) 'width
                         (floor (/ (float (x-display-pixel-width)) 9.15)))
    (if (= 1050 (x-display-pixel-height))
        (set-frame-parameter (selected-frame) 'height
                             (if (>= emacs-major-version 24)
                                 66
                               55))
      (set-frame-parameter (selected-frame) 'height
                           (if (>= emacs-major-version 24)
                               75
                             64)))))

(defun emacs-toggle-size ()
  (interactive)
  (if (> (cdr (assq 'width (frame-parameters))) 100)
      (emacs-min)
    (emacs-max)))

(bind-key "C-c m" 'emacs-toggle-size)

(defun insert-date ()
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))

(defcustom user-initials nil
  "*Initials of this user."
  :set
  #'(lambda (symbol value)
      (if (fboundp 'font-lock-add-keywords)
          (mapc
           #'(lambda (mode)
               (font-lock-add-keywords
                mode (list (list (concat "\\<\\(" value " [^:\n]+\\):")
                                 1 font-lock-warning-face t))))
           '(c-mode c++-mode emacs-lisp-mode lisp-mode
                    python-mode perl-mode java-mode groovy-mode
                    haskell-mode literate-haskell-mode)))
      (set symbol value))
  :type 'string
  :group 'mail)

(defun insert-user-timestamp ()
  "Insert a quick timestamp using the value of `user-initials'."
  (interactive)
  (insert (format "%s (%s): " user-initials
                  (format-time-string "%Y-%m-%d" (current-time)))))

(bind-key "C-c n" 'insert-user-timestamp)
(bind-key "C-c o" 'customize-option)
(bind-key "C-c O" 'customize-group)

(bind-key "C-c q" 'fill-region)
(bind-key "C-c r" 'replace-regexp)
(bind-key "C-c s" 'replace-string)
(bind-key "C-c u" 'rename-uniquely)

(autoload 'auth-source-search "auth-source")

(defun tinify-url (url)
  (interactive "sURL to shorten: ")
  (let* ((api-login "jwiegley")
         (api-key
          (funcall
           (plist-get
            (car (auth-source-search :host "api.j.mp" :user api-login
                                     :type 'netrc :port 80))
            :secret))))
    (flet ((message (&rest ignore)))
      (with-current-buffer
          (let ((query
                 (format "format=txt&longUrl=%s&login=%s&apiKey=%s"
                         (url-hexify-string url) api-login api-key)))
            (url-retrieve-synchronously
             (concat "http://api.j.mp/v3/shorten?" query)))
        (goto-char (point-min))
        (re-search-forward "^$")
        (prog1
            (kill-new (buffer-substring (1+ (point)) (1- (point-max))))
          (kill-buffer (current-buffer)))))))

(bind-key "C-c U" 'tinify-url)
(bind-key "C-c v" 'ffap)

(defun view-clipboard ()
  (interactive)
  (delete-other-windows)
  (switch-to-buffer "*Clipboard*")
  (let ((inhibit-read-only t))
    (erase-buffer)
    (clipboard-yank)
    (goto-char (point-min))
    (html-mode)
    (view-mode)))

(bind-key "C-c V" 'view-clipboard)
(bind-key "C-c z" 'clean-buffer-list)

(bind-key "C-c [" 'align-regexp)
(bind-key "C-c =" 'count-matches)
(bind-key "C-c ;" 'comment-or-uncomment-region)

#+end_src
**** C-c C-?
#+begin_src emacs-lisp
;;;_  . C-c C-?

(defun delete-to-end-of-buffer ()
  (interactive)
  (kill-region (point) (point-max)))

(bind-key "C-c C-z" 'delete-to-end-of-buffer)

#+end_src
**** C-c M-?
#+begin_src emacs-lisp
;;;_  . C-c M-?

(defun unfill-paragraph (arg)
  (interactive "*p")
  (let (beg end)
    (forward-paragraph arg)
    (setq end (copy-marker (- (point) 2)))
    (backward-paragraph arg)
    (if (eolp)
        (forward-char))
    (setq beg (point-marker))
    (when (> (count-lines beg end) 1)
      (while (< (point) end)
        (goto-char (line-end-position))
        (let ((sent-end (memq (char-before) '(?. ?\; ?! ??))))
          (delete-indentation 1)
          (if sent-end
              (insert ? )))
        (end-of-line))
      (save-excursion
        (goto-char beg)
        (while (re-search-forward "[^.;!?:]\\([ \t][ \t]+\\)" end t)
          (replace-match " " nil nil nil 1))))))

(bind-key "C-c M-q" 'unfill-paragraph)

(defun unfill-region (beg end)
  (interactive "r")
  (setq end (copy-marker end))
  (save-excursion
    (goto-char beg)
    (while (< (point) end)
      (unfill-paragraph 1)
      (forward-paragraph))))

#+end_src
*** ctl-period-map
#+begin_src emacs-lisp
;;;_ , ctl-period-map

#+end_src
**** C-. ?
#+begin_src emacs-lisp
;;;_  . C-. ?

(bind-key "C-. m" 'kmacro-keymap)

#+end_src
**** C-. C-i
#+begin_src emacs-lisp
;;;_  . C-. C-i

(bind-key "C-. C-i" 'indent-rigidly)

#+end_src
*** help-map
#+begin_src emacs-lisp
;;;_ , help-map

(defvar lisp-find-map)
(define-prefix-command 'lisp-find-map)

(bind-key "C-h e" 'lisp-find-map)

#+end_src
**** C-h e ?
#+begin_src emacs-lisp
;;;_  . C-h e ?

(bind-key "C-h e c" 'finder-commentary)
(bind-key "C-h e e" 'view-echo-area-messages)
(bind-key "C-h e f" 'find-function)
(bind-key "C-h e F" 'find-face-definition)

(defun my-describe-symbol  (symbol &optional mode)
  (interactive
   (info-lookup-interactive-arguments 'symbol current-prefix-arg))
  (let (info-buf find-buf desc-buf cust-buf)
    (save-window-excursion
      (ignore-errors
        (info-lookup-symbol symbol mode)
        (setq info-buf (get-buffer "*info*")))
      (let ((sym (intern-soft symbol)))
        (when sym
          (if (functionp sym)
              (progn
                (find-function sym)
                (setq find-buf (current-buffer))
                (describe-function sym)
                (setq desc-buf (get-buffer "*Help*")))
            (find-variable sym)
            (setq find-buf (current-buffer))
            (describe-variable sym)
            (setq desc-buf (get-buffer "*Help*"))
            ;;(customize-variable sym)
            ;;(setq cust-buf (current-buffer))
            ))))

    (delete-other-windows)

    (flet ((switch-in-other-buffer
            (buf)
            (when buf
              (split-window-vertically)
              (switch-to-buffer-other-window buf))))
      (switch-to-buffer find-buf)
      (switch-in-other-buffer desc-buf)
      (switch-in-other-buffer info-buf)
      ;;(switch-in-other-buffer cust-buf)
      (balance-windows))))

(bind-key "C-h e d" 'my-describe-symbol)
(bind-key "C-h e i" 'info-apropos)
(bind-key "C-h e k" 'find-function-on-key)
(bind-key "C-h e l" 'find-library)

(defvar lisp-modes  '(emacs-lisp-mode
                      inferior-emacs-lisp-mode
                      ielm-mode
                      lisp-mode
                      inferior-lisp-mode
                      lisp-interaction-mode
                      slime-repl-mode))

(defvar lisp-mode-hooks
  (mapcar (function
           (lambda (mode)
             (intern
              (concat (symbol-name mode) "-hook"))))
          lisp-modes))

(defun scratch ()
  (interactive)
  (let ((current-mode major-mode))
    (switch-to-buffer-other-window (get-buffer-create "*scratch*"))
    (goto-char (point-min))
    (when (looking-at ";")
      (forward-line 4)
      (delete-region (point-min) (point)))
    (goto-char (point-max))
    (if (memq current-mode lisp-modes)
        (funcall current-mode))))

(bind-key "C-h e s" 'scratch)
(bind-key "C-h e v" 'find-variable)
(bind-key "C-h e V" 'apropos-value)

#+end_src
** jw packages
:PROPERTIES:
:tangle:   no
:END:
#+begin_src emacs-lisp
;;;_. Packages

#+end_src
*** el-get
#+begin_src emacs-lisp
;;;_ , el-get

(use-package el-get
  :disabled t
  :commands (el-get
             el-get-install
             el-get-update
             el-get-list-packages)
  :init
  (defvar el-get-sources nil)

  :config
  (defun el-get-read-status-file ()
    (mapcar #'(lambda (entry)
                (cons (plist-get entry :symbol)
                      `(status "installed" recipe ,entry)))
            el-get-sources))

  (defalias 'el-get-init 'ignore
    "Don't use el-get for making packages available for use."))

#+end_src
*** cc-mode
#+begin_src emacs-lisp
;;;_ , cc-mode

(use-package cc-mode
  :mode (("\\.h\\(h?\\|xx\\|pp\\)\\'" . c++-mode)
         ("\\.m\\'"                   . c-mode)
         ("\\.mm\\'"                  . c++-mode))
  :init
  (progn
    (defun llvm-info ()
      (interactive)
      (w3m-find-file "/usr/local/stow/clang-3.1/docs/llvm/html/doxygen/classllvm_1_1IRBuilder.html"))

    (defun my-paste-as-check ()
      (interactive)
      (save-excursion
        (insert "/*\n")
        (let ((beg (point)) end)
          (yank)
          (setq end (point-marker))
          (goto-char beg)
          (while (< (point) end)
            (forward-char 2)
            (insert "CHECK: ")
            (forward-line 1)))
        (insert "*/\n")))

    (defun my-c-indent-or-complete ()
      (interactive)
      (let ((class (syntax-class (syntax-after (1- (point))))))
        (if (or (bolp) (and (/= 2 class)
                            (/= 3 class)))
            (call-interactively 'indent-according-to-mode)
          (if t
              (call-interactively 'auto-complete)
            (call-interactively 'company-complete-common)))))

    (defvar printf-index 0)

    (defun insert-counting-printf (arg)
      (interactive "P")
      (if arg
          (setq printf-index 0))
      (if t
          (insert (format "std::cerr << \"step %d..\" << std::endl;\n"
                          (setq printf-index (1+ printf-index))))
        (insert (format "printf(\"step %d..\\n\");\n"
                        (setq printf-index (1+ printf-index)))))
      (forward-line -1)
      (indent-according-to-mode)
      (forward-line))

    (defun my-c-mode-common-hook ()
      (abbrev-mode 1)
      (gtags-mode 1)
      (hs-minor-mode 1)
      (hide-ifdef-mode 1)
      (whitespace-mode 1)
      (which-function-mode 1)
      (auto-complete-mode 1)
      (yas/minor-mode 1)

      (diminish 'gtags-mode)
      (diminish 'hs-minor-mode)
      (diminish 'hide-ifdef-mode)

      (bind-key "C-c p" 'insert-counting-printf c-mode-base-map)

      (if t
          (progn
            (auto-complete-mode 1)
            (setq ac-sources (list (if (featurep 'semantic)
                                       'ac-source-semantic
                                     'ac-source-gtags)))
            (bind-key "<A-tab>" 'ac-complete c-mode-base-map))
        (company-mode 1)
        (bind-key "<A-tab>" 'company-complete-common c-mode-base-map))

      ;;(doxymacs-mode 1)
      ;;(doxymacs-font-lock)

      (bind-key "<return>" 'newline-and-indent c-mode-base-map)

      (set (make-local-variable 'yas/fallback-behavior)
           '(apply my-c-indent-or-complete . nil))
      (bind-key "<tab>" 'yas/expand-from-trigger-key c-mode-base-map)

      (unbind-key "M-j" c-mode-base-map)
      (bind-key "C-c C-i" 'c-includes-current-file c-mode-base-map)
      (bind-key "C-c C-y" 'my-paste-as-check c-mode-base-map)

      (set (make-local-variable 'parens-require-spaces) nil)
      (setq indicate-empty-lines t)
      (setq fill-column 72)

      (bind-key "M-q" 'c-fill-paragraph c-mode-base-map)

      (let ((bufname (buffer-file-name)))
        (when bufname
          (cond
           ((string-match "/ledger/" bufname)
            (c-set-style "ledger"))
           ((string-match "/ansi/" bufname)
            (c-set-style "ti")
            (substitute-key-definition 'fill-paragraph 'ti-refill-comment
                                       c-mode-base-map global-map)
            (bind-key "M-q" 'ti-refill-comment c-mode-base-map))
           ((string-match "/edg/" bufname)
            (c-set-style "edg"))
           (t
            (c-set-style "clang")))))

      (font-lock-add-keywords 'c++-mode '(("\\<\\(assert\\|DEBUG\\)("
                                           1 font-lock-warning-face t))))

    (add-hook 'c-mode-common-hook 'my-c-mode-common-hook))

  :config
  (progn
    (setq c-syntactic-indentation nil)

    (bind-key "#" 'self-insert-command c-mode-base-map)
    (bind-key "{" 'self-insert-command c-mode-base-map)
    (bind-key "}" 'self-insert-command c-mode-base-map)
    (bind-key "/" 'self-insert-command c-mode-base-map)
    (bind-key "*" 'self-insert-command c-mode-base-map)
    (bind-key ";" 'self-insert-command c-mode-base-map)
    (bind-key "," 'self-insert-command c-mode-base-map)
    (bind-key ":" 'self-insert-command c-mode-base-map)
    (bind-key "(" 'self-insert-command c-mode-base-map)
    (bind-key ")" 'self-insert-command c-mode-base-map)
    (bind-key "<" 'self-insert-command c++-mode-map)
    (bind-key ">" 'self-insert-command c++-mode-map)

    (use-package cedet
      :disabled t
      :init
      (progn
        ;; Add further minor-modes to be enabled by semantic-mode.  See
        ;; doc-string of `semantic-default-submodes' for other things you can
        ;; use here.
        (dolist (submode '(global-semantic-idle-summary-mode
                           global-semantic-mru-bookmark-mode
                           global-semantic-idle-local-symbol-highlight-mode
                           global-semantic-show-unmatched-syntax-mode))
          (add-to-list 'semantic-default-submodes submode t))

        ;; Enable Semantic
        (semantic-mode 1)

        (when nil              ; jww (2012-06-20): this kills buffers
          ;; if you want to enable support for gnu global
          (use-package semanticdb-global)

          (semanticdb-enable-gnu-global-databases 'c-mode)
          (semanticdb-enable-gnu-global-databases 'c++-mode))))

    (add-to-list 'c-style-alist
                 '("ti"
                   (indent-tabs-mode . nil)
                   (c-basic-offset . 3)
                   (c-comment-only-line-offset . (0 . 0))
                   (c-hanging-braces-alist
                    . ((substatement-open before after)
                       (arglist-cont-nonempty)))
                   (c-offsets-alist
                    . ((statement-block-intro . +)
                       (knr-argdecl-intro . 5)
                       (substatement-open . 0)
                       (substatement-label . 0)
                       (label . 0)
                       (case-label . +)
                       (statement-case-open . 0)
                       (statement-cont . +)
                       (arglist-intro . c-lineup-arglist-intro-after-paren)
                       (arglist-close . c-lineup-arglist)
                       (inline-open . 0)
                       (brace-list-open . 0)
                       (topmost-intro-cont
                        . (first c-lineup-topmost-intro-cont
                                 c-lineup-gnu-DEFUN-intro-cont))))
                   (c-special-indent-hook . c-gnu-impose-minimum)
                   (c-block-comment-prefix . "")))

    (add-to-list 'c-style-alist
                 '("edg"
                   (indent-tabs-mode . nil)
                   (c-basic-offset . 2)
                   (c-comment-only-line-offset . (0 . 0))
                   (c-hanging-braces-alist
                    . ((substatement-open before after)
                       (arglist-cont-nonempty)))
                   (c-offsets-alist
                    . ((statement-block-intro . +)
                       (knr-argdecl-intro . 5)
                       (substatement-open . 0)
                       (substatement-label . 0)
                       (label . 0)
                       (case-label . +)
                       (statement-case-open . 0)
                       (statement-cont . +)
                       (arglist-intro . +)
                       (arglist-close . +)
                       (inline-open . 0)
                       (brace-list-open . 0)
                       (topmost-intro-cont
                        . (first c-lineup-topmost-intro-cont
                                 c-lineup-gnu-DEFUN-intro-cont))))
                   (c-special-indent-hook . c-gnu-impose-minimum)
                   (c-block-comment-prefix . "")))

    (add-to-list 'c-style-alist
                 '("ledger"
                   (indent-tabs-mode . nil)
                   (c-basic-offset . 2)
                   (c-comment-only-line-offset . (0 . 0))
                   (c-hanging-braces-alist
                    . ((substatement-open before after)
                       (arglist-cont-nonempty)))
                   (c-offsets-alist
                    . ((statement-block-intro . +)
                       (knr-argdecl-intro . 5)
                       (substatement-open . 0)
                       (substatement-label . 0)
                       (label . 0)
                       (case-label . 0)
                       (statement-case-open . 0)
                       (statement-cont . +)
                       (arglist-intro . +)
                       (arglist-close . +)
                       (inline-open . 0)
                       (brace-list-open . 0)
                       (topmost-intro-cont
                        . (first c-lineup-topmost-intro-cont
                                 c-lineup-gnu-DEFUN-intro-cont))))
                   (c-special-indent-hook . c-gnu-impose-minimum)
                   (c-block-comment-prefix . "")))

    (add-to-list 'c-style-alist
                 '("clang"
                   (indent-tabs-mode . nil)
                   (c-basic-offset . 2)
                   (c-comment-only-line-offset . (0 . 0))
                   (c-hanging-braces-alist
                    . ((substatement-open before after)
                       (arglist-cont-nonempty)))
                   (c-offsets-alist
                    . ((statement-block-intro . +)
                       (knr-argdecl-intro . 5)
                       (substatement-open . 0)
                       (substatement-label . 0)
                       (label . 0)
                       (case-label . 0)
                       (statement-case-open . 0)
                       (statement-cont . +)
                       (arglist-intro . +)
                       (arglist-close . +)
                       (inline-open . 0)
                       (brace-list-open . 0)
                       (topmost-intro-cont
                        . (first c-lineup-topmost-intro-cont
                                 c-lineup-gnu-DEFUN-intro-cont))))
                   (c-special-indent-hook . c-gnu-impose-minimum)
                   (c-block-comment-prefix . "")))

    (defun opencl ()
      (interactive)
      (find-file "~/src/ansi/opencl.c")
      (find-file-noselect "~/Contracts/TI/bugslayer/cl_0603/cl_0603.c")
      (find-file-noselect "~/Contracts/TI/bugslayer")
      (magit-status "~/src/ansi")
      (gud-gdb "gdb --fullname ~/Contracts/TI/bin/c60/acpia6x"))

    (defun ti-refill-comment ()
      (interactive)
      (let ((here (point)))
        (goto-char (line-beginning-position))
        (let ((begin (point)) end
              (marker ?-) (marker-re "\\(-----\\|\\*\\*\\*\\*\\*\\)")
              (leader-width 0))
          (unless (looking-at "[ \t]*/\\*[-* ]")
            (search-backward "/*")
            (goto-char (line-beginning-position)))
          (unless (looking-at "[ \t]*/\\*[-* ]")
            (error "Not in a comment"))
          (while (and (looking-at "\\([ \t]*\\)/\\* ")
                      (setq leader-width (length (match-string 1)))
                      (not (looking-at (concat "[ \t]*/\\*" marker-re))))
            (forward-line -1)
            (setq begin (point)))
          (when (looking-at (concat "[^\n]+?" marker-re "\\*/[ \t]*$"))
            (setq marker (if (string= (match-string 1) "-----") ?- ?*))
            (forward-line))
          (while (and (looking-at "[^\n]+?\\*/[ \t]*$")
                      (not (looking-at (concat "[^\n]+?" marker-re
                                               "\\*/[ \t]*$"))))
            (forward-line))
          (when (looking-at (concat "[^\n]+?" marker-re "\\*/[ \t]*$"))
            (forward-line))
          (setq end (point))
          (let ((comment (buffer-substring-no-properties begin end)))
            (with-temp-buffer
              (insert comment)
              (goto-char (point-min))
              (flush-lines (concat "^[ \t]*/\\*" marker-re "[-*]+\\*/[ \t]*$"))
              (goto-char (point-min))
              (while (re-search-forward "^[ \t]*/\\* ?" nil t)
                (goto-char (match-beginning 0))
                (delete-region (match-beginning 0) (match-end 0)))
              (goto-char (point-min))
              (while (re-search-forward "[ \t]*\\*/[ \t]*$" nil t)
                (goto-char (match-beginning 0))
                (delete-region (match-beginning 0) (match-end 0)))
              (goto-char (point-min)) (delete-trailing-whitespace)
              (goto-char (point-min)) (flush-lines "^$")
              (set-fill-column (- 80    ; width of the text
                                  6     ; width of "/*  */"
                                  leader-width))
              (goto-char (point-min)) (fill-paragraph nil)
              (goto-char (point-min))
              (while (not (eobp))
                (insert (make-string leader-width ? ) "/* ")
                (goto-char (line-end-position))
                (insert (make-string (- 80 3 (current-column)) ? ) " */")
                (forward-line))
              (goto-char (point-min))
              (insert (make-string leader-width ? )
                      "/*" (make-string (- 80 4 leader-width) marker) "*/\n")
              (goto-char (point-max))
              (insert (make-string leader-width ? )
                      "/*" (make-string (- 80 4 leader-width) marker) "*/\n")
              (setq comment (buffer-string)))
            (goto-char begin)
            (delete-region begin end)
            (insert comment)))
        (goto-char here)))))

#+end_src
*** abbrev
#+begin_src emacs-lisp
;;;_ , abbrev

(use-package abbrev
  :commands abbrev-mode
  :diminish abbrev-mode
  :init
  (hook-into-modes #'abbrev-mode '(text-mode-hook))

  :config
  (progn
   (if (file-exists-p abbrev-file-name)
       (quietly-read-abbrev-file))

   (add-hook 'expand-load-hook
             (lambda ()
               (add-hook 'expand-expand-hook 'indent-according-to-mode)
               (add-hook 'expand-jump-hook 'indent-according-to-mode)))))

#+end_src
*** ace-jump-mode
#+begin_src emacs-lisp
;;;_ , ace-jump-mode

(use-package ace-jump-mode
  :bind ("C-. C-s" . ace-jump-mode))

#+end_src
*** allout
#+begin_src emacs-lisp
;;;_ , allout

(use-package allout
  :diminish allout-mode
  :commands allout-mode
  :config
  (progn
    (defvar allout-unprefixed-keybindings nil)

    (defun my-allout-mode-hook ()
      (dolist (mapping '((?b . allout-hide-bodies)
                         (?c . allout-hide-current-entry)
                         (?l . allout-hide-current-leaves)
                         (?i . allout-show-current-branches)
                         (?e . allout-show-entry)
                         (?o . allout-show-to-offshoot)))
        (bind-key (concat (format-kbd-macro allout-command-prefix)
                          " " (char-to-string (car mapping)))
                  (cdr mapping)
                  allout-mode-map))

      (if (memq major-mode lisp-modes)
          (unbind-key "C-k" allout-mode-map)))

    (add-hook 'allout-mode-hook 'my-allout-mode-hook)))

#+end_src
*** ascii
#+begin_src emacs-lisp
;;;_ , ascii

(use-package ascii
  :commands (ascii-on ascii-toggle)
  :init
  (progn
    (defun ascii-toggle ()
      (interactive)
      (if ascii-display
          (ascii-off)
        (ascii-on)))

    (bind-key "C-c e A" 'ascii-toggle)))

#+end_src
*** archive-region
#+begin_src emacs-lisp
;;;_ , archive-region

(use-package archive-region
  :commands kill-region-or-archive-region
  :bind ("C-w" . kill-region-or-archive-region))

#+end_src
*** auctex
#+begin_src emacs-lisp
;;;_ , auctex

(use-package tex-site
  :load-path "site-lisp/auctex/preview/"
  :defines (latex-help-cmd-alist
            latex-help-file)
  ;; jww (2012-06-15): Do I want to use AucTeX for texinfo-mode?
  :mode ("\\.tex\\'" . latex-mode)
  :config
  (progn
    (defun latex-help-get-cmd-alist () ;corrected version:
      "Scoop up the commands in the index of the latex info manual.
   The values are saved in `latex-help-cmd-alist' for speed."
      ;; mm, does it contain any cached entries
      (if (not (assoc "\\begin" latex-help-cmd-alist))
          (save-window-excursion
            (setq latex-help-cmd-alist nil)
            (Info-goto-node (concat latex-help-file "Command Index"))
            (goto-char (point-max))
            (while (re-search-backward "^\\* \\(.+\\): *\\(.+\\)\\." nil t)
              (let ((key (buffer-substring (match-beginning 1) (match-end 1)))
                    (value (buffer-substring (match-beginning 2)
                                             (match-end 2))))
                (add-to-list 'latex-help-cmd-alist (cons key value))))))
      latex-help-cmd-alist)

    (use-package latex-mode
      :defer t
      :config
      (info-lookup-add-help :mode 'latex-mode
                            :regexp ".*"
                            :parse-rule "\\\\?[a-zA-Z]+\\|\\\\[^a-zA-Z]"
                            :doc-spec '(("(latex2e)Concept Index" )
                                        ("(latex2e)Command Index"))))))

#+end_src
*** auto-complete
#+begin_src emacs-lisp
;;;_ , auto-complete

(use-package auto-complete-config
  :commands auto-complete-mode
  :diminish auto-complete-mode
  :config
  (progn
    (ac-set-trigger-key "TAB")
    (setq ac-use-menu-map t)

    (unbind-key "C-s" ac-completing-map)))

#+end_src
*** autopair
#+begin_src emacs-lisp
;;;_ , autopair

(use-package autopair
  :disabled t
  :commands autopair-mode
  :diminish autopair-mode
  :init
  (hook-into-modes #'autopair-mode '(c-mode-common-hook
                                     text-mode-hook
                                     ruby-mode-hook
                                     python-mode-hook
                                     sh-mode-hook)))

#+end_src
*** autorevert
#+begin_src emacs-lisp
;;;_ , autorevert

(use-package autorevert
  :commands auto-revert-mode
  :diminish auto-revert-mode
  :init
  (add-hook 'find-file-hook
            #'(lambda ()
                (auto-revert-mode 1))))

#+end_src
*** backup-each-save
#+begin_src emacs-lisp
;;;_ , backup-each-save

(use-package backup-each-save
  :defer t
  :init
  (progn
    (autoload 'backup-each-save "backup-each-save")
    (add-hook 'after-save-hook 'backup-each-save)

    (defun my-make-backup-file-name (file)
      (make-backup-file-name-1 (file-truename file)))

    (defun show-backups ()
      (interactive)
      (require 'find-dired)
      (let* ((file (make-backup-file-name (buffer-file-name)))
             (dir (file-name-directory file))
             (args (concat "-iname '" (file-name-nondirectory file)
                           ".~*~'"))
             (dired-buffers dired-buffers)
             (find-ls-option '("-print0 | xargs -0 ls -lta" . "-lta")))
        ;; Check that it's really a directory.
        (or (file-directory-p dir)
            (error "Backup directory does not exist: %s" dir))
        (with-current-buffer (get-buffer-create "*Backups*")
          (let ((find (get-buffer-process (current-buffer))))
            (when find
              (if (or (not (eq (process-status find) 'run))
                      (yes-or-no-p "A `find' process is running; kill it? "))
                  (condition-case nil
                      (progn
                        (interrupt-process find)
                        (sit-for 1)
                        (delete-process find))
                    (error nil))
                (error "Cannot have two processes in `%s' at once"
                       (buffer-name)))))

          (widen)
          (kill-all-local-variables)
          (setq buffer-read-only nil)
          (erase-buffer)
          (setq default-directory dir
                args (concat find-program " . "
                             (if (string= args "")
                                 ""
                               (concat
                                (shell-quote-argument "(")
                                " " args " "
                                (shell-quote-argument ")")
                                " "))
                             (if (string-match "\\`\\(.*\\) {} \\(\\\\;\\|+\\)\\'"
                                               (car find-ls-option))
                                 (format "%s %s %s"
                                         (match-string 1 (car find-ls-option))
                                         (shell-quote-argument "{}")
                                         find-exec-terminator)
                               (car find-ls-option))))
          ;; Start the find process.
          (message "Looking for backup files...")
          (shell-command (concat args "&") (current-buffer))
          ;; The next statement will bomb in classic dired (no optional arg
          ;; allowed)
          (dired-mode dir (cdr find-ls-option))
          (let ((map (make-sparse-keymap)))
            (set-keymap-parent map (current-local-map))
            (define-key map "\C-c\C-k" 'kill-find)
            (use-local-map map))
          (make-local-variable 'dired-sort-inhibit)
          (setq dired-sort-inhibit t)
          (set (make-local-variable 'revert-buffer-function)
               `(lambda (ignore-auto noconfirm)
                  (find-dired ,dir ,find-args)))
          ;; Set subdir-alist so that Tree Dired will work:
          (if (fboundp 'dired-simple-subdir-alist)
              ;; will work even with nested dired format (dired-nstd.el,v 1.15
              ;; and later)
              (dired-simple-subdir-alist)
            ;; else we have an ancient tree dired (or classic dired, where
            ;; this does no harm)
            (set (make-local-variable 'dired-subdir-alist)
                 (list (cons default-directory (point-min-marker)))))
          (set (make-local-variable 'dired-subdir-switches) find-ls-subdir-switches)
          (setq buffer-read-only nil)
          ;; Subdir headlerline must come first because the first marker in
          ;; subdir-alist points there.
          (insert "  " dir ":\n")
          ;; Make second line a ``find'' line in analogy to the ``total'' or
          ;; ``wildcard'' line.
          (insert "  " args "\n")
          (setq buffer-read-only t)
          (let ((proc (get-buffer-process (current-buffer))))
            (set-process-filter proc (function find-dired-filter))
            (set-process-sentinel proc (function find-dired-sentinel))
            ;; Initialize the process marker; it is used by the filter.
            (move-marker (process-mark proc) 1 (current-buffer)))
          (setq mode-line-process '(":%s")))))

    (bind-key "C-x ~" 'show-backups))

  :config
  (progn
    (defun backup-each-save-filter (filename)
      (not (string-match
            (concat "\\(^/tmp\\|\\.emacs\\.d/data\\(-alt\\)?/"
                    "\\|\\.newsrc\\(\\.eld\\)?\\)")
            filename)))

    (setq backup-each-save-filter-function 'backup-each-save-filter)

    (defun my-dont-backup-files-p (filename)
      (unless (string-match filename "/\\(archive/sent/\\|recentf$\\)")
        (normal-backup-enable-predicate filename)))

    (setq backup-enable-predicate 'my-dont-backup-files-p)))

#+end_src
*** bbdb
#+begin_src emacs-lisp
;;;_ , bbdb

(use-package bbdb-com
  :commands bbdb-create
  :bind ("M-B" . bbdb))

#+end_src
*** bm
#+begin_src emacs-lisp
;;;_ , bm

(use-package bm
  :pre-init
  (progn
    (defvar ctl-period-breadcrumb-map)
    (define-prefix-command 'ctl-period-breadcrumb-map)
    (bind-key "C-. c" 'ctl-period-breadcrumb-map))

  :bind (("C-. c b" . bm-last-in-previous-buffer)
         ("C-. c f" . bm-first-in-next-buffer)
         ("C-. c g" . bm-previous)
         ("C-. c l" . bm-show-all)
         ("C-. c c" . bm-toggle)
         ("C-. c m" . bm-toggle)
         ("C-. c n" . bm-next)
         ("C-. c p" . bm-previous)))

#+end_src
*** bookmark
#+begin_src emacs-lisp
;;;_ , bookmark

(use-package bookmark
  :disabled t
  :defer t
  :config
  (progn
    (use-package bookmark+)

    (defun my-bookmark-set ()
      (interactive)
      (flet ((bmkp-completing-read-lax
              (prompt &optional default alist pred hist)
              (completing-read prompt alist pred nil nil hist default)))
        (call-interactively #'bookmark-set)))

    (bind-key "C-x r m" 'my-bookmark-set)))

#+end_src
*** browse-kill-ring+
#+begin_src emacs-lisp
;;;_ , browse-kill-ring+

(use-package browse-kill-ring+)

#+end_src
*** cmake-mode
#+begin_src emacs-lisp
;;;_ , cmake-mode

(use-package cmake-mode
  :mode (("CMakeLists\\.txt\\'" . cmake-mode)
         ("\\.cmake\\'"         . cmake-mode)))

#+end_src
*** compile
#+begin_src emacs-lisp
;;;_ , compile

(use-package compile
  :defer t
  :config
  (add-hook 'compilation-finish-functions
            (lambda (buf why)
              (display-buffer buf))))

#+end_src
*** color-moccur
#+begin_src emacs-lisp
;;;_ , color-moccur

(let ((ad-redefinition-action 'accept))
  (use-package color-moccur
    :commands (isearch-moccur isearch-all)
    :bind ("M-s O" . moccur)
    :init
    (progn
      (bind-key "M-o" 'isearch-moccur isearch-mode-map)
      (bind-key "M-O" 'isearch-moccur-all isearch-mode-map))

    :config
    (use-package moccur-edit)))

#+end_src
*** crosshairs
#+begin_src emacs-lisp
;;;_ , crosshairs

(use-package crosshairs
  :bind ("M-o c" . crosshairs-mode))

#+end_src
*** css-mode
#+begin_src emacs-lisp
;;;_ , css-mode

(use-package css-mode
  :mode ("\\.css\\'" . css-mode))

#+end_src
*** ibuffer
#+begin_src emacs-lisp
;;;_ , ibuffer

(use-package ibuffer
  :defer t
  :init
  (add-hook 'ibuffer-mode-hook
            #'(lambda ()
                (ibuffer-switch-to-saved-filter-groups "default"))))

#+end_src
*** iflipb
#+begin_src emacs-lisp
;;;_ , iflipb

(use-package iflipb
  :disabled t
  :commands (iflipb-next-buffer iflipb-previous-buffer)
  :bind (("S-<tab>" . my-iflipb-next-buffer)
         ("A-S-<tab>" . my-iflipb-previous-buffer))
  :init
  (progn
    (defvar my-iflipb-auto-off-timeout-sec 2)
    (defvar my-iflipb-auto-off-timer-canceler-internal nil)
    (defvar my-iflipb-ing-internal nil)

    (defun my-iflipb-auto-off ()
      (message nil)
      (setq my-iflipb-auto-off-timer-canceler-internal nil
            my-iflipb-ing-internal nil))

    (defun my-iflipb-next-buffer (arg)
      (interactive "P")
      (iflipb-next-buffer arg)
      (if my-iflipb-auto-off-timer-canceler-internal
          (cancel-timer my-iflipb-auto-off-timer-canceler-internal))
      (run-with-idle-timer my-iflipb-auto-off-timeout-sec 0 'my-iflipb-auto-off)
      (setq my-iflipb-ing-internal t))

    (defun my-iflipb-previous-buffer ()
      (interactive)
      (iflipb-previous-buffer)
      (if my-iflipb-auto-off-timer-canceler-internal
          (cancel-timer my-iflipb-auto-off-timer-canceler-internal))
      (run-with-idle-timer my-iflipb-auto-off-timeout-sec 0 'my-iflipb-auto-off)
      (setq my-iflipb-ing-internal t)))

  :config
  (progn
    (setq iflipb-always-ignore-buffers
          "\\`\\( \\|diary\\|ipa\\|\\.newsrc-dribble\\'\\)"
          iflipb-wrap-around t)

    (defun iflipb-first-iflipb-buffer-switch-command ()
      "Determines whether this is the first invocation of
iflipb-next-buffer or iflipb-previous-buffer this round."
      (not (and (or (eq last-command 'my-iflipb-next-buffer)
                    (eq last-command 'my-iflipb-previous-buffer))
                my-iflipb-ing-internal)))))

#+end_src
*** debbugs
#+begin_src emacs-lisp
;;;_ , debbugs

(use-package debbugs-gnu
  :commands (debbugs-gnu debbugs-gnu-search))

#+end_src
*** dedicated
#+begin_src emacs-lisp
;;;_ , dedicated

(use-package dedicated
  :bind ("C-. d" . dedicated-mode))

#+end_src
*** diff-mode
#+begin_src emacs-lisp
;;;_ , diff-mode

(use-package diff-mode
  :commands diff-mode
  :config
  (use-package diff-mode-))

#+end_src
*** dired
#+begin_src emacs-lisp
;;;_ , dired

(use-package dired
  :defer t
  :config
  (progn
    (defun dired-package-initialize ()
      (unless (featurep 'runner)
        (use-package dired-x)
        ;; (use-package dired-async)
        (use-package dired-sort-map)
        (use-package runner)

        (setq dired-use-ls-dired t)

        (bind-key "l" 'dired-up-directory dired-mode-map)

        (defun my-dired-switch-window ()
          (interactive)
          (if (eq major-mode 'sr-mode)
              (call-interactively #'sr-change-window)
            (call-interactively #'other-window)))

        (bind-key "<tab>" 'my-dired-switch-window dired-mode-map)

        (bind-key "M-!" 'async-shell-command dired-mode-map)
        (unbind-key "M-G" dired-mode-map)
        (unbind-key "M-s f" dired-mode-map)

        (defadvice dired-omit-startup (after diminish-dired-omit activate)
          "Make sure to remove \"Omit\" from the modeline."
          (diminish 'dired-omit-mode) dired-mode-map)

        (defadvice dired-next-line (around dired-next-line+ activate)
          "Replace current buffer if file is a directory."
          ad-do-it
          (while (and  (not  (eobp)) (not ad-return-value))
            (forward-line)
            (setq ad-return-value(dired-move-to-filename)))
          (when (eobp)
            (forward-line -1)
            (setq ad-return-value(dired-move-to-filename))))

        (defadvice dired-previous-line (around dired-previous-line+ activate)
          "Replace current buffer if file is a directory."
          ad-do-it
          (while (and  (not  (bobp)) (not ad-return-value))
            (forward-line -1)
            (setq ad-return-value(dired-move-to-filename)))
          (when (bobp)
            (call-interactively 'dired-next-line)))

        (defvar dired-omit-regexp-orig (symbol-function 'dired-omit-regexp))

        ;; Omit files that Git would ignore
        (defun dired-omit-regexp ()
          (let ((file (expand-file-name ".git"))
                parent-dir)
            (while (and (not (file-exists-p file))
                        (progn
                          (setq parent-dir
                                (file-name-directory
                                 (directory-file-name
                                  (file-name-directory file))))
                          ;; Give up if we are already at the root dir.
                          (not (string= (file-name-directory file)
                                        parent-dir))))
              ;; Move up to the parent dir and try again.
              (setq file (expand-file-name ".git" parent-dir)))
            ;; If we found a change log in a parent, use that.
            (if (file-exists-p file)
                (let ((regexp (funcall dired-omit-regexp-orig))
                      (omitted-files
                       (shell-command-to-string "git clean -d -x -n")))
                  (if (= 0 (length omitted-files))
                      regexp
                    (concat
                     regexp
                     (if (> (length regexp) 0)
                         "\\|" "")
                     "\\("
                     (mapconcat
                      #'(lambda (str)
                          (concat
                           "^"
                           (regexp-quote
                            (substring str 13
                                       (if (= ?/ (aref str (1- (length str))))
                                           (1- (length str))
                                         nil)))
                           "$"))
                      (split-string omitted-files "\n" t)
                      "\\|")
                     "\\)")))
              (funcall dired-omit-regexp-orig))))))

    (eval-after-load "dired-aux"
      '(defun dired-do-async-shell-command (command &optional arg file-list)
         "Run a shell command COMMAND on the marked files asynchronously.

Like `dired-do-shell-command' but if COMMAND doesn't end in ampersand,
adds `* &' surrounded by whitespace and executes the command asynchronously.
The output appears in the buffer `*Async Shell Command*'."
         (interactive
          (let ((files (dired-get-marked-files t current-prefix-arg)))
            (list
             ;; Want to give feedback whether this file or marked files are
             ;; used:
             (dired-read-shell-command "& on %s: " current-prefix-arg files)
             current-prefix-arg
             files)))
         (unless (string-match "[ \t][*?][ \t]" command)
           (setq command (concat command " *")))
         (unless (string-match "&[ \t]*\\'" command)
           (setq command (concat command " &")))
         (dired-do-shell-command command arg file-list)))

    (add-hook 'dired-mode-hook 'dired-package-initialize)

    (defun dired-double-jump (first-dir second-dir)
      (interactive
       (list (ido-read-directory-name "First directory: "
                                      (expand-file-name "~")
                                      nil nil "dl/")
             (ido-read-directory-name "Second directory: "
                                      (expand-file-name "~")
                                      nil nil "Archives/")))
      (dired first-dir)
      (dired-other-window second-dir))

    (bind-key "C-c J" 'dired-double-jump)))

#+end_src
*** doxymacs
#+begin_src emacs-lisp
;;;_ , doxymacs

(use-package doxymacs
  :disabled t
  :load-path "site-lisp/doxymacs/lisp/")

#+end_src
*** dvc
#+begin_src emacs-lisp
;;;_ , dvc

(use-package dvc-autoloads
  :load-path "site-lisp/dvc/lisp/")

#+end_src
*** ediff
#+begin_src emacs-lisp
;;;_ , ediff

(use-package ediff
  :pre-init
  (progn
    (defvar ctl-period-equals-map)
    (define-prefix-command 'ctl-period-equals-map)
    (bind-key "C-. =" 'ctl-period-equals-map)

    (bind-key "C-. = c" 'compare-windows)) ; not an ediff command, but it fits

  :bind (("C-. = b" . ediff-buffers)
         ("C-. = B" . ediff-buffers3)
         ("C-. = =" . ediff-files)
         ("C-. = f" . ediff-files)
         ("C-. = F" . ediff-files3)
         ("C-. = r" . ediff-revision)
         ("C-. = p" . ediff-patch-file)
         ("C-. = P" . ediff-patch-buffer)
         ("C-. = l" . ediff-regions-linewise)
         ("C-. = w" . ediff-regions-wordwise))
  :config
  (use-package ediff-keep))

#+end_src
*** edit-server
#+begin_src emacs-lisp
;;;_ , edit-server

(use-package edit-server
  :if (and window-system (not running-alternate-emacs)
           (not noninteractive))
  :init
  (progn
    (add-hook 'after-init-hook 'server-start t)
    (add-hook 'after-init-hook 'edit-server-start t)))

#+end_src
*** emms
#+begin_src emacs-lisp
;;;_ , emms

(use-package emms-setup
  :load-path "site-lisp/emms/lisp"
  :defines emms-info-functions
  :commands (emms-all emms-devel)
  :init
  (progn
    (defvar emms-initialized nil)

    (defun my-emms ()
      (interactive)
      (unless emms-initialized
        (emms-devel)
        (emms-default-players)
        (require 'emms-info-libtag)
        (setq emms-info-functions '(emms-info-libtag))
        (setq emms-initialized t))
      (call-interactively #'emms-smart-browse))

    (bind-key "C-. M" 'my-emms))

  :config
  (progn
    (bind-key "S-<f7>" 'emms-previous)
    (bind-key "S-<f8>" 'emms-pause)
    (bind-key "S-<f9>" 'emms-next)
    (bind-key "S-<f10>" 'emms-stop)

    (defun emms-player-mplayer-volume-up ()
      "Depends on mplayer’s -slave mode."
      (interactive)
      (process-send-string
       emms-player-simple-process-name "volume 1\n"))

    (defun emms-player-mplayer-volume-down ()
      "Depends on mplayer’s -slave mode."
      (interactive)
      (process-send-string
       emms-player-simple-process-name "volume -1\n"))

    (bind-key "C-. C--" 'emms-player-mplayer-volume-down)
    (bind-key "C-. C-=" 'emms-player-mplayer-volume-up)))

#+end_src
*** erc
#+begin_src emacs-lisp
;;;_ , erc

(use-package erc
  ;; :commands erc
  :if running-alternate-emacs
  :init
  (progn
    (defun irc ()
      (interactive)
      (erc-tls :server "irc.freenode.net"
               :port 6697
               :nick "johnw"
               :password (funcall
                          (plist-get
                           (car (auth-source-search :host "irc.freenode.net"
                                                    :user "johnw"
                                                    :type 'netrc
                                                    :port 6667))
                           :secret)))
      (erc-tls :server "irc.oftc.net"
               :port 6697
               :nick "johnw"))

    (defun im ()
      (interactive)
      (erc :server "localhost"
           :port 6667
           :nick "johnw"
           :password (funcall
                      (plist-get
                       (car (auth-source-search :host "bitlbee"
                                                :user "johnw"
                                                :type 'netrc
                                                :port 6667))
                       :secret)))))

  :config
  (progn
    (erc-track-minor-mode 1)
    (erc-track-mode 1)

    (use-package erc-alert)
    (use-package erc-highlight-nicknames)
    (use-package erc-patch)

    (use-package erc-yank
      :init
      (bind-key "C-y" 'erc-yank erc-mode-map))

    (use-package wtf
      :commands wtf-is
      :init
      (defun erc-cmd-WTF (term &rest ignore)
        "Look up definition for TERM."
        (let ((def (wtf-is term)))
          (if def
              (let ((msg (concat "{Term} " (upcase term) " is " def)))
                (with-temp-buffer
                  (insert msg)
                  (kill-ring-save (point-min) (point-max)))
                (message msg))
            (message (concat "No definition found for " (upcase term)))))))

    (defun switch-to-bitlbee ()
      (interactive)
      (switch-to-buffer-other-window "&bitlbee")
      (call-interactively 'erc-channel-names)
      (goto-char (point-max)))

    (bind-key "C-c b" 'switch-to-bitlbee)

    (defun erc-cmd-SHOW (&rest form)
      "Eval FORM and send the result and the original form as:
FORM => (eval FORM)."
      (let* ((form-string (mapconcat 'identity form " "))
             (result
              (condition-case err
                  (eval (read-from-whole-string form-string))
                (error
                 (format "Error: %s" err)))))
        (erc-send-message (format "%s => %S" form-string result))))

    (defun erc-cmd-INFO (&rest ignore)
      "Send current info node."
      (unless (get-buffer "*info*")
        (error "No *info* buffer"))
      (let (output)
        (with-current-buffer "*info*"
          (let* ((file (file-name-nondirectory Info-current-file))
                 (node Info-current-node))
            (setq output (format "(info \"(%s)%s\") <-- hit C-x C-e to evaluate"
                                 file node))))
        (erc-send-message output)))

    (eval-when-compile
      (defvar erc-fools))

    (defun erc-cmd-FOOL (term &rest ignore)
      (add-to-list 'erc-fools term))

    (defun erc-cmd-UNFOOL (term &rest ignore)
      (setq erc-fools (delete term erc-fools)))

    (defun erc-cmd-OPME ()
      "Request chanserv to op me."
      (erc-message "PRIVMSG"
                   (format "chanserv op %s %s"
                           (erc-default-target)
                           (erc-current-nick)) nil))

    (defun erc-cmd-DEOPME ()
      "Deop myself from current channel."
      (erc-cmd-DEOP (format "%s" (erc-current-nick))))))

#+end_src
*** eshell
#+begin_src emacs-lisp
;;;_ , eshell

(use-package eshell
  :defer t
  :init
  (progn
    (defun eshell-initialize ()
      (defun eshell-spawn-external-command (beg end)
        "Parse and expand any history references in current input."
        (save-excursion
          (goto-char end)
          (when (looking-back "&!" beg)
            (delete-region (match-beginning 0) (match-end 0))
            (goto-char beg)
            (insert "spawn "))))

      (add-hook 'eshell-expand-input-functions 'eshell-spawn-external-command)

      (defun ss (server)
        (interactive "sServer: ")
        (call-process "spawn" nil nil nil "ss" server))

      (eval-after-load "em-unix"
        '(progn
           (unintern 'eshell/su)
           (unintern 'eshell/sudo))))

    (add-hook 'eshell-first-time-mode-hook 'eshell-initialize)))

(use-package esh-toggle
  :requires eshell
  :bind ("C-x C-z" . eshell-toggle))

#+end_src
*** ess
#+begin_src emacs-lisp
;;;_ , ess

(use-package ess-site
  :disabled t
  :load-path "site-lisp/ess/lisp/"
  :commands R)

#+end_src
*** eval-expr
#+begin_src emacs-lisp
;;;_ , eval-expr

(use-package eval-expr
  :bind ("M-:" . eval-expr)
  :config
  (progn
    (setq eval-expr-print-function 'pp
          eval-expr-print-level 20
          eval-expr-print-length 100)

    (defun eval-expr-minibuffer-setup ()
      (set-syntax-table emacs-lisp-mode-syntax-table)
      (paredit-mode))))

#+end_src
*** fetchmail-mode
#+begin_src emacs-lisp
;;;_ , fetchmail-mode

(use-package fetchmail-mode
  :commands fetchmail-mode)

#+end_src
*** flyspell
#+begin_src emacs-lisp
;;;_ , flyspell

(use-package ispell
  :bind (("C-c i c" . ispell-comments-and-strings)
         ("C-c i d" . ispell-change-dictionary)
         ("C-c i k" . ispell-kill-ispell)
         ("C-c i m" . ispell-message)
         ("C-c i r" . ispell-region)))

(use-package flyspell
  :bind (("C-c i b" . flyspell-buffer)
         ("C-c i f" . flyspell-mode))
  :config
  (define-key flyspell-mode-map [(control ?.)] nil))

#+end_src
*** fold-dwim
#+begin_src emacs-lisp
;;;_ , fold-dwim

(use-package fold-dwim
  :bind (("<f13>" . fold-dwim-toggle)
         ("<f14>" . fold-dwim-hide-all)
         ("<f15>" . fold-dwim-show-all)))

#+end_src
*** gist
#+begin_src emacs-lisp
;;;_ , gist

(use-package gist
  :bind ("C-c G" . gist-region-or-buffer))

#+end_src
*** gnus
#+begin_src emacs-lisp
;;;_ , gnus

(use-package dot-gnus
  :bind (("M-G"   . switch-to-gnus)
         ("C-x m" . compose-mail))
  :init
  (progn
    (setq gnus-init-file (expand-file-name "dot-gnus" user-emacs-directory)
          gnus-home-directory "~/Messages/Gnus/")))

#+end_src
*** grep
#+begin_src emacs-lisp
;;;_ , grep

(use-package grep
  :bind (("M-s d" . find-grep-dired)
         ("M-s f" . find-grep)
         ("M-s g" . grep))
  :init
  (progn
    (defun find-grep-in-project (command-args)
      (interactive
       (let ((default (thing-at-point 'symbol)))
         (list (read-shell-command "Run find (like this): "
                                   (cons (concat "git --no-pager grep -n "
                                                 default)
                                         (+ 24 (length default)))
                                   'grep-find-history))))
      (if command-args
          (let ((null-device nil))      ; see grep
            (grep command-args))))

    (bind-key "M-s p" 'find-grep-in-project))

  :config
  (progn
    (use-package grep-ed)

    (grep-apply-setting 'grep-command "egrep -nH -e ")
    (grep-apply-setting
     'grep-find-command
     '("find . -type f -print0 | xargs -P4 -0 egrep -nH -e " . 52))))

#+end_src
*** gtags
#+begin_src emacs-lisp
;;;_ , gtags

(use-package gtags
  :commands gtags-mode
  :diminish gtags-mode
  :config
  (progn
    (defun my-gtags-or-semantic-find-tag ()
      (interactive)
      (if (and (fboundp 'semantic-active-p)
               (funcall #'semantic-active-p))
          (call-interactively #'semantic-complete-jump)
        (call-interactively #'gtags-find-tag)))

    (bind-key "M-." 'my-gtags-or-semantic-find-tag gtags-mode-map)

    (bind-key "C-c t ." 'gtags-find-rtag)
    (bind-key "C-c t f" 'gtags-find-file)
    (bind-key "C-c t p" 'gtags-parse-file)
    (bind-key "C-c t g" 'gtags-find-with-grep)
    (bind-key "C-c t i" 'gtags-find-with-idutils)
    (bind-key "C-c t s" 'gtags-find-symbol)
    (bind-key "C-c t r" 'gtags-find-rtag)
    (bind-key "C-c t v" 'gtags-visit-rootdir)

    (bind-key "<mouse-2>" 'gtags-find-tag-from-here gtags-mode-map)

    (use-package helm-gtags
      :bind ("M-T" . helm-gtags-select)
      :config
      (bind-key "M-," 'helm-gtags-resume gtags-mode-map))))

#+end_src
*** gud
#+begin_src emacs-lisp
;;;_ , gud

(use-package gud
  :commands gud-gdb
  :init
  (progn
    (defun show-debugger ()
      (interactive)
      (let ((gud-buf
             (catch 'found
               (dolist (buf (buffer-list))
                 (if (string-match "\\*gud-" (buffer-name buf))
                     (throw 'found buf))))))
        (if gud-buf
            (switch-to-buffer-other-window gud-buf)
          (call-interactively 'gud-gdb))))

    (bind-key "C-. g" 'show-debugger))

  :config
  (progn
    (bind-key "<f9>" 'gud-cont)
    (bind-key "<f10>" 'gud-next)
    (bind-key "<f11>" 'gud-step)
    (bind-key "S-<f11>" 'gud-finish)))

#+end_src
*** haskell-mode
#+begin_src emacs-lisp
;;;_ , haskell-mode

(require 'haskell-config)

#+end_src
*** helm
#+begin_src emacs-lisp
;;;_ , helm

(use-package helm-config
  :if (not running-alternate-emacs)
  :init
  (progn
    (bind-key "C-c M-x" 'helm-M-x)
    (bind-key "C-h a" 'helm-c-apropos)
    (bind-key "M-s a" 'helm-do-grep)
    (bind-key "M-s b" 'helm-occur)
    (bind-key "M-s F" 'helm-for-files)

    (use-package helm-commands)

    (bind-key "C-h e a" 'my-helm-apropos)
    (bind-key "C-x M-!" 'helm-command-from-zsh)
    (bind-key "C-x f" 'helm-find-git-file)

    (use-package helm-descbinds
      :commands helm-descbinds
      :init
      (fset 'describe-bindings 'helm-descbinds))

    (bind-key "C-h b" 'helm-descbinds))

  :config
  (helm-match-plugin-mode t))

#+end_src
*** hi-lock
#+begin_src emacs-lisp
;;;_ , hi-lock

(use-package hi-lock
  :bind (("M-o l" . highlight-lines-matching-regexp)
         ("M-o r" . highlight-regexp)
         ("M-o w" . highlight-phrase)))

#+end_src
*** hilit-chg
#+begin_src emacs-lisp
;;;_ , hilit-chg

(use-package hilit-chg
  :bind ("M-o C" . highlight-changes-mode))

#+end_src
*** hl-line
#+begin_src emacs-lisp
;;;_ , hl-line

(use-package hl-line
  :bind ("M-o h" . hl-line-mode)
  :config
  (use-package hl-line+))

#+end_src
*** ibuffer
#+begin_src emacs-lisp
;;;_ , ibuffer

(use-package ibuffer
  :bind ("C-x C-b" . ibuffer))

#+end_src
*** ido
#+begin_src emacs-lisp
;;;_ , ido

(use-package ido
  :defines (ido-cur-item
            ido-require-match
            ido-selected
            ido-final-text
            ido-show-confirm-message)
  :init
  (ido-mode 'buffer)

  :config
  (progn
    (use-package ido-hacks
      :init
      (ido-hacks-mode 1))

    (use-package ido-springboard)

    (defun ido-smart-select-text ()
      "Select the current completed item.  Do NOT descend into directories."
      (interactive)
      (when (and (or (not ido-require-match)
                     (if (memq ido-require-match
                               '(confirm confirm-after-completion))
                         (if (or (eq ido-cur-item 'dir)
                                 (eq last-command this-command))
                             t
                           (setq ido-show-confirm-message t)
                           nil))
                     (ido-existing-item-p))
                 (not ido-incomplete-regexp))
        (when ido-current-directory
          (setq ido-exit 'takeprompt)
          (unless (and ido-text (= 0 (length ido-text)))
            (let ((match (ido-name (car ido-matches))))
              (throw 'ido
                     (setq ido-selected
                           (if match
                               (replace-regexp-in-string "/\\'" "" match)
                             ido-text)
                           ido-text ido-selected
                           ido-final-text ido-text)))))
        (exit-minibuffer)))

    (add-hook 'ido-minibuffer-setup-hook
              #'(lambda ()
                  (bind-key "<return>" 'ido-smart-select-text
                            ido-file-completion-map)))

    (defun ido-switch-buffer-tiny-frame (buffer)
      (interactive (list (ido-read-buffer "Buffer: " nil t)))
      (with-selected-frame
          (make-frame '((width                . 80)
                        (height               . 22)
                        (left-fringe          . 0)
                        (right-fringe         . 0)
                        (vertical-scroll-bars . nil)
                        (unsplittable         . t)
                        (has-modeline-p       . nil)
                        ;;(background-color     . "grey80")
                        (minibuffer           . nil)))
        (switch-to-buffer buffer)
        (set (make-local-variable 'mode-line-format) nil)))

    (bind-key "C-x 5 t" 'ido-switch-buffer-tiny-frame)))

#+end_src
*** ielm
#+begin_src emacs-lisp
;;;_ , ielm

(use-package ielm
  :bind ("C-c :" . ielm)
  :config
  (progn
    (defun my-ielm-return ()
      (interactive)
      (let ((end-of-sexp (save-excursion
                           (goto-char (point-max))
                           (skip-chars-backward " \t\n\r")
                           (point))))
        (if (>= (point) end-of-sexp)
            (progn
              (goto-char (point-max))
              (skip-chars-backward " \t\n\r")
              (delete-region (point) (point-max))
              (call-interactively #'ielm-return))
          (call-interactively #'paredit-newline))))

    (add-hook 'ielm-mode-hook
              (function
               (lambda ()
                 (bind-key "<return>" 'my-ielm-return ielm-map)))
              t)))

#+end_src
*** image-file
#+begin_src emacs-lisp
;;;_ , image-file

(use-package image-file
  :disabled t
  :init
  (auto-image-file-mode 1))

#+end_src
*** info
#+begin_src emacs-lisp
;;;_ , info

(use-package info
  :bind ("C-h C-i" . info-lookup-symbol)
  :init
  (remove-hook 'menu-bar-update-hook 'mac-setup-help-topics)

  :config
  (progn
    (defadvice info-setup (after load-info+ activate)
      (use-package info+))

    (defadvice Info-exit (after remove-info-window activate)
      "When info mode is quit, remove the window."
      (if (> (length (window-list)) 1)
          (delete-window)))))

(use-package info-look
  :commadns info-lookup-add-help)

#+end_src
*** indirect
#+begin_src emacs-lisp
;;;_ , indirect

(use-package indirect
  :bind ("C-c C" . indirect-region))

#+end_src
*** initsplit
#+begin_src emacs-lisp
;;;_ , initsplit

(eval-after-load "cus-edit"
  '(use-package initsplit))

#+end_src
*** ipa
#+begin_src emacs-lisp
;;;_ , ipa

(use-package ipa
  :commands ipa-insert
  :init
  (progn
    (autoload 'ipa-load-annotations-into-buffer "ipa")
    (add-hook 'find-file-hook 'ipa-load-annotations-into-buffer)))

#+end_src
*** js2-mode
#+begin_src emacs-lisp
;;;_ , js2-mode

(use-package js2-mode
  :mode ("\\.js\\'" . js2-mode))

#+end_src
*** ledger
#+begin_src emacs-lisp
;;;_ , ledger

(use-package "ldg-new"
  :commands ledger-mode
  :init
  (progn
    (defun my-ledger-start-entry (&optional arg)
      (interactive "p")
      (find-file-other-window "~/Documents/Accounts/ledger.dat")
      (goto-char (point-max))
      (skip-syntax-backward " ")
      (if (looking-at "\n\n")
          (goto-char (point-max))
        (delete-region (point) (point-max))
        (insert ?\n)
        (insert ?\n))
      (insert (format-time-string "%Y/%m/%d ")))

    (bind-key "C-c L" 'my-ledger-start-entry)

    (defun ledger-matchup ()
      (interactive)
      (while (re-search-forward "\\(\\S-+Unknown\\)\\s-+\\$\\([-,0-9.]+\\)"
                                nil t)
        (let ((account-beg (match-beginning 1))
              (account-end (match-end 1))
              (amount (match-string 2))
              account answer)
          (goto-char account-beg)
          (set-window-point (get-buffer-window) (point))
          (recenter)
          (redraw-display)
          (with-current-buffer (get-buffer "nrl-mastercard-old.dat")
            (goto-char (point-min))
            (when (re-search-forward (concat "\\(\\S-+\\)\\s-+\\$" amount)
                                     nil t)
              (setq account (match-string 1))
              (goto-char (match-beginning 1))
              (set-window-point (get-buffer-window) (point))
              (recenter)
              (redraw-display)
              (setq answer
                    (read-char (format "Is this a match for %s (y/n)? "
                                       account)))))
          (when (eq answer ?y)
            (goto-char account-beg)
            (delete-region account-beg account-end)
            (insert account))
          (forward-line))))))

#+end_src
*** lisp-mode
#+begin_src emacs-lisp
;;;_ , lisp-mode

;; Utilities every Emacs Lisp coders should master:
;;
;;   paredit          Let's you manipulate sexps with ease
;;   redshank         Think: Lisp refactoring
;;   edebug           Knowing the traditional debugger is good too
;;   eldoc
;;   cldoc
;;   elint
;;   elp
;;   ert

(use-package lisp-mode
  ;; :load-path "site-lisp/slime/contrib/"
  :init
  (progn
    (defface esk-paren-face
      '((((class color) (background dark))
         (:foreground "grey50"))
        (((class color) (background light))
         (:foreground "grey55")))
      "Face used to dim parentheses."
      :group 'starter-kit-faces)

    ;; Change lambda to an actual lambda symbol
    (mapc (lambda (major-mode)
            (font-lock-add-keywords
             major-mode
             '(("(\\(lambda\\)\\>"
                (0 (ignore
                    (compose-region (match-beginning 1)
                                    (match-end 1) ?λ))))
               ("(\\|)" . 'esk-paren-face)
               ("(\\(ert-deftest\\)\\>[ 	'(]*\\(setf[ 	]+\\sw+\\|\\sw+\\)?"
                (1 font-lock-keyword-face)
                (2 font-lock-function-name-face
                 nil t)))))
          lisp-modes)

    (defvar slime-mode nil)
    (defvar lisp-mode-initialized nil)

    (defun initialize-lisp-mode ()
      (unless lisp-mode-initialized
        (setq lisp-mode-initialized t)

        (use-package redshank
          :diminish redshank-mode)

        (use-package elisp-slime-nav
          :diminish elisp-slime-nav-mode)

        (use-package edebug)

        (use-package eldoc
          :diminish eldoc-mode
          :defer t
          :init
          (use-package eldoc-extension
            :disabled t
            :defer t
            :init
            (add-hook 'emacs-lisp-mode-hook
                      #'(lambda () (require 'eldoc-extension)) t))

          :config
          (eldoc-add-command 'paredit-backward-delete
                             'paredit-close-round))

        (use-package cldoc
          :diminish cldoc-mode)

        (use-package ert
          :commands ert-run-tests-interactively
          :bind ("C-c e t" . ert-run-tests-interactively))

        (use-package elint
          :commands 'elint-initialize
          :init
          (defun elint-current-buffer ()
            (interactive)
            (elint-initialize)
            (elint-current-buffer))

          :config
          (progn
            (add-to-list 'elint-standard-variables 'current-prefix-arg)
            (add-to-list 'elint-standard-variables 'command-line-args-left)
            (add-to-list 'elint-standard-variables 'buffer-file-coding-system)
            (add-to-list 'elint-standard-variables 'emacs-major-version)
            (add-to-list 'elint-standard-variables 'window-system)))

        (use-package highlight-cl
          :init
          (mapc (function
                 (lambda (mode-hook)
                   (add-hook mode-hook
                             'highlight-cl-add-font-lock-keywords)))
                lisp-mode-hooks))

        (defun my-elisp-indent-or-complete (&optional arg)
          (interactive "p")
          (call-interactively 'lisp-indent-line)
          (unless (or (looking-back "^\\s-*")
                      (bolp)
                      (not (looking-back "[-A-Za-z0-9_*+/=<>!?]+")))
            (call-interactively 'lisp-complete-symbol)))

        (defun my-lisp-indent-or-complete (&optional arg)
          (interactive "p")
          (if (or (looking-back "^\\s-*") (bolp))
              (call-interactively 'lisp-indent-line)
            (call-interactively 'slime-indent-and-complete-symbol)))

        (defun my-byte-recompile-file ()
          (save-excursion
            (byte-recompile-file buffer-file-name)))

        ;; Register Info manuals related to Lisp
        (use-package info-lookmore
          :init
          (progn
            (info-lookmore-elisp-cl)
            (info-lookmore-elisp-userlast)
            (info-lookmore-elisp-gnus)
            (info-lookmore-apropos-elisp)))

        (mapc (lambda (mode)
                (info-lookup-add-help
                 :mode mode
                 :regexp "[^][()'\" \t\n]+"
                 :ignore-case t
                 :doc-spec '(("(ansicl)Symbol Index" nil nil nil))))
              lisp-modes)))

    (defun my-lisp-mode-hook ()
      (initialize-lisp-mode)

      (auto-fill-mode 1)
      (paredit-mode 1)
      (redshank-mode 1)
      (elisp-slime-nav-mode 1)

      (local-set-key (kbd "<return>") 'paredit-newline)

      (if (memq major-mode
                '(emacs-lisp-mode inferior-emacs-lisp-mode ielm-mode))
          (progn
            (bind-key "<M-return>" 'outline-insert-heading emacs-lisp-mode-map)
            (bind-key "<tab>" 'my-elisp-indent-or-complete emacs-lisp-mode-map))
        (turn-on-cldoc-mode)

        (bind-key "<tab>" 'my-lisp-indent-or-complete lisp-mode-map)
        (bind-key "M-q" 'slime-reindent-defun lisp-mode-map)
        (bind-key "M-l" 'slime-selector lisp-mode-map))

      (yas/minor-mode 1))

    (hook-into-modes #'my-lisp-mode-hook lisp-mode-hooks)))

#+end_src
*** llvm-mode
#+begin_src emacs-lisp
;;;_ , llvm-mode

(use-package llvm-mode
  :mode ("\\.ll\\'" . llvm-mode))

#+end_src
*** log4j-mode
#+begin_src emacs-lisp
;;;_ , log4j-mode

(use-package log4j-mode
  :disabled t
  :mode ("\\.log\\'" . log4j-mode))

#+end_src
*** lua-mode
#+begin_src emacs-lisp
;;;_ , lua-mode

(use-package lua-mode
  :mode ("\\.lua\\'" . lua-mode)
  :interpreter ("lua" . lua-mode))

#+end_src
*** lusty-explorer
#+begin_src emacs-lisp
;;;_ , lusty-explorer

(use-package lusty-explorer
  :bind ("C-x C-f" . lusty-file-explorer)
  :config
  (progn
    (add-hook 'lusty-setup-hook
              (lambda ()
                (bind-key "SPC" 'lusty-select-match lusty-mode-map)
                (bind-key "C-d" 'exit-minibuffer lusty-mode-map)))

    (defun lusty-open-this ()
      "Open the given file/directory/buffer, creating it if not already present."
      (interactive)
      (when lusty--active-mode
        (ecase lusty--active-mode
          (:file-explorer
           (let* ((path (minibuffer-contents-no-properties))
                  (last-char (aref path (1- (length path)))))
             (lusty-select-match)
             (lusty-select-current-name)))
          (:buffer-explorer (lusty-select-match)))))

    (defvar lusty-only-directories nil)

    (defun lusty-file-explorer-matches (path)
      (let* ((dir (lusty-normalize-dir (file-name-directory path)))
             (file-portion (file-name-nondirectory path))
             (files
              (and dir
                   ;; NOTE: directory-files is quicker but
                   ;;       doesn't append slash for directories.
                   ;;(directory-files dir nil nil t)
                   (file-name-all-completions "" dir)))
             (filtered (lusty-filter-files
                        file-portion
                        (if lusty-only-directories
                            (loop for f in files
                                  when (= ?/ (aref f (1- (length f))))
                                  collect f)
                          files))))
        (if (or (string= file-portion "")
                (string= file-portion "."))
            (sort filtered 'string<)
          (lusty-sort-by-fuzzy-score filtered file-portion))))

    (defun lusty-read-directory ()
      "Launch the file/directory mode of LustyExplorer."
      (interactive)
      (let ((lusty--active-mode :file-explorer))
        (lusty--define-mode-map)
        (let* ((lusty--ignored-extensions-regex
                (concat "\\(?:" (regexp-opt completion-ignored-extensions) "\\)$"))
               (minibuffer-local-filename-completion-map lusty-mode-map)
               (lusty-only-directories t))
          (lusty--run 'read-directory-name default-directory ""))))

    (defun lusty-read-file-name ()
      "Launch the file/directory mode of LustyExplorer."
      (interactive)
      (let ((lusty--active-mode :file-explorer))
        (lusty--define-mode-map)
        (let* ((lusty--ignored-extensions-regex
                (concat "\\(?:" (regexp-opt completion-ignored-extensions) "\\)$"))
               (minibuffer-local-filename-completion-map lusty-mode-map)
               (lusty-only-directories nil))
          (lusty--run 'read-file-name default-directory ""))))

    (if (featurep 'icicles)
        (defadvice lusty-file-explorer (around lusty-file-explorer-without-icy
                                               activate)
          (flet ((message (&rest ignore)))
            (let ((icy-was-on icicle-mode))
              (if icy-was-on (icy-mode 0))
              (unwind-protect
                  ad-do-it
                (if icy-was-on (icy-mode 1)))))))))

#+end_src
*** macrostep
#+begin_src emacs-lisp
;;;_ , macrostep

(use-package macrostep
  :bind ("C-c e m" . macrostep-expand))

#+end_src
*** magit
#+begin_src emacs-lisp
;;;_ , magit

(use-package magit
  :bind ("C-x g" . magit-status)
  :config
  (progn
    (setenv "GIT_PAGER" "")

    (add-hook 'magit-log-edit-mode-hook
              #'(lambda ()
                  (set-fill-column 72)
                  (flyspell-mode)))

    (require 'magit-topgit)
    (require 'rebase-mode)

    (defun start-git-monitor ()
      (interactive)
      (start-process "git-monitor" (current-buffer) "~/bin/git-monitor"))

    ;;(add-hook 'magit-status-mode-hook 'start-git-monitor)
    ))

#+end_src
*** markdown-mode
#+begin_src emacs-lisp
;;;_ , markdown-mode

(use-package markdown-mode
  :mode ("\\.md\\'" . markdown-mode)
  :init
  (progn
    (defun markdown-preview-file ()
      "run Marked on the current file and revert the buffer"
      (interactive)
      (shell-command
       (format "open -a /Applications/Marked.app %s"
               (shell-quote-argument (buffer-file-name)))))

    (bind-key "C-x M" 'markdown-preview-file)))

#+end_src
*** merlin
#+begin_src emacs-lisp
;;;_ , merlin

(defun merlin-record-times ()
  (interactive)
  (require 'rx)
  (let* ((text (buffer-substring-no-properties (line-beginning-position)
                                               (line-end-position)))
         (regex
          (rx (and string-start (0+ space)
                   (group (and (= 2 num) ?/ (= 2 num) ?/ (= 2 num)
                               space (= 2 num) ?: (= 2 num) space
                               (in "AP") ?M)) (1+ space)
                   (group (and (= 2 num) ?/ (= 2 num) ?/ (= 2 num)
                               space (= 2 num) ?: (= 2 num) space
                               (in "AP") ?M)) (1+ space)
                   (? (and (group ?*) (1+ space)))
                   (group (1+ (or digit (in ".hms"))))
                   (1+ space) (group (1+ nonl)) string-end))))
    (if (string-match regex text)
        (let ((start (match-string 1 text))
              (end (match-string 2 text))
              (cleared (match-string 3 text))
              (duration (match-string 4 text)) commodity
              (account (match-string 5 text)))
          (when (string-match "\\([0-9.]+\\)\\([mhs]\\)" duration)
            (setq commodity (match-string 2 duration)
                  duration (match-string 1 duration))
            (cond ((string= commodity "h")
                   (setq commodity "hours"))
                  ((string= commodity "m")
                   (setq commodity "minutes"))
                  ((string= commodity "s")
                   (setq commodity "seconds"))))
          (if (string-match "\\([0-9.][0-9.a-z]+\\)" account)
              (setq account (match-string 1 account)))
          (do-applescript
           (format
            "
          tell application \"Merlin\"
          activate

          set act to 0

          set listActivity to every activity of first document
          repeat with oneActivity in listActivity
          if subtitle of oneActivity is \"%s\" then
          set act to oneActivity
          exit repeat
          end if
          end repeat

          if act is 0 then
          set myselection to selected object of main window of first document as list

          if (count of myselection) is 0 then
          display dialog \"Please select activity to set time for\" buttons {\"OK\"}
          else
          set act to beginning of myselection
          end if
          end if

          if act is 0 or (class of act is project) or (is milestone of act is true) then
          display dialog \"Cannot locate activity for %s\" buttons {\"OK\"}
          else
          tell act
          if ((class is not project) and (is milestone is not true)) then
          set actual start date to (date \"%s\")
          if %s then
          set actual end date to (date \"%s\")
          delete last actuals reporting date

          set given remaining work to {amount:0, unit:hours, floating:false, ¬
          relative error:0}
          else
          delete actual end date
          set last actuals reporting date to (date \"%s\")
          end if
          set given actual work to {amount:%s, unit:%s, floating:false, ¬
          relative error:0}
          end if
          end tell
          end if
          end tell" account account start (if cleared "true" "false")
            end end  duration commodity))))))

#+end_src
*** mudel
#+begin_src emacs-lisp
;;;_ , mudel

(use-package mudel
  :commands mudel
  :bind ("C-c M" . mud)
  :init
  (defun mud ()
    (interactive)
    (mudel "4dimensions" "4dimensions.org" 6000)))

#+end_src
*** mule
#+begin_src emacs-lisp
;;;_ , mule

(use-package mule
  :init
  (progn
    (prefer-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))))

#+end_src
*** multi-term
#+begin_src emacs-lisp
;;;_ , multi-term

(use-package multi-term
  :bind (("C-. t" . multi-term-next)
         ("C-. T" . multi-term))
  :init
  (defun screen ()
    (interactive)
    (let (term-buffer)
      ;; Set buffer.
      (setq term-buffer
            (let ((multi-term-program (executable-find "screen"))
                  (multi-term-program-switches "-DR"))
              (multi-term-get-buffer)))
      (set-buffer term-buffer)
      ;; Internal handle for `multi-term' buffer.
      (multi-term-internal)
      ;; Switch buffer
      (switch-to-buffer term-buffer)))

  :config
  (progn
    (if t
        (defalias 'my-term-send-raw-at-prompt 'term-send-raw)
      (defun my-term-send-raw-at-prompt ()
        (interactive)
        (if (save-excursion
              (search-backward " $ " (line-beginning-position) t))
            (progn
              (if (memq 'meta (event-modifiers last-command-event))
                  (progn
                    (term-send-raw-string
                     (format "\e%c"
                             (logand last-command-event (lognot #x8000000)))))
                (call-interactively #'term-send-raw)))
          (call-interactively (lookup-key (current-global-map)
                                          (vector last-command-event))))))

    (defun my-term-end-of-buffer ()
      (interactive)
      (call-interactively #'end-of-buffer)
      (if (and (eobp) (bolp))
          (delete-char -1)))

    (require 'term)

    (defadvice term-process-pager (after term-process-rebind-keys activate)
      (define-key term-pager-break-map  "\177" 'term-pager-back-page))))

#+end_src
*** nf-procmail-mode
#+begin_src emacs-lisp
;;;_ , nf-procmail-mode

(use-package nf-procmail-mode
  :commands nf-procmail-mode)

#+end_src
*** nroff-mode
#+begin_src emacs-lisp
;;;_ , nroff-mode

(use-package nroff-mode
  :commands nroff-mode
  :config
  (progn
    (defun update-nroff-timestamp ()
      (save-excursion
        (goto-char (point-min))
        (when (re-search-forward "^\\.Dd ")
          (let ((stamp (format-time-string "%B %e, %Y")))
            (unless (looking-at stamp)
              (delete-region (point) (line-end-position))
              (insert stamp)
              (let (after-save-hook)
                (save-buffer)))))))

    (add-hook 'nroff-mode-hook
              #'(lambda ()
                  (add-hook 'after-save-hook 'update-nroff-timestamp nil t)))))

#+end_src
*** nxml-mode
#+begin_src emacs-lisp
;;;_ , nxml-mode

(use-package nxml-mode
  :commands nxml-mode
  :init
  (defalias 'xml-mode 'nxml-mode)
  :config
  (progn
    (defun my-nxml-mode-hook ()
      (bind-key "<return>" 'newline-and-indent nxml-mode-map))

    (add-hook 'nxml-mode-hook 'my-nxml-mode-hook)

    (defun tidy-xml-buffer ()
      (interactive)
      (save-excursion
        (call-process-region (point-min) (point-max) "tidy" t t nil
                             "-xml" "-i" "-wrap" "0" "-omit" "-q")))

    (bind-key "C-H" 'tidy-xml-buffer nxml-mode-map)))

#+end_src
*** org-mode
#+begin_src emacs-lisp
;;;_ , org-mode

(use-package dot-org
  :commands org-agenda-list
  :bind (("M-C"   . jump-to-org-agenda)
         ("M-m"   . org-smart-capture)
         ("M-M"   . org-inline-note)
         ("C-c a" . org-agenda)
         ("C-c S" . org-store-link)
         ("C-c l" . org-insert-link))
  :init
  (progn
    (unless running-alternate-emacs
      (run-with-idle-timer 300 t 'jump-to-org-agenda))

    (if (string-match "\\.elc\\'" load-file-name)
        (add-hook 'after-init-hook
                  #'(lambda ()
                      (org-agenda-list)
                      (org-fit-agenda-window)
                      (org-resolve-clocks))) t)))

#+end_src
*** paredit
#+begin_src emacs-lisp
;;;_ , paredit

(use-package paredit
  :commands paredit-mode
  :diminish paredit-mode
  :config
  (progn
    (use-package paredit-ext)

    (bind-key "C-M-l" 'paredit-recentre-on-sexp paredit-mode-map)

    (bind-key ")" 'paredit-close-round-and-newline paredit-mode-map)
    (bind-key "M-)" 'paredit-close-round paredit-mode-map)

    (bind-key "M-k" 'paredit-raise-sexp paredit-mode-map)
    (bind-key "M-h" 'mark-containing-sexp paredit-mode-map)
    (bind-key "M-I" 'paredit-splice-sexp paredit-mode-map)

    (unbind-key "M-r" paredit-mode-map)
    (unbind-key "M-s" paredit-mode-map)

    (bind-key "C-. d" 'paredit-forward-down paredit-mode-map)
    (bind-key "C-. B" 'paredit-splice-sexp-killing-backward paredit-mode-map)
    (bind-key "C-. C" 'paredit-convolute-sexp paredit-mode-map)
    (bind-key "C-. F" 'paredit-splice-sexp-killing-forward paredit-mode-map)
    (bind-key "C-. a" 'paredit-add-to-next-list paredit-mode-map)
    (bind-key "C-. A" 'paredit-add-to-previous-list paredit-mode-map)
    (bind-key "C-. j" 'paredit-join-with-next-list paredit-mode-map)
    (bind-key "C-. J" 'paredit-join-with-previous-list paredit-mode-map)

    (add-hook 'allout-mode-hook
              #'(lambda ()
                  (bind-key "M-k" 'paredit-raise-sexp allout-mode-map)
                  (bind-key "M-h" 'mark-containing-sexp allout-mode-map)))))

#+end_src
*** paren
#+begin_src emacs-lisp
;;;_ , paren

(unless
    (use-package mic-paren
          :init
          (paren-activate))

  (use-package paren
    :init
    (show-paren-mode 1)))

#+end_src
*** per-window-point
#+begin_src emacs-lisp
;;;_ , per-window-point

(use-package per-window-point
  :init
  (pwp-mode 1))

#+end_src
*** persistent-scratch
#+begin_src emacs-lisp
;;;_ , persistent-scratch

(use-package persistent-scratch
  :if (and window-system (not running-alternate-emacs)
           (not noninteractive)))

#+end_src
*** popup-ruler
#+begin_src emacs-lisp
;;;_ , popup-ruler

(use-package popup-ruler
  :bind (("C-. r" . popup-ruler)
         ("C-. R" . popup-ruler-vertical)))

#+end_src
*** pp-c-l
#+begin_src emacs-lisp
;;;_ , pp-c-l

(use-package pp-c-l
  :init
  (hook-into-modes 'pretty-control-l-mode '(prog-mode-hook)))

#+end_src
*** ps-print
#+begin_src emacs-lisp
;;;_ , ps-print

(use-package ps-print
  :defer t
  :config
  (progn
    (defun ps-spool-to-pdf (beg end &rest ignore)
      (interactive "r")
      (let ((temp-file (concat (make-temp-name "ps2pdf") ".pdf")))
        (call-process-region beg end (executable-find "ps2pdf")
                             nil nil nil "-" temp-file)
        (call-process (executable-find "open") nil nil nil temp-file)))

    (setq ps-print-region-function 'ps-spool-to-pdf)))

#+end_src
*** puppet-mode
#+begin_src emacs-lisp
;;;_ , puppet-mode

(use-package puppet-mode
  :mode ("\\.pp\\'" . puppet-mode)
  :config
  (use-package puppet-ext))

#+end_src
*** python-mode
#+begin_src emacs-lisp
;;;_ , python-mode

(use-package python-mode
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode)
  :config
  (progn
    (defvar python-mode-initialized nil)

    (defun my-python-mode-hook ()
      (unless python-mode-initialized
        (setq python-mode-initialized t)

        (info-lookup-add-help
         :mode 'python-mode
         :regexp "[a-zA-Z_0-9.]+"
         :doc-spec
         '(("(python)Python Module Index" )
           ("(python)Index"
            (lambda
              (item)
              (cond
               ((string-match
                 "\\([A-Za-z0-9_]+\\)() (in module \\([A-Za-z0-9_.]+\\))" item)
                (format "%s.%s" (match-string 2 item)
                        (match-string 1 item)))))))))

      (setq indicate-empty-lines t)
      (set (make-local-variable 'parens-require-spaces) nil)
      (setq indent-tabs-mode nil)

      (bind-key "C-c C-z" 'python-shell python-mode-map)
      (unbind-key "C-c c" python-mode-map))

    (add-hook 'python-mode-hook 'my-python-mode-hook)))

#+end_src
*** quickrun
#+begin_src emacs-lisp
;;;_ , quickrun

(use-package quickrun
  :bind ("C-c C-r" . quickrun))

#+end_src
*** recentf
#+begin_src emacs-lisp
;;;_ , recentf

(use-package recentf
  :if (not noninteractive)
  :init
  (progn
    (recentf-mode 1)

    (defun recentf-add-dired-directory ()
      (if (and dired-directory
               (file-directory-p dired-directory)
               (not (string= "/" dired-directory)))
          (let ((last-idx (1- (length dired-directory))))
            (recentf-add-file
             (if (= ?/ (aref dired-directory last-idx))
                 (substring dired-directory 0 last-idx)
               dired-directory)))))

    (add-hook 'dired-mode-hook 'recentf-add-dired-directory)))

#+end_src
*** repeat-insert
#+begin_src emacs-lisp
;;;_ , repeat-insert

(use-package repeat-insert
  :disabled t
  :commands (insert-patterned
             insert-patterned-2
             insert-patterned-3
             insert-patterned-4))

#+end_src
*** ruby-mode
#+begin_src emacs-lisp
;;;_ , ruby-mode

(use-package ruby-mode
  :mode ("\\.rb\\'" . ruby-mode)
  :interpreter ("ruby" . ruby-mode)
  :config
  (progn
    (use-package yari
      :init
      (progn
        (defvar yari-helm-source-ri-pages
          '((name . "RI documentation")
            (candidates . (lambda () (yari-ruby-obarray)))
            (action  ("Show with Yari" . yari))
            (candidate-number-limit . 300)
            (requires-pattern . 2)
            "Source for completing RI documentation."))

        (defun helm-yari (&optional rehash)
          (interactive (list current-prefix-arg))
          (when current-prefix-arg (yari-ruby-obarray rehash))
          (helm 'yari-helm-source-ri-pages (yari-symbol-at-point)))))

    (defun my-ruby-smart-return ()
      (interactive)
      (when (memq (char-after) '(?\| ?\" ?\'))
        (forward-char))
      (call-interactively 'newline-and-indent))

    (defun my-ruby-mode-hook ()
      (require 'inf-ruby)
      (inf-ruby-keys)

      (bind-key "<return>" 'my-ruby-smart-return ruby-mode-map)
      (bind-key "C-h C-i" 'helm-yari ruby-mode-map)

      (set (make-local-variable 'yas/fallback-behavior)
           '(apply ruby-indent-command . nil))
      (bind-key "<tab>" 'yas/expand-from-trigger-key ruby-mode-map))

    (add-hook 'ruby-mode-hook 'my-ruby-mode-hook)))

#+end_src
*** selectkey
#+begin_src emacs-lisp
;;;_ , selectkey

(use-package selectkey
  :init
  (progn
    (bind-key "C-. b" 'selectkey-select-prefix-map)

    (selectkey-define-select-key compile "c" "\\*compilation")
    (selectkey-define-select-key shell-command "o" "Shell Command")
    (selectkey-define-select-key shell "s" "\\*shell" (shell))
    (selectkey-define-select-key multi-term "t" "\\*terminal" (multi-term-next))
    (selectkey-define-select-key eshell "z" "\\*eshell" (eshell))))

#+end_src
*** session
#+begin_src emacs-lisp
;;;_ , session

(use-package session
  :if (not noninteractive)
  :load-path "site-lisp/session/lisp/"
  :init
  (progn
    (session-initialize)

    (defun remove-session-use-package-from-settings ()
      (when (string= (buffer-file-name)
                     (expand-file-name "settings.el"
                                       user-emacs-directory))
        (save-excursion
          (goto-char (point-min))
          (when (re-search-forward "^ '(session-use-package " nil t)
            (delete-region (line-beginning-position)
                           (1+ (line-end-position)))))))

    (add-hook 'before-save-hook 'remove-session-use-package-from-settings)

    ;; expanded folded secitons as required
    (defun le::maybe-reveal ()
      (when (and (or (memq major-mode  '(org-mode outline-mode))
                     (and (boundp 'outline-minor-mode)
                          outline-minor-mode))
                 (outline-invisible-p))
        (if (eq major-mode 'org-mode)
            (org-reveal)
          (show-subtree))))

    (add-hook 'session-after-jump-to-last-change-hook
              'le::maybe-reveal)

    (defun save-information ()
      (with-temp-message "Saving Emacs information..."
        (recentf-cleanup)

        (loop for func in kill-emacs-hook
              unless (memq func '(exit-gnus-on-exit server-force-stop))
              do (funcall func))

        (unless (or noninteractive
                    running-alternate-emacs
                    (eq 'listen (process-status server-process)))
          (server-start))))

    (run-with-idle-timer 300 t 'save-information)

    (if window-system
        (add-hook 'after-init-hook 'session-initialize t))))

#+end_src
*** sh-script
#+begin_src emacs-lisp
;;;_ , sh-script

(use-package sh-script
  :defer t
  :config
  (progn
    (defvar sh-script-initialized nil)
    (defun initialize-sh-script ()
      (unless sh-script-initialized
        (setq sh-script-initialized t)
        (info-lookup-add-help :mode 'shell-script-mode
                              :regexp ".*"
                              :doc-spec
                              '(("(bash)Index")))))

    (add-hook 'shell-mode-hook 'initialize-sh-script)))

#+end_src
*** sh-toggle
#+begin_src emacs-lisp
;;;_ , sh-toggle

(use-package sh-toggle
  :bind ("C-. C-z" . shell-toggle))

#+end_src
*** slime
#+begin_src emacs-lisp
;;;_ , slime

(use-package slime
  :commands (sbcl slime)
  :init
  (add-hook
   'slime-load-hook
   #'(lambda ()
       (slime-setup
        '(slime-asdf
          slime-autodoc
          slime-banner
          slime-c-p-c
          slime-editing-commands
          slime-fancy-inspector
          slime-fancy
          slime-fuzzy
          slime-highlight-edits
          slime-parse
          slime-presentation-streams
          slime-presentations
          slime-references
          slime-repl
          slime-sbcl-exts
          slime-package-fu
          slime-fontifying-fu
          slime-mdot-fu
          slime-scratch
          slime-tramp
          ;; slime-enclosing-context
          ;; slime-typeout-frame
          slime-xref-browser))

       (define-key slime-repl-mode-map [(control return)] 'other-window)

       (define-key slime-mode-map [return] 'paredit-newline)
       (define-key slime-mode-map [(control ?h) ?F] 'info-lookup-symbol)))

  :config
  (progn
    (eval-when-compile
      (defvar slime-repl-mode-map))



    (setq slime-net-coding-system 'utf-8-unix)

    (setq slime-lisp-implementations
          '((sbcl
             ("sbcl" "--core"
              "/Users/johnw/Library/Lisp/sbcl.core-with-slime-X86-64")
             :init
             (lambda (port-file _)
               (format "(swank:start-server %S)\n" port-file)))
            (ecl ("ecl" "-load" "/Users/johnw/Library/Lisp/init.lisp"))
            (clisp ("clisp" "-i" "/Users/johnw/Library/Lisp/lwinit.lisp"))))

    (setq slime-default-lisp 'sbcl)
    (setq slime-complete-symbol*-fancy t)
    (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)

    (defun sbcl (&optional arg)
      (interactive "P")
      (let ((slime-default-lisp (if arg 'sbcl64 'sbcl))
            (current-prefix-arg nil))
        (slime)))
    (defun clisp () (interactive) (let ((slime-default-lisp 'clisp)) (slime)))
    (defun ecl () (interactive) (let ((slime-default-lisp 'ecl)) (slime)))

    (defun start-slime ()
      (interactive)
      (unless (slime-connected-p)
        (save-excursion (slime))))

    (add-hook 'slime-mode-hook 'start-slime)
    (add-hook 'slime-load-hook #'(lambda () (require 'slime-fancy)))
    (add-hook 'inferior-lisp-mode-hook #'(lambda () (inferior-slime-mode t)))

    (use-package hyperspec
      :init
      (setq common-lisp-hyperspec-root
            "/opt/local/share/doc/lisp/HyperSpec-7-0/HyperSpec/"))))

#+end_src
*** smart-compile
#+begin_src emacs-lisp
;;;_ , smart-compile

(use-package smart-compile
  :commands smart-compile
  :bind (("C-c c" . smart-compile)
         ("A-n"   . next-error)
         ("A-p"   . previous-error))
  :init
  (progn
    (defun show-compilation ()
      (interactive)
      (let ((compile-buf
             (catch 'found
               (dolist (buf (buffer-list))
                 (if (string-match "\\*compilation\\*" (buffer-name buf))
                     (throw 'found buf))))))
        (if compile-buf
            (switch-to-buffer-other-window compile-buf)
          (call-interactively 'compile))))

    (bind-key "M-O" 'show-compilation)))

#+end_src
*** smerge-mode
#+begin_src emacs-lisp
;;;_ , smerge-mode

(use-package smerge-mode
  :commands (smerge-mode smerge-command-prefix)
  :init
  (setq smerge-command-prefix (kbd "C-. C-.")))

#+end_src
*** stopwatch
#+begin_src emacs-lisp
;;;_ , stopwatch

(use-package stopwatch
  :bind ("<f8>" . stopwatch))

#+end_src
*** sunrise-commander
#+begin_src emacs-lisp
;;;_ , sunrise-commander

(use-package sunrise-commander
  :disabled t
  :commands (sunrise sunrise-cd)
  :init
  (progn
    (defun my-activate-sunrise ()
      (interactive)
      (let ((sunrise-exists
             (loop for buf in (buffer-list)
                   when (string-match " (Sunrise)$" (buffer-name buf))
                   return buf)))
        (if sunrise-exists
            (call-interactively 'sunrise)
          (sunrise "~/dl/" "~/Archives/"))))

    (bind-key "C-c j" 'my-activate-sunrise)
    (bind-key "C-c C-j" 'sunrise-cd))

  :config
  (progn
    (require 'sunrise-x-modeline)
    (require 'sunrise-x-tree)
    (require 'sunrise-x-tabs)

    (bind-key "/" 'sr-sticky-isearch-forward sr-mode-map)
    (bind-key "<backspace>" 'sr-scroll-quick-view-down sr-mode-map)
    (bind-key "C-x t" 'sr-toggle-truncate-lines sr-mode-map)

    (bind-key "q" 'sr-history-prev sr-mode-map)
    (bind-key "z" 'sr-quit sr-mode-map)

    (unbind-key "C-e" sr-mode-map)
    (unbind-key "C-p" sr-tabs-mode-map)
    (unbind-key "C-n" sr-tabs-mode-map)
    (unbind-key "M-<backspace>" sr-term-line-minor-mode-map)

    (bind-key "M-[" 'sr-tabs-prev sr-tabs-mode-map)
    (bind-key "M-]" 'sr-tabs-next sr-tabs-mode-map)

    (defun sr-browse-file (&optional file)
      "Display the selected file with the default appication."
      (interactive)
      (setq file (or file (dired-get-filename)))
      (save-selected-window
        (sr-select-viewer-window)
        (let ((buff (current-buffer))
              (fname (if (file-directory-p file)
                         file
                       (file-name-nondirectory file)))
              (app (cond
                    ((eq system-type 'darwin)       "open %s")
                    ((eq system-type 'windows-nt)   "open %s")
                    (t                              "xdg-open %s"))))
          (start-process-shell-command "open" nil (format app file))
          (unless (eq buff (current-buffer))
            (sr-scrollable-viewer (current-buffer)))
          (message "Opening \"%s\" ..." fname))))

    (defun sr-goto-dir (dir)
      "Change the current directory in the active pane to the given one."
      (interactive (list (progn
                           (require 'lusty-explorer)
                           (lusty-read-directory))))
      (if sr-goto-dir-function
          (funcall sr-goto-dir-function dir)
        (unless (and (eq major-mode 'sr-mode)
                     (sr-equal-dirs dir default-directory))
          (if (and sr-avfs-root
                   (null (posix-string-match "#" dir)))
              (setq dir (replace-regexp-in-string
                         (expand-file-name sr-avfs-root) "" dir)))
          (sr-save-aspect
           (sr-within dir (sr-alternate-buffer (dired dir))))
          (sr-history-push default-directory)
          (sr-beginning-of-buffer))))))

#+end_src
*** tablegen-mode
#+begin_src emacs-lisp
;;;_ , tablegen-mode

(use-package tablegen-mode
  :description "\
  This mode is used for editing .td files in the LLVM/Clang source code."
  :mode ("\\.td\\'" . tablegen-mode))

#+end_src
*** texinfo
#+begin_src emacs-lisp
;;;_ , texinfo

(use-package texinfo
  :defines texinfo-section-list
  :mode ("\\.texi\\'" . texinfo-mode)
  :config
  (progn
    (defun my-texinfo-mode-hook ()
      (dolist (mapping '((?b . "emph")
                         (?c . "code")
                         (?s . "samp")
                         (?d . "dfn")
                         (?o . "option")
                         (?x . "pxref")))
        (local-set-key (vector (list 'alt (car mapping)))
                       `(lambda () (interactive)
                          (TeX-insert-macro ,(cdr mapping))))))

    (add-hook 'texinfo-mode-hook 'my-texinfo-mode-hook)

    (defun texinfo-outline-level ()
      ;; Calculate level of current texinfo outline heading.
      (require 'texinfo)
      (save-excursion
        (if (bobp)
            0
          (forward-char 1)
          (let* ((word (buffer-substring-no-properties
                        (point) (progn (forward-word 1) (point))))
                 (entry (assoc word texinfo-section-list)))
            (if entry
                (nth 1 entry)
              5)))))))

#+end_src
*** vkill
#+begin_src emacs-lisp
;;;_ , vkill

(use-package vkill
  :commands vkill
  :init
  (progn
    (defun vkill-and-helm-occur ()
      (interactive)
      (vkill)
      (call-interactively #'helm-occur))

    (bind-key "C-x L" 'vkill-and-helm-occur))

  :config
  (setq vkill-show-all-processes t))

#+end_src
*** w3m
#+begin_src emacs-lisp
;;;_ , w3m

(use-package w3m
  :commands (w3m-search w3m-find-file)
  :bind (("C-. u"   . w3m-browse-url)
         ("C-. U"   . w3m-browse-url-new-session)
         ("C-. A-u" . w3m-browse-chrome-url-new-session))
  :init
  (progn
    (setq w3m-command "/opt/local/bin/w3m")

    (setq w3m-coding-system 'utf-8
          w3m-file-coding-system 'utf-8
          w3m-file-name-coding-system 'utf-8
          w3m-input-coding-system 'utf-8
          w3m-output-coding-system 'utf-8
          w3m-terminal-coding-system 'utf-8)

    (add-hook 'w3m-mode-hook 'w3m-link-numbering-mode)

    (autoload 'w3m-session-crash-recovery-remove "w3m-session")

    (defun show-browser ()
      (interactive)
      (let ((w3m-buf
             (catch 'found
               (dolist (buf (buffer-list))
                 (if (string-match "\\*w3m" (buffer-name buf))
                     (throw 'found buf))))))
        (if w3m-buf
            (switch-to-buffer-other-window w3m-buf)
          (call-interactively 'w3m-find-file))))

    (bind-key "C-. w" 'show-browser)

    (defun wikipedia-query (term)
      (interactive (list (read-string "Wikipedia search: " (word-at-point))))
      (require 'w3m-search)
      (w3m-search "en.wikipedia" term))

    (eval-when-compile
      (autoload 'w3m-search-escape-query-string "w3m-search"))

    (defun wolfram-alpha-query (term)
      (interactive (list (read-string "Ask Wolfram Alpha: " (word-at-point))))
      (require 'w3m-search)
      (w3m-browse-url (concat "http://m.wolframalpha.com/input/?i="
                              (w3m-search-escape-query-string term))))

    (defun goto-emacswiki ()
      (interactive)
      (w3m-browse-url "http://www.emacswiki.org"))

    (defun w3m-browse-url-new-session (url)
      (interactive (progn
                     (require 'browse-url)
                     (browse-url-interactive-arg "Emacs-w3m URL: ")))
      (w3m-browse-url url t))

    (defun w3m-browse-chrome-url-new-session ()
      (interactive)
      (let ((url (do-applescript
                  (string-to-multibyte "tell application \"Google Chrome\"
  URL of active tab of front window
  end tell"))))
        (w3m-browse-url (substring url 1 (1- (length url))) t)))

    (bind-key "A-M-e" 'goto-emacswiki)
    (bind-key "A-M-g" 'w3m-search)
    (bind-key "A-M-w" 'wikipedia-query))

  :config
  (let (proxy-host proxy-port)
    (with-temp-buffer
      (shell-command "scutil --proxy" (current-buffer))

      (when (re-search-forward "HTTPPort : \\([0-9]+\\)" nil t)
        (setq proxy-port (match-string 1)))
      (when (re-search-forward "HTTPProxy : \\(\\S-+\\)" nil t)
        (setq proxy-host (match-string 1))))

    (if (and proxy-host proxy-port)
        (setq w3m-command-arguments
              (nconc w3m-command-arguments
                     (list "-o" (format "http_proxy=http://%s:%s/"
                                        proxy-host proxy-port)))))

    (use-package w3m-type-ahead
      :requires w3m
      :init
      (add-hook 'w3m-mode-hook 'w3m-type-ahead-mode))

    (add-hook 'w3m-display-hook
              (lambda (url)
                (let ((buffer-read-only nil))
                  (delete-trailing-whitespace))))

    (defun my-w3m-linknum-follow ()
      (interactive)
      (w3m-linknum-follow))

    (bind-key "k" 'w3m-delete-buffer w3m-mode-map)
    (bind-key "i" 'w3m-view-previous-page w3m-mode-map)
    (bind-key "p" 'w3m-previous-anchor w3m-mode-map)
    (bind-key "n" 'w3m-next-anchor w3m-mode-map)

    (defun dka-w3m-textarea-hook()
      (save-excursion
        (while (re-search-forward "\r\n" nil t)
          (replace-match "\n" nil nil))
        (delete-other-windows)))

    (add-hook 'w3m-form-input-textarea-mode-hook 'dka-w3m-textarea-hook)

    (bind-key "<return>" 'w3m-view-url-with-external-browser
              w3m-minor-mode-map)
    (bind-key "S-<return>" 'w3m-safe-view-this-url w3m-minor-mode-map)))

#+end_src
*** wcount-mode
#+begin_src emacs-lisp
;;;_ , wcount-mode

(use-package wcount-mode
  :commands wcount)

#+end_src
*** whitespace
#+begin_src emacs-lisp
;;;_ , whitespace

(use-package whitespace
  :diminish (global-whitespace-mode
             whitespace-mode
             whitespace-newline-mode)
  :commands (whitespace-buffer
             whitespace-cleanup
             whitespace-mode)
  :init
  (progn
    (hook-into-modes 'whitespace-mode
                     '(prog-mode-hook
                       c-mode-common-hook))

    (defun normalize-file ()
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (whitespace-cleanup)
        (delete-trailing-whitespace)
        (goto-char (point-max))
        (delete-blank-lines)
        (set-buffer-file-coding-system 'unix)
        (goto-char (point-min))
        (while (re-search-forward "\r$" nil t)
          (replace-match ""))
        (set-buffer-file-coding-system 'utf-8)
        (let ((require-final-newline t))
          (save-buffer))))

    (defun maybe-turn-on-whitespace ()
      "Depending on the file, maybe clean up whitespace."
      (let ((file (expand-file-name ".clean"))
            parent-dir)
        (while (and (not (file-exists-p file))
                    (progn
                      (setq parent-dir
                            (file-name-directory
                             (directory-file-name
                              (file-name-directory file))))
                      ;; Give up if we are already at the root dir.
                      (not (string= (file-name-directory file)
                                    parent-dir))))
          ;; Move up to the parent dir and try again.
          (setq file (expand-file-name ".clean" parent-dir)))
        ;; If we found a change log in a parent, use that.
        (when (and (file-exists-p file)
                   (not (file-exists-p ".noclean"))
                   (not (and buffer-file-name
                             (string-match "\\.texi\\'" buffer-file-name))))
          (add-hook 'write-contents-hooks
                    #'(lambda ()
                        (ignore (whitespace-cleanup))) nil t)
          (whitespace-cleanup))))

    (add-hook 'find-file-hooks 'maybe-turn-on-whitespace t))

  :config
  (progn
    (remove-hook 'find-file-hooks 'whitespace-buffer)
    (remove-hook 'kill-buffer-hook 'whitespace-buffer)))

#+end_src
*** winner
#+begin_src emacs-lisp
;;;_ , winner

(use-package winner
  :diminish winner-mode
  :if (not noninteractive)
  :init
  (progn
    (winner-mode 1)

    (bind-key "M-N" 'winner-redo)
    (bind-key "M-P" 'winner-undo)))

#+end_src
*** workgroups
#+begin_src emacs-lisp
;;;_ , workgroups

(use-package workgroups
  :diminish workgroups-mode
  :if (not noninteractive)
  :init
  (progn
    (workgroups-mode 1)

    (let ((workgroups-file (expand-file-name "workgroups" user-data-directory)))
      (if (file-readable-p workgroups-file)
          (wg-load workgroups-file)))

    (bind-key "C-\\" 'wg-switch-to-previous-workgroup wg-map)
    (bind-key "\\" 'toggle-input-method wg-map)))

#+end_src
*** wrap-region
#+begin_src emacs-lisp
;;;_ , wrap-region

(use-package wrap-region
  :commands wrap-region-mode
  :diminish wrap-region-mode
  :config
  (wrap-region-add-wrappers
   '(("$" "$")
     ("/" "/" nil ruby-mode)
     ("/* " " */" "#" (java-mode javascript-mode css-mode c-mode c++-mode))
     ("`" "`" nil (markdown-mode ruby-mode shell-script-mode)))))

#+end_src
*** write-room
#+begin_src emacs-lisp
;;;_ , write-room

(defun write-room ()
  "Make a frame without any bling."
  (interactive)
  ;; to restore:
  ;; (setq mode-line-format (default-value 'mode-line-format))
  (let ((frame (make-frame
                '((minibuffer . nil)
                  (vertical-scroll-bars . nil)
                  (left-fringe . 0); no fringe
                  (right-fringe . 0)
                  (background-mode . dark)
                  (background-color . "cornsilk")
                  (foreground-color . "black")
                  (cursor-color . "green")
                  (border-width . 0)
                  (border-color . "black"); should be unnecessary
                  (internal-border-width . 64); whitespace!
                  (cursor-type . box)
                  (menu-bar-lines . 0)
                  (tool-bar-lines . 0)
                  (fullscreen . fullboth)  ; this should work
                  (unsplittable . t)))))
    (select-frame frame)
    (find-file "~/Documents/Notes.txt")
    (setq mode-line-format nil
          fill-column 65)
    (set-window-margins (selected-window) 50 50)))

#+end_src
*** yasnippet
#+begin_src emacs-lisp
;;;_ , yasnippet

(use-package yasnippet
  :if (not noninteractive)
  :diminish yas/minor-mode
  :commands (yas/minor-mode yas/expand)
  :mode ("/\\.emacs\\.d/snippets/" . snippet-mode)
  :init
  (hook-into-modes #'(lambda () (yas/minor-mode 1))
                   '(prog-mode-hook
                     org-mode-hook
                     ruby-mode-hook
                     message-mode-hook
                     gud-mode-hook
                     erc-mode-hook))
  :config
  (progn
    (yas/initialize)
    (yas/load-directory (expand-file-name "snippets/" user-emacs-directory))

    (bind-key "<tab>" 'yas/next-field-or-maybe-expand yas/keymap)

    (defun yas/new-snippet (&optional choose-instead-of-guess)
      (interactive "P")
      (let ((guessed-directories (yas/guess-snippet-directories)))
        (switch-to-buffer "*new snippet*")
        (erase-buffer)
        (kill-all-local-variables)
        (snippet-mode)
        (set (make-local-variable 'yas/guessed-modes)
             (mapcar #'(lambda (d)
                         (intern (yas/table-name (car d))))
                     guessed-directories))
        (unless (and choose-instead-of-guess
                     (not (y-or-n-p "Insert a snippet with useful headers? ")))
          (yas/expand-snippet "\
  # -*- mode: snippet -*-
  # name: $1
  # --
  $0"))))

    (bind-key "C-c y TAB" 'yas/expand)
    (bind-key "C-c y n" 'yas/new-snippet)
    (bind-key "C-c y f" 'yas/find-snippets)
    (bind-key "C-c y r" 'yas/reload-all)
    (bind-key "C-c y v" 'yas/visit-snippet-file)))

#+end_src
*** yaoddmuse
#+begin_src emacs-lisp
;;;_ , yaoddmuse

(use-package yaoddmuse
  :bind (("C-c w f" . yaoddmuse-browse-page-default)
         ("C-c w e" . yaoddmuse-edit-default)
         ("C-c w p" . yaoddmuse-post-library-default)))

#+end_src
*** zencoding-mode
#+begin_src emacs-lisp
  ;;;_ , zencoding-mode
  
  (use-package zencoding-mode
    :commands zencoding-mode
    :init
    (progn
      (add-hook 'nxml-mode-hook 'zencoding-mode)
      (add-hook 'html-mode-hook 'zencoding-mode)
      (add-hook 'html-mode-hook
                #'(lambda ()
                  (bind-key "<return>" 'newline-and-indent html-mode-map))))
  
    :config
    (progn
      (defvar zencoding-mode-keymap (make-sparse-keymap))
      (bind-key "C-c C-c" 'zencoding-expand-line zencoding-mode-keymap)))
  
#+end_src

* endboot
:PROPERTIES:
:tangle:   yes
:END:
** Post initialization
#+begin_src emacs-lisp
;;;_. Post initialization

(when window-system
  (let ((elapsed (float-time (time-subtract (current-time)
                                            emacs-start-time))))
    (message "Loading %s...done (%.3fs)" load-file-name elapsed))

  (add-hook 'after-init-hook
            `(lambda ()
               (let ((elapsed (float-time (time-subtract (current-time)
                                                         emacs-start-time))))
                 (message "Loading %s...done (%.3fs) [after-init]"
                          ,load-file-name elapsed)))
            t))

#+end_src
  


* debugs and tools
:PROPERTIES:
:tangle:   no
:END:
** jw init.el hack attack
:PROPERTIES:
:END:
- regexp-search-replace
  
  #+begin_example
  ^;;;_[,. ]+\(.*\)$  
  #+end_example

  #+begin_example
  '#+end_src
  '** \1
  '#+begin_src emacs-lisp
  '\&  
  #+end_example

- clean-up extra end_src and insert last one
- adjust sections manually (allout format = programmatically possible too)
- add column properties thingy to add tangle option
- turn tangle on


** current message bugz

- prints out
  (table (quote (("stuff" "meta.org" "") (".emacs.d" "README.org" "") ("stuff" "org" "refile.org") ("stuff" "org" "bugz.org") ("stuff" "org" "snipz.org") ("stuff" "org" "org.org") ("stuff" "emacs" "emacs.org") ("stuff" "sys" "sys.org") ("stuff" "biz" "scarce.org") ("stuff" "site" "landing.org") ("stuff" "site" "scarcecapital.org") ("stuff" "content" "life.org") ("stuff" "content" "writing.org") ("stuff" "dev" "webdev.org") ("stuff" "emacs" "bindings.org") ("stuff" "sys" "git.org") ("stuff" "factor" "factor.org") ("stuff" "dev" "jsdev.org") ("stuff" "content" "ideas.org") ("git" "emfx_R" "emfx.org") ("git" "emfx_R" "volatility.org") ("git" "emfx_R" "rdev.org") ("git" "emfx_R" "xkcd.org") ("emfx" "README.org" ""))))

  (table (quote (("/Users/tonyday/.emacs.d/info") ("/usr/share/info/"))))

  at misc
  (yaml-mode clojure-mode ido paren anything-autoloads auctex-autoloads
  tex-site info cloj



#+begin_src emacs-lisp
  (print (loop for f in load-path
               collect
               (list f)))
#+end_src

#+RESULTS:
| src                                                                                        |
| /Users/tonyday/.emacs.d/elpa/ess-5.14/                                                     |
| /Users/tonyday/.emacs.d/src/yasnippet                                                      |
| /Users/tonyday/.emacs.d/elpa/anything-1.287                                                |
| /Users/tonyday/.emacs.d/elpa/auctex-11.86/                                                 |
| /Users/tonyday/.emacs.d/elpa/auctex-11.86                                                  |
| /Users/tonyday/.emacs.d/elpa/clojure-mode-1.11.5                                           |
| /Users/tonyday/.emacs.d/elpa/elisp-slime-nav-0.2                                           |
| /Users/tonyday/.emacs.d/elpa/ess-5.14                                                      |
| /Users/tonyday/.emacs.d/elpa/ess-smart-underscore-0.73                                     |
| /Users/tonyday/.emacs.d/elpa/find-file-in-project-3.2                                      |
| /Users/tonyday/.emacs.d/elpa/htmlize-1.39                                                  |
| /Users/tonyday/.emacs.d/elpa/js-comint-0.0.1                                               |
| /Users/tonyday/.emacs.d/elpa/js2-mode-20090814                                             |
| /Users/tonyday/.emacs.d/elpa/magithub-0.2                                                  |
| /Users/tonyday/.emacs.d/elpa/json-1.2                                                      |
| /Users/tonyday/.emacs.d/elpa/org-magit-0.2.0                                               |
| /Users/tonyday/.emacs.d/elpa/magit-1.1.1                                                   |
| /Users/tonyday/.emacs.d/elpa/org2blog-0.5                                                  |
| /Users/tonyday/.emacs.d/elpa/paredit-22                                                    |
| /Users/tonyday/.emacs.d/elpa/slime-20100404.1                                              |
| /Users/tonyday/.emacs.d/elpa/smex-1.1.4                                                    |
| /Users/tonyday/.emacs.d/elpa/xml-rpc-1.6.8                                                 |
| /Users/tonyday/.emacs.d/elpa/yaml-mode-0.0.7                                               |
| /Users/tonyday/.emacs.d/elpa/yasnippet-bundle-0.6.1                                        |
| /Users/tonyday/.emacs.d/elpa/zenburn-theme-1.5                                             |
| /Users/tonyday/.emacs.d/                                                                   |
| /Users/tonyday/.emacs.d/src                                                                |
| /Users/tonyday/.emacs.d/src/elnode                                                         |
| /Users/tonyday/.emacs.d/src/o-blog                                                         |
| /Users/tonyday/.emacs.d/src/org-ehtml                                                      |
| /Users/tonyday/.emacs.d/src/org-mac-protocol                                               |
| /Users/tonyday/.emacs.d/src/org-mode                                                       |
| /Users/tonyday/.emacs.d/src/org2blog                                                       |
| /Users/tonyday/.emacs.d/src/elnode/examples                                                |
| /Users/tonyday/.emacs.d/src/elnode/test_docroot                                            |
| /Users/tonyday/.emacs.d/src/o-blog/Font-Awesome                                            |
| /Users/tonyday/.emacs.d/src/o-blog/bootstrap                                               |
| /Users/tonyday/.emacs.d/src/o-blog/example                                                 |
| /Users/tonyday/.emacs.d/src/o-blog/less.js                                                 |
| /Users/tonyday/.emacs.d/src/o-blog/templates                                               |
| /Users/tonyday/.emacs.d/src/org-ehtml/src                                                  |
| /Users/tonyday/.emacs.d/src/org-ehtml/test                                                 |
| /Users/tonyday/.emacs.d/src/org-mac-protocol/orgQSLib                                      |
| /Users/tonyday/.emacs.d/src/org-mode/contrib                                               |
| /Users/tonyday/.emacs.d/src/org-mode/etc                                                   |
| /Users/tonyday/.emacs.d/src/org-mode/lisp                                                  |
| /Users/tonyday/.emacs.d/src/org-mode/mk                                                    |
| /Users/tonyday/.emacs.d/src/org-mode/testing                                               |
| /Users/tonyday/.emacs.d/src/o-blog/example/assets                                          |
| /Users/tonyday/.emacs.d/src/o-blog/example/out                                             |
| /Users/tonyday/.emacs.d/src/o-blog/templates/style                                         |
| /Users/tonyday/.emacs.d/src/org-ehtml/test/examples                                        |
| /Users/tonyday/.emacs.d/src/org-ehtml/test/lisp                                            |
| /Users/tonyday/.emacs.d/src/org-mode/contrib/babel                                         |
| /Users/tonyday/.emacs.d/src/org-mode/contrib/lisp                                          |
| /Users/tonyday/.emacs.d/src/org-mode/contrib/scripts                                       |
| /Users/tonyday/.emacs.d/src/org-mode/etc/schema                                            |
| /Users/tonyday/.emacs.d/src/org-mode/etc/styles                                            |
| /Users/tonyday/.emacs.d/src/org-mode/testing/examples                                      |
| /Users/tonyday/.emacs.d/src/org-mode/testing/jump                                          |
| /Users/tonyday/.emacs.d/src/org-mode/testing/lisp                                          |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/assets                                      |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/content                                     |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/style                                       |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/tags                                        |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/tips                                        |
| /Users/tonyday/.emacs.d/src/o-blog/templates/style/Font-Awesome                            |
| /Users/tonyday/.emacs.d/src/o-blog/templates/style/bootstrap                               |
| /Users/tonyday/.emacs.d/src/o-blog/templates/style/font                                    |
| /Users/tonyday/.emacs.d/src/o-blog/templates/style/js                                      |
| /Users/tonyday/.emacs.d/src/o-blog/templates/style/less                                    |
| /Users/tonyday/.emacs.d/src/org-mode/contrib/babel/langs                                   |
| /Users/tonyday/.emacs.d/src/org-mode/contrib/scripts/staticmathjax                         |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/content/2012                                |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/style/Font-Awesome                          |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/style/bootstrap                             |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/style/font                                  |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/style/js                                    |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/style/less                                  |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/tips/2012                                   |
| /Users/tonyday/.emacs.d/src/o-blog/templates/style/Font-Awesome/font                       |
| /Users/tonyday/.emacs.d/src/o-blog/templates/style/Font-Awesome/less                       |
| /Users/tonyday/.emacs.d/src/o-blog/templates/style/bootstrap/img                           |
| /Users/tonyday/.emacs.d/src/o-blog/templates/style/bootstrap/js                            |
| /Users/tonyday/.emacs.d/src/o-blog/templates/style/bootstrap/less                          |
| /Users/tonyday/.emacs.d/src/org-mode/contrib/scripts/staticmathjax/chrome                  |
| /Users/tonyday/.emacs.d/src/org-mode/contrib/scripts/staticmathjax/defaults                |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/content/2012/10                             |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/style/Font-Awesome/font                     |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/style/Font-Awesome/less                     |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/style/bootstrap/img                         |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/style/bootstrap/js                          |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/style/bootstrap/less                        |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/tips/2012/01                                |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/tips/2012/02                                |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/tips/2012/05                                |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/tips/2012/08                                |
| /Users/tonyday/.emacs.d/src/org-mode/contrib/scripts/staticmathjax/chrome/content          |
| /Users/tonyday/.emacs.d/src/org-mode/contrib/scripts/staticmathjax/defaults/preferences    |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/tips/2012/01/07_example-of-some-org-syntax  |
| /Users/tonyday/.emacs.d/src/o-blog/example/out/tips/2012/08/21_adding-an-image-into-a-post |
| /Users/tonyday/.emacs.d/src/org-mode/lisp                                                  |
| /usr/local/share/emacs/site-lisp                                                           |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp                                      |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/vc                                   |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/url                                  |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/textmodes                            |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/progmodes                            |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/play                                 |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/org                                  |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/nxml                                 |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/net                                  |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/mh-e                                 |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/mail                                 |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/language                             |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/international                        |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/gnus                                 |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/eshell                               |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/erc                                  |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/emulation                            |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/emacs-lisp                           |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/cedet                                |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/calendar                             |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/calc                                 |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/obsolete                             |
| /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/leim                                      |



** jw testbed
:PROPERTIES:
:OPEN:     [2012-09-16 Sun 13:23]
:LAST:     NEXT [2012-09-16 Sun 13:23]
:END:

- test loading init.el from another sub-directory.
 #+begin_src sh
   /Applications/Emacs.app/Contents/MacOS/Emacs -q -l ~/.emacs.d/repos/jwiegley/init.el --debug-init     
 #+end_src

**** notes

***** cycle 1:

- nreverse: Opening directory: no such file or directory, /Users/tonyday/.emacs.d/site-lisp/
  Expecting .emacs.d to be setup correctly

- to refresh all submodules (in the repo you are in)
  
Unable to checkout 'b47d801d4e1ff67323eda4d602e78c31fbc5a08a' in submodule path 'lib/fuzzy-el'
Unable to checkout '6862a4732a3f3eee25aba5bf2548228cd9cadcaf' in submodule path 'lib/popup-el'



***** cycle 2:

load-path working and submodules updated

no errors

1.29 secs for init.el
3.00 secs for highlight-cl???

- [X] adopt username.el convention as per starter-kit
- [X] exact directory list


#+begin_src emacs-lisp
  (setq canned (nreverse
       (list
        user-emacs-directory

        "override/bbdb/lisp/"
        "override/gnus/contrib/"
        "override/gnus/lisp/"
        "override/org-mode/contrib/lisp/"
        "override/org-mode/lisp/"
        "override/tramp/lisp/"

        ;; Packages located elsewhere on the system...
        "~/src/ledger/lisp/"

        "/usr/local/share/emacs/site-lisp/"
        "/opt/local/share/emacs/site-lisp/"
        "/opt/local/share/doc/git-core/contrib/emacs/"
        "/Users/johnw/Archives/Languages/Ruby/Sources/ruby/misc/"
        "/opt/local/share/texmf-texlive-dist/doc/latex/latex2e-help-texinfo/"
        )))
#+end_src

#+results:
| /opt/local/share/texmf-texlive-dist/doc/latex/latex2e-help-texinfo/ | /Users/johnw/Archives/Languages/Ruby/Sources/ruby/misc/ | /opt/local/share/doc/git-core/contrib/emacs/ | /opt/local/share/emacs/site-lisp/ | /usr/local/share/emacs/site-lisp/ | ~/src/ledger/lisp/ | override/tramp/lisp/ | override/org-mode/lisp/ | override/org-mode/contrib/lisp/ | override/gnus/lisp/ | override/gnus/contrib/ | override/bbdb/lisp/ | /Users/tonyday/dotemacs-mashup/jwiegley/ |


new code should produce exactly the same


#+begin_src emacs-lisp
  (setq newlist (nreverse   
                 (append (list user-emacs-directory)
                         override-dirs 
                         misc-dirs
                         )))
#+end_src

#+results:
| override/tramp/lisp/ | override/org-mode/lisp/ | override/org-mode/contrib/lisp/ | override/gnus/lisp/ | override/gnus/contrib/ | override/bbdb/lisp/ | /Users/tonyday/dotemacs-mashup/jwiegley/ |


  
  #+begin_src emacs-lisp
    (equal newlist canned)
  #+end_src

#+results:
: t


#+begin_src emacs-lisp
  (setq misc-dirs nil)
#+end_src

#+results:

***** cycle 3

runner: No runner config file found. Please run runner-add first.
runner: No runner config file found. Please run runner-add first.
insert-directory: Listing directory failed but `access-file' worked

(setq dired-use-ls-dired nil)


***** unit test result

#+begin_example
For information about GNU Emacs and the GNU system, type C-h C-a.
Loading /Users/tonyday/.emacs.d/repos/jwiegley/init.el...
Loading /Users/tonyday/.emacs.d/repos/jwiegley/tonyday.el (source)...done
Loading /Users/tonyday/.emacs.d/repos/jwiegley/load-path.el (source)...done
Loading /Users/tonyday/.emacs.d/repos/jwiegley/settings.el (source)...
[yas] Reloaded everything....
Loading /Users/tonyday/.emacs.d/repos/jwiegley/settings.el (source)...done
Configuring package abbrev...done
Loading package browse-kill-ring+...done (0.027s)
Loading package dvc-autoloads...
Could not load package dvc-autoloads
Loading package dvc-autoloads...done (0.031s)
Loading package edit-server...done (0.021s)
Loading package helm-config...
Loading package helm-commands...done (0.013s)
Loading package helm-config...done (0.082s)
Loading package ido...
Loading package ido-hacks...done
Loading package ido-springboard...done (0.018s)
Loading package ido...done (0.071s)
Loading package info-look...
Configuring package info...done
Loading package info-look...done (0.073s)
Loading package lisp-mode...done (0.016s)
Loading package mule...done (0.026s)
Loading package mic-paren...done (0.018s)
Loading package per-window-point...
Per-window-point mode enabled
Loading package per-window-point...done (0.033s)
Loading package persistent-scratch...done (0.020s)
Loading package pp-c-l...done (0.021s)
Loading package recentf...
Loading /Users/tonyday/.emacs.d/data/recentf...done
Loading package recentf...done (0.051s)
Loading package selectkey...done (0.023s)
Loading package session...
Loading /Users/tonyday/.emacs.d/data/session...done
Loading package session...done (0.048s)
Loading package winner...done (0.032s)
Loading package workgroups...done (0.036s)
Configuring package yasnippet...done (0.054s)
Loading /Users/tonyday/.emacs.d/repos/jwiegley/init.el...done (1.758s)
Package assoc is obsolete!
byte-code: Beginning of buffer [2 times]
Mark set  
#+end_example



** test funct

#+begin_src emacs-lisp
  (defun test-funk ()
    (setq src-dir (expand-file-name "src" user-emacs-directory))
    ;; add the src directory to the load path
    (add-to-list 'load-path src-dir user-emacs-directory)
    ;; load all subdirectories
      (when (file-exists-p src-dir)
        (let ((default-directory src-dir))
          (normal-top-level-add-subdirs-to-load-path))))
#+end_src

#+results:
: test-funk

#+begin_src emacs-lisp
  (defun test-funk ()
    (setq src-dir (expand-file-name "src" user-emacs-directory))
     (when (file-exists-p src-dir)
        (add-to-list 'load-path src-dir)
        (mapc #'sk-load
              (remove-duplicates
               (mapcar #'remove-extension
                       (directory-files user-dir t ".*\.\\(org\\|el\\)\\(\\.gpg\\)?$"))
               :test #'string=))))))
#+end_src




#+results:
: test-funk

#+begin_src emacs-lisp
  (test-funk)
#+end_src

#+results:
| /Users/tonyday/.emacs.d/src/elnode | /Users/tonyday/.emacs.d/src/o-blog | /Users/tonyday/.emacs.d/src/org-ehtml | /Users/tonyday/.emacs.d/src/org-mac-protocol | /Users/tonyday/.emacs.d/src/org-mode | /Users/tonyday/.emacs.d/src/org2blog | /Users/tonyday/.emacs.d/src/elnode/examples | /Users/tonyday/.emacs.d/src/elnode/test_docroot | /Users/tonyday/.emacs.d/src/o-blog/Font-Awesome | /Users/tonyday/.emacs.d/src/o-blog/bootstrap | /Users/tonyday/.emacs.d/src/o-blog/example | /Users/tonyday/.emacs.d/src/o-blog/less.js | /Users/tonyday/.emacs.d/src/o-blog/templates | /Users/tonyday/.emacs.d/src/org-ehtml/src | /Users/tonyday/.emacs.d/src/org-ehtml/test | /Users/tonyday/.emacs.d/src/org-mac-protocol/orgQSLib | /Users/tonyday/.emacs.d/src/org-mode/contrib | /Users/tonyday/.emacs.d/src/org-mode/etc | /Users/tonyday/.emacs.d/src/org-mode/lisp | /Users/tonyday/.emacs.d/src/org-mode/mk | /Users/tonyday/.emacs.d/src/org-mode/testing | /Users/tonyday/.emacs.d/src/o-blog/example/assets | /Users/tonyday/.emacs.d/src/o-blog/example/out | /Users/tonyday/.emacs.d/src/o-blog/templates/style | /Users/tonyday/.emacs.d/src/org-ehtml/test/examples | /Users/tonyday/.emacs.d/src/org-ehtml/test/lisp | /Users/tonyday/.emacs.d/src/org-mode/contrib/babel | /Users/tonyday/.emacs.d/src/org-mode/contrib/lisp | /Users/tonyday/.emacs.d/src/org-mode/contrib/scripts | /Users/tonyday/.emacs.d/src/org-mode/etc/schema | /Users/tonyday/.emacs.d/src/org-mode/etc/styles | /Users/tonyday/.emacs.d/src/org-mode/testing/examples | /Users/tonyday/.emacs.d/src/org-mode/testing/jump | /Users/tonyday/.emacs.d/src/org-mode/testing/lisp | /Users/tonyday/.emacs.d/src/o-blog/example/out/assets | /Users/tonyday/.emacs.d/src/o-blog/example/out/content | /Users/tonyday/.emacs.d/src/o-blog/example/out/style | /Users/tonyday/.emacs.d/src/o-blog/example/out/tags | /Users/tonyday/.emacs.d/src/o-blog/example/out/tips | /Users/tonyday/.emacs.d/src/o-blog/templates/style/Font-Awesome | /Users/tonyday/.emacs.d/src/o-blog/templates/style/bootstrap | /Users/tonyday/.emacs.d/src/o-blog/templates/style/font | /Users/tonyday/.emacs.d/src/o-blog/templates/style/js | /Users/tonyday/.emacs.d/src/o-blog/templates/style/less | /Users/tonyday/.emacs.d/src/org-mode/contrib/babel/langs | /Users/tonyday/.emacs.d/src/org-mode/contrib/scripts/staticmathjax | /Users/tonyday/.emacs.d/src/o-blog/example/out/content/2012 | /Users/tonyday/.emacs.d/src/o-blog/example/out/style/Font-Awesome | /Users/tonyday/.emacs.d/src/o-blog/example/out/style/bootstrap | /Users/tonyday/.emacs.d/src/o-blog/example/out/style/font | /Users/tonyday/.emacs.d/src/o-blog/example/out/style/js | /Users/tonyday/.emacs.d/src/o-blog/example/out/style/less | /Users/tonyday/.emacs.d/src/o-blog/example/out/tips/2012 | /Users/tonyday/.emacs.d/src/o-blog/templates/style/Font-Awesome/font | /Users/tonyday/.emacs.d/src/o-blog/templates/style/Font-Awesome/less | /Users/tonyday/.emacs.d/src/o-blog/templates/style/bootstrap/img | /Users/tonyday/.emacs.d/src/o-blog/templates/style/bootstrap/js | /Users/tonyday/.emacs.d/src/o-blog/templates/style/bootstrap/less | /Users/tonyday/.emacs.d/src/org-mode/contrib/scripts/staticmathjax/chrome | /Users/tonyday/.emacs.d/src/org-mode/contrib/scripts/staticmathjax/defaults | /Users/tonyday/.emacs.d/src/o-blog/example/out/content/2012/10 | /Users/tonyday/.emacs.d/src/o-blog/example/out/style/Font-Awesome/font | /Users/tonyday/.emacs.d/src/o-blog/example/out/style/Font-Awesome/less | /Users/tonyday/.emacs.d/src/o-blog/example/out/style/bootstrap/img | /Users/tonyday/.emacs.d/src/o-blog/example/out/style/bootstrap/js | /Users/tonyday/.emacs.d/src/o-blog/example/out/style/bootstrap/less | /Users/tonyday/.emacs.d/src/o-blog/example/out/tips/2012/01 | /Users/tonyday/.emacs.d/src/o-blog/example/out/tips/2012/02 | /Users/tonyday/.emacs.d/src/o-blog/example/out/tips/2012/05 | /Users/tonyday/.emacs.d/src/o-blog/example/out/tips/2012/08 | /Users/tonyday/.emacs.d/src/org-mode/contrib/scripts/staticmathjax/chrome/content | /Users/tonyday/.emacs.d/src/org-mode/contrib/scripts/staticmathjax/defaults/preferences | /Users/tonyday/.emacs.d/src/o-blog/example/out/tips/2012/01/07_example-of-some-org-syntax | /Users/tonyday/.emacs.d/src/o-blog/example/out/tips/2012/08/21_adding-an-image-into-a-post | /Users/tonyday/.emacs.d/src/org-mode/lisp | /usr/local/share/emacs/site-lisp | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/vc | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/url | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/textmodes | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/progmodes | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/play | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/org | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/nxml | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/net | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/mh-e | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/mail | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/language | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/international | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/gnus | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/eshell | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/erc | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/emulation | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/emacs-lisp | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/cedet | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/calendar | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/calc | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/lisp/obsolete | /usr/local/Cellar/emacs/HEAD/share/emacs/24.2.50/leim |


** test table quote etc

#+TBLNAME: test-table
| /Users/tonyday/.emacs.d/info                   |
| /usr/share/info/                               |


  #+begin_src emacs-lisp :var test-incoming-table=test-table
     (setq test-list
           (delete nil  
                   (loop for line in test-incoming-table
                         collect 
                         (delete "" (delete-dups line)))))
  #+end_src

  #+results:
  | /Users/tonyday/.emacs.d/info |
  | /usr/share/info/             |


#+begin_src emacs-lisp
  (load "t1test")
#+end_src

#+results:
: t



** test table with header

#+TBLNAME: table-with-header
| package   | essential |
|-----------+-----------|
| magit     | yes       |
| yasnippet | yes       |
|           |           |

  #+begin_src emacs-lisp :var test-incoming-table=table-with-header :results output
    (print test-incoming-table) 
 #+end_src

  #+results:
  : 
  : (("package" "essential") hline ("magit" "yes") ("yasnippet" "yes") ("" ""))



** debug bindings
#+begin_src emacs-lisp
  personal-keybindings  
#+end_src

#+results:
| (<C-return>)             | other-window                                                                                                                                                                                                                                                                                                                                              | other-window                                                                                                                                                                                                                                                                                                                                              |
| (<C-M-backspace>)        | backward-kill-sexp                                                                                                                                                                                                                                                                                                                                        | backward-kill-sexp                                                                                                                                                                                                                                                                                                                                        |
| (A-M-w)                  | copy-code-as-rtf                                                                                                                                                                                                                                                                                                                                          | copy-code-as-rtf                                                                                                                                                                                                                                                                                                                                          |
| (C-.)                    | ctl-period-map                                                                                                                                                                                                                                                                                                                                            | ctl-period-map                                                                                                                                                                                                                                                                                                                                            |
| (C-. m)                  | kmacro-keymap                                                                                                                                                                                                                                                                                                                                             | nil                                                                                                                                                                                                                                                                                                                                                       |
| (C-z)                    | collapse-or-expand                                                                                                                                                                                                                                                                                                                                        | collapse-or-expand                                                                                                                                                                                                                                                                                                                                        |
| (C-. C-i)                | indent-rigidly                                                                                                                                                                                                                                                                                                                                            | nil                                                                                                                                                                                                                                                                                                                                                       |
| (C-M-r)                  | isearch-backward-other-window                                                                                                                                                                                                                                                                                                                             | isearch-backward                                                                                                                                                                                                                                                                                                                                          |
| (C-M-s)                  | isearch-forward-other-window                                                                                                                                                                                                                                                                                                                              | isearch-forward                                                                                                                                                                                                                                                                                                                                           |
| (C-c 0)                  | (lambda nil See the documentation for `recursive-edit-preserving-window-config'. (interactive) (let ((wconfig (current-window-configuration))) (unwind-protect (progn (delete-window) (recursive-edit)) (set-window-configuration wconfig))))                                                                                                             | (lambda nil See the documentation for `recursive-edit-preserving-window-config'. (interactive) (let ((wconfig (current-window-configuration))) (unwind-protect (progn (delete-window) (recursive-edit)) (set-window-configuration wconfig))))                                                                                                             |
| (C-c 1)                  | (lambda nil See the documentation for `recursive-edit-preserving-window-config'. (interactive) (let ((wconfig (current-window-configuration))) (unwind-protect (progn (if (one-window-p (quote ignore-minibuffer)) (error Current window is the only window in its frame) (delete-other-windows)) (recursive-edit)) (set-window-configuration wconfig)))) | (lambda nil See the documentation for `recursive-edit-preserving-window-config'. (interactive) (let ((wconfig (current-window-configuration))) (unwind-protect (progn (if (one-window-p (quote ignore-minibuffer)) (error Current window is the only window in its frame) (delete-other-windows)) (recursive-edit)) (set-window-configuration wconfig)))) |
| (C-c ;)                  | comment-or-uncomment-region                                                                                                                                                                                                                                                                                                                               | comment-or-uncomment-region                                                                                                                                                                                                                                                                                                                               |
| (C-c <tab>)              | ff-find-other-file                                                                                                                                                                                                                                                                                                                                        | ff-find-other-file                                                                                                                                                                                                                                                                                                                                        |
| (C-c =)                  | count-matches                                                                                                                                                                                                                                                                                                                                             | count-matches                                                                                                                                                                                                                                                                                                                                             |
| (C-c O)                  | customize-group                                                                                                                                                                                                                                                                                                                                           | customize-group                                                                                                                                                                                                                                                                                                                                           |
| (C-c SPC)                | just-one-space                                                                                                                                                                                                                                                                                                                                            | just-one-space                                                                                                                                                                                                                                                                                                                                            |
| (C-c U)                  | tinify-url                                                                                                                                                                                                                                                                                                                                                | tinify-url                                                                                                                                                                                                                                                                                                                                                |
| (C-c V)                  | view-clipboard                                                                                                                                                                                                                                                                                                                                            | view-clipboard                                                                                                                                                                                                                                                                                                                                            |
| (C-c [)                  | align-regexp                                                                                                                                                                                                                                                                                                                                              | align-regexp                                                                                                                                                                                                                                                                                                                                              |
| (C-c d)                  | delete-current-line                                                                                                                                                                                                                                                                                                                                       | delete-current-line                                                                                                                                                                                                                                                                                                                                       |
| (C-c e E)                | elint-current-buffer                                                                                                                                                                                                                                                                                                                                      | elint-current-buffer                                                                                                                                                                                                                                                                                                                                      |
| (C-c e b)                | do-eval-buffer                                                                                                                                                                                                                                                                                                                                            | do-eval-buffer                                                                                                                                                                                                                                                                                                                                            |
| (C-c e c)                | cancel-debug-on-entry                                                                                                                                                                                                                                                                                                                                     | cancel-debug-on-entry                                                                                                                                                                                                                                                                                                                                     |
| (C-c e d)                | debug-on-entry                                                                                                                                                                                                                                                                                                                                            | debug-on-entry                                                                                                                                                                                                                                                                                                                                            |
| (C-c e e)                | toggle-debug-on-error                                                                                                                                                                                                                                                                                                                                     | toggle-debug-on-error                                                                                                                                                                                                                                                                                                                                     |
| (C-c e f)                | emacs-lisp-byte-compile-and-load                                                                                                                                                                                                                                                                                                                          | emacs-lisp-byte-compile-and-load                                                                                                                                                                                                                                                                                                                          |
| (C-c e j)                | emacs-lisp-mode                                                                                                                                                                                                                                                                                                                                           | emacs-lisp-mode                                                                                                                                                                                                                                                                                                                                           |
| (C-c e l)                | find-library                                                                                                                                                                                                                                                                                                                                              | find-library                                                                                                                                                                                                                                                                                                                                              |
| (C-c e r)                | eval-region                                                                                                                                                                                                                                                                                                                                               | eval-region                                                                                                                                                                                                                                                                                                                                               |
| (C-c e s)                | scratch                                                                                                                                                                                                                                                                                                                                                   | scratch                                                                                                                                                                                                                                                                                                                                                   |
| (C-c e v)                | edit-variable                                                                                                                                                                                                                                                                                                                                             | edit-variable                                                                                                                                                                                                                                                                                                                                             |
| (C-c e w)                | find-which                                                                                                                                                                                                                                                                                                                                                | find-which                                                                                                                                                                                                                                                                                                                                                |
| (C-c e z)                | byte-recompile-directory                                                                                                                                                                                                                                                                                                                                  | byte-recompile-directory                                                                                                                                                                                                                                                                                                                                  |
| (C-c f)                  | flush-lines                                                                                                                                                                                                                                                                                                                                               | flush-lines                                                                                                                                                                                                                                                                                                                                               |
| (C-c g)                  | goto-line                                                                                                                                                                                                                                                                                                                                                 | goto-line                                                                                                                                                                                                                                                                                                                                                 |
| (C-c k)                  | keep-lines                                                                                                                                                                                                                                                                                                                                                | keep-lines                                                                                                                                                                                                                                                                                                                                                |
| (C-c m)                  | emacs-toggle-size                                                                                                                                                                                                                                                                                                                                         | emacs-toggle-size                                                                                                                                                                                                                                                                                                                                         |
| (C-c n)                  | insert-user-timestamp                                                                                                                                                                                                                                                                                                                                     | insert-user-timestamp                                                                                                                                                                                                                                                                                                                                     |
| (C-c o)                  | customize-option                                                                                                                                                                                                                                                                                                                                          | customize-option                                                                                                                                                                                                                                                                                                                                          |
| (C-c q)                  | fill-region                                                                                                                                                                                                                                                                                                                                               | fill-region                                                                                                                                                                                                                                                                                                                                               |
| (C-c r)                  | replace-regexp                                                                                                                                                                                                                                                                                                                                            | replace-regexp                                                                                                                                                                                                                                                                                                                                            |
| (C-c s)                  | replace-string                                                                                                                                                                                                                                                                                                                                            | org-insert-subheading                                                                                                                                                                                                                                                                                                                                     |
| (C-c u)                  | rename-uniquely                                                                                                                                                                                                                                                                                                                                           | rename-uniquely                                                                                                                                                                                                                                                                                                                                           |
| (C-c v)                  | ffap                                                                                                                                                                                                                                                                                                                                                      | ffap                                                                                                                                                                                                                                                                                                                                                      |
| (C-c z)                  | clean-buffer-list                                                                                                                                                                                                                                                                                                                                         | clean-buffer-list                                                                                                                                                                                                                                                                                                                                         |
| (C-c C-z)                | delete-to-end-of-buffer                                                                                                                                                                                                                                                                                                                                   | delete-to-end-of-buffer                                                                                                                                                                                                                                                                                                                                   |
| (C-c M-q)                | unfill-paragraph                                                                                                                                                                                                                                                                                                                                          | unfill-paragraph                                                                                                                                                                                                                                                                                                                                          |
| (C-h e)                  | lisp-find-map                                                                                                                                                                                                                                                                                                                                             | lisp-find-map                                                                                                                                                                                                                                                                                                                                             |
| (C-h e F)                | find-face-definition                                                                                                                                                                                                                                                                                                                                      | nil                                                                                                                                                                                                                                                                                                                                                       |
| (C-h e V)                | apropos-value                                                                                                                                                                                                                                                                                                                                             | nil                                                                                                                                                                                                                                                                                                                                                       |
| (C-h e c)                | finder-commentary                                                                                                                                                                                                                                                                                                                                         | nil                                                                                                                                                                                                                                                                                                                                                       |
| (C-h e d)                | my-describe-symbol                                                                                                                                                                                                                                                                                                                                        | nil                                                                                                                                                                                                                                                                                                                                                       |
| (C-h e e)                | view-echo-area-messages                                                                                                                                                                                                                                                                                                                                   | nil                                                                                                                                                                                                                                                                                                                                                       |
| (C-h e f)                | find-function                                                                                                                                                                                                                                                                                                                                             | nil                                                                                                                                                                                                                                                                                                                                                       |
| (C-h e i)                | info-apropos                                                                                                                                                                                                                                                                                                                                              | nil                                                                                                                                                                                                                                                                                                                                                       |
| (C-h e k)                | find-function-on-key                                                                                                                                                                                                                                                                                                                                      | nil                                                                                                                                                                                                                                                                                                                                                       |
| (C-h e l)                | find-library                                                                                                                                                                                                                                                                                                                                              | nil                                                                                                                                                                                                                                                                                                                                                       |
| (C-h e s)                | scratch                                                                                                                                                                                                                                                                                                                                                   | nil                                                                                                                                                                                                                                                                                                                                                       |
| (C-h e v)                | find-variable                                                                                                                                                                                                                                                                                                                                             | nil                                                                                                                                                                                                                                                                                                                                                       |
| (C-x B)                  | ido-switch-buffer-other-window                                                                                                                                                                                                                                                                                                                            | ido-switch-buffer-other-window                                                                                                                                                                                                                                                                                                                            |
| (C-x F)                  | set-fill-column                                                                                                                                                                                                                                                                                                                                           | set-fill-column                                                                                                                                                                                                                                                                                                                                           |
| (C-x d)                  | delete-whitespace-rectangle                                                                                                                                                                                                                                                                                                                               | delete-whitespace-rectangle                                                                                                                                                                                                                                                                                                                               |
| (C-x t)                  | toggle-truncate-lines                                                                                                                                                                                                                                                                                                                                     | toggle-truncate-lines                                                                                                                                                                                                                                                                                                                                     |
| (C-x C-d)                | duplicate-line                                                                                                                                                                                                                                                                                                                                            | duplicate-line                                                                                                                                                                                                                                                                                                                                            |
| (C-x C-e)                | pp-eval-last-sexp                                                                                                                                                                                                                                                                                                                                         | pp-eval-last-sexp                                                                                                                                                                                                                                                                                                                                         |
| (C-x C-n)                | next-line                                                                                                                                                                                                                                                                                                                                                 | next-line                                                                                                                                                                                                                                                                                                                                                 |
| (C-x C-v)                | find-alternate-file-with-sudo                                                                                                                                                                                                                                                                                                                             | find-alternate-file-with-sudo                                                                                                                                                                                                                                                                                                                             |
| (C-x M-n)                | set-goal-column                                                                                                                                                                                                                                                                                                                                           | set-goal-column                                                                                                                                                                                                                                                                                                                                           |
| (C-x M-q)                | refill-paragraph                                                                                                                                                                                                                                                                                                                                          | refill-paragraph                                                                                                                                                                                                                                                                                                                                          |
| (M-!)                    | async-shell-command                                                                                                                                                                                                                                                                                                                                       | async-shell-command                                                                                                                                                                                                                                                                                                                                       |
| (M-")                    | insert-pair                                                                                                                                                                                                                                                                                                                                               | insert-pair                                                                                                                                                                                                                                                                                                                                               |
| (M-')                    | insert-pair                                                                                                                                                                                                                                                                                                                                               | insert-pair                                                                                                                                                                                                                                                                                                                                               |
| (M-/)                    | dabbrev-expand                                                                                                                                                                                                                                                                                                                                            | dabbrev-expand                                                                                                                                                                                                                                                                                                                                            |
| (M-D)                    | mark-defun                                                                                                                                                                                                                                                                                                                                                | mark-defun                                                                                                                                                                                                                                                                                                                                                |
| (M-H)                    | mark-paragraph                                                                                                                                                                                                                                                                                                                                            | mark-paragraph                                                                                                                                                                                                                                                                                                                                            |
| (M-J)                    | delete-indentation                                                                                                                                                                                                                                                                                                                                        | delete-indentation                                                                                                                                                                                                                                                                                                                                        |
| (M-L)                    | mark-line                                                                                                                                                                                                                                                                                                                                                 | mark-line                                                                                                                                                                                                                                                                                                                                                 |
| (M-S)                    | mark-sentence                                                                                                                                                                                                                                                                                                                                             | mark-sentence                                                                                                                                                                                                                                                                                                                                             |
| (M-W)                    | mark-word                                                                                                                                                                                                                                                                                                                                                 | mark-word                                                                                                                                                                                                                                                                                                                                                 |
| (M-X)                    | mark-sexp                                                                                                                                                                                                                                                                                                                                                 | mark-sexp                                                                                                                                                                                                                                                                                                                                                 |
| (M-[)                    | align-code                                                                                                                                                                                                                                                                                                                                                | align-code                                                                                                                                                                                                                                                                                                                                                |
| (M-`)                    | other-frame                                                                                                                                                                                                                                                                                                                                               | other-frame                                                                                                                                                                                                                                                                                                                                               |
| (M-j)                    | delete-indentation-forward                                                                                                                                                                                                                                                                                                                                | delete-indentation-forward                                                                                                                                                                                                                                                                                                                                |
| (M-g c)                  | goto-char                                                                                                                                                                                                                                                                                                                                                 | goto-char                                                                                                                                                                                                                                                                                                                                                 |
| (M-g l)                  | goto-line                                                                                                                                                                                                                                                                                                                                                 | goto-line                                                                                                                                                                                                                                                                                                                                                 |
| (M-s n)                  | find-name-dired                                                                                                                                                                                                                                                                                                                                           | find-name-dired                                                                                                                                                                                                                                                                                                                                           |
| (M-s o)                  | occur                                                                                                                                                                                                                                                                                                                                                     | occur                                                                                                                                                                                                                                                                                                                                                     |
| (C-^ . isearch-mode-map) | isearch-edit-string                                                                                                                                                                                                                                                                                                                                       | isearch-edit-string                                                                                                                                                                                                                                                                                                                                       |
| (C-c . isearch-mode-map) | isearch-toggle-case-fold                                                                                                                                                                                                                                                                                                                                  | isearch-toggle-case-fold                                                                                                                                                                                                                                                                                                                                  |
| (C-i . isearch-mode-map) | isearch-complete                                                                                                                                                                                                                                                                                                                                          | isearch-complete                                                                                                                                                                                                                                                                                                                                          |
| (C-t . isearch-mode-map) | isearch-toggle-regexp                                                                                                                                                                                                                                                                                                                                     | isearch-toggle-regexp                                                                                                                                                                                                                                                                                                                                     |


* clipboard
:PROPERTIES:
:tangle:   no
:END:
** Non-obtrusive parenthesis faces
   :PROPERTIES:
   :CUSTOM_ID: parenthesis-faces
   :END:
#+begin_src emacs-lisp
(defface starter-kit-paren-face
   '((((class color) (background dark))
      (:foreground "grey50"))
     (((class color) (background light))
      (:foreground "grey55")))
   "Face used to dim parentheses."
   :group 'starter-kit-faces)


(font-lock-add-keywords 'emacs-lisp-mode
			'(("(\\|)" . 'starter-kit-paren-face)))


#+end_src

** remove-elc-on-save
#+begin_src emacs-lisp
  (defun starter-kit-remove-elc-on-save ()
  "If you're saving an elisp file, likely the .elc is no longer valid."
  (make-local-variable 'after-save-hook)
  (add-hook 'after-save-hook
            (lambda ()
              (if (file-exists-p (concat buffer-file-name "c"))
                  (delete-file (concat buffer-file-name "c"))))))
#+end_src

** jw settings
:PROPERTIES:
:tangle:   no
:END:

#+begin_src emacs-lisp
  (custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(Info-fit-frame-flag nil)
 '(TeX-PDF-mode t)
 '(TeX-engine (quote xetex))
 '(TeX-expand-list (quote (("%p" TeX-printer-query) ("%q" (lambda nil (TeX-printer-query t))) ("%V" (lambda nil (TeX-source-correlate-start-server-maybe) (TeX-view-command-raw))) ("%vv" (lambda nil (TeX-source-correlate-start-server-maybe) (TeX-output-style-check TeX-output-view-style))) ("%v" (lambda nil (TeX-source-correlate-start-server-maybe) (TeX-style-check TeX-view-style))) ("%r" (lambda nil (TeX-style-check TeX-print-style))) ("%l" (lambda nil (TeX-style-check LaTeX-command-style))) ("%(PDF)" (lambda nil (if (and (eq TeX-engine (quote default)) (or TeX-PDF-mode TeX-DVI-via-PDFTeX)) "pdf" ""))) ("%(PDFout)" (lambda nil (cond ((and (eq TeX-engine (quote xetex)) (not TeX-PDF-mode)) " -no-pdf") ((and (eq TeX-engine (quote luatex)) (not TeX-PDF-mode)) " --output-format=dvi") ((and (eq TeX-engine (quote default)) (not TeX-PDF-mode) TeX-DVI-via-PDFTeX) " \"\\pdfoutput=0 \"") (t "")))) ("%(mode)" (lambda nil (if TeX-interactive-mode "" " -interaction=nonstopmode"))) ("%(o?)" (lambda nil (if (eq TeX-engine (quote omega)) "o" ""))) ("%(tex)" (lambda nil (eval (nth 2 (assq TeX-engine (TeX-engine-alist)))))) ("%(latex)" (lambda nil (eval (nth 3 (assq TeX-engine (TeX-engine-alist)))))) ("%(execopts)" ConTeXt-expand-options) ("%S" TeX-source-correlate-expand-options) ("%dS" TeX-source-specials-view-expand-options) ("%cS" TeX-source-specials-view-expand-client) ("%(outpage)" (lambda nil (if TeX-source-correlate-output-page-function (funcall TeX-source-correlate-output-page-function) "1"))) ("%s" file nil t) ("%t" file t t) ("%`" (lambda nil (setq TeX-command-pos t TeX-command-text ""))) (" \"\\" (lambda nil (if (eq TeX-command-pos t) (setq TeX-command-pos pos pos (+ 3 pos)) (setq pos (1+ pos))))) ("\"" (lambda nil (if (numberp TeX-command-pos) (setq TeX-command-text (concat TeX-command-text (substring command TeX-command-pos (1+ pos))) command (concat (substring command 0 TeX-command-pos) (substring command (1+ pos))) pos TeX-command-pos TeX-command-pos t) (setq pos (1+ pos))))) ("%'" (lambda nil (prog1 (if (stringp TeX-command-text) (progn (setq pos (+ (length TeX-command-text) 9) TeX-command-pos (and (string-match " " (funcall file t t)) "\"")) (concat TeX-command-text " \"\\input\"")) (setq TeX-command-pos nil) "") (setq TeX-command-text nil)))) ("%n" TeX-current-line) ("%d" file "dvi" t) ("%f" file "ps" t) ("%o" (lambda nil (funcall file (TeX-output-extension) t))) ("%b" TeX-current-file-name-master-relative) ("%m" preview-create-subdirectory) ("%O" (lambda nil (expand-file-name (funcall file (TeX-output-extension) t)))))))
 '(TeX-view-program-list (quote (("Skim" ("osascript" " ~/bin/skim-gotopage.script" " %O" (mode-io-correlate " %(outpage)"))))))
 '(TeX-view-program-selection (quote (((output-dvi style-pstricks) "dvips and gv") (output-dvi "xdvi") (output-pdf "Skim") (output-html "xdg-open"))))
 '(abbrev-file-name "~/.emacs.d/abbrevs")
 '(ac-auto-show-menu nil)
 '(ac-auto-start 3)
 '(ac-clang-flags (quote ("-isystem" "/usr/local/include/c++/v1" "-isystem" "/usr/local/include/boost-1_49" "-isystem" "/opt/local/include" "-I/Users/johnw/Products/ledger/debug" "-include" "/Users/johnw/Products/ledger/debug/system.hh" "-I/Users/johnw/Projects/ledger/src" "-I/Users/johnw/Projects/ledger/lib" "-I/Users/johnw/Projects/ledger/lib/utfcpp/source")))
 '(ac-comphist-file "/Users/johnw/.emacs.d/data/ac-comphist.dat")
 '(ac-dwim nil)
 '(ac-ignore-case nil)
 '(ac-use-fuzzy nil)
 '(after-save-hook (quote (executable-make-buffer-file-executable-if-script-p)))
 '(align-c++-modes (quote (csharp-mode c++-mode c-mode java-mode groovy-mode)))
 '(align-to-tab-stop nil)
 '(allout-command-prefix ".")
 '(ansi-color-names-vector ["black" "red" "green" "brown" "blue" "magenta" "blue" "white"])
 '(auto-compression-mode t nil (jka-compr))
 '(auto-save-interval 1024)
 '(backup-directory-alist (quote (("/Volumes/Files/" . "/Volumes/Files/.backups") ("\\(recentf\\|archive/sent\\)" . "/tmp") (".*" . "~/.emacs.d/backups"))))
 '(backward-delete-char-untabify-method (quote untabify))
 '(bbdb-default-country "")
 '(bbdb-file "~/Documents/bbdb")
 '(bbdb-message-caching-enabled nil)
 '(bbdb-no-duplicates t)
 '(bbdb-offer-save (quote savenoprompt))
 '(bbdb-silent-running t)
 '(bbdb-use-pop-up nil)
 '(bbdb/mail-auto-create-p nil)
 '(bc-bookmark-file "~/.emacs.d/data/breadcrumb")
 '(bind-key-segregation-regexp "\\`\\(\\(C-[chx.] \\|M-[gso] \\)\\([CM]-\\)?\\|.+-\\)")
 '(bm-highlight-style (quote bm-highlight-only-fringe))
 '(bmkp-bmenu-commands-file "~/.emacs.d/data/bmk-bmenu-commands.el")
 '(bmkp-bmenu-state-file "~/.emacs.d/data/bmk-bmenu-state.el")
 '(bmkp-last-as-first-bookmark-file "~/Documents/bookmarks")
 '(bookmark-default-file "~/Documents/bookmarks")
 '(browse-url-browser-function (quote ((".*" . browse-url-default-macosx-browser))))
 '(byte-compile-verbose nil)
 '(c-default-style (quote ((java-mode . "gnu") (awk-mode . "awk") (other . "gnu"))))
 '(calendar-daylight-time-zone-name "CDT")
 '(calendar-latitude 40.73471)
 '(calendar-longitude -89.554659)
 '(calendar-mark-holidays-flag t)
 '(calendar-standard-time-zone-name "CST")
 '(calendar-time-zone -420)
 '(canlock-password "8d2ee9a7e4658c4ff6d863f91a3dd5340b3918ec")
 '(clean-buffer-list-kill-never-buffer-names (quote ("*scratch*" "*Messages*" "*server*" "*Group*" "*Org Agenda*" "todo.txt" "&bitlbee")))
 '(clean-buffer-list-kill-never-regexps (quote ("^ \\*Minibuf-.*\\*$" "^\\*Summary" "^\\*Article" "^#")))
 '(clean-buffer-list-kill-regexps (quote (".*")))
 '(column-number-mode t)
 '(company-backends (quote (company-elisp company-nxml company-css (company-gtags company-dabbrev-code company-keywords) company-oddmuse company-files company-dabbrev)))
 '(company-idle-delay nil)
 '(company-require-match nil)
 '(compilation-context-lines 10)
 '(compilation-scroll-output t)
 '(compilation-skip-threshold 2)
 '(current-language-environment "UTF-8")
 '(custom-buffer-done-function (quote kill-buffer))
 '(custom-file "/Users/johnw/.emacs.d/settings.el")
 '(custom-raised-buttons nil)
 '(default-frame-alist (quote ((font . "-apple-Courier-medium-normal-normal-*-15-*-*-*-m-0-iso10646-1") (cursor-color . "#b247ee"))))
 '(default-input-method "latin-1-prefix")
 '(default-major-mode (quote text-mode) t)
 '(deft-auto-save-interval 0.0)
 '(deft-directory "/Users/johnw/Documents/Notes")
 '(deft-text-mode (quote org-mode))
 '(delete-by-moving-to-trash t)
 '(delete-old-versions (quote none))
 '(diary-file "~/Documents/Tasks/diary")
 '(diff-mode-hook (quote (diff-delete-empty-files diff-make-unified smerge-mode)))
 '(directory-free-space-args "-kh")
 '(dired-async-use-native-commands t)
 '(dired-clean-up-buffers-too nil)
 '(dired-dwim-target t)
 '(dired-guess-shell-gnutar "tar")
 '(dired-listing-switches "-lah")
 '(dired-no-confirm (quote (byte-compile chgrp chmod chown copy hardlink symlink touch)))
 '(dired-omit-files "^\\.?#\\|^\\.\\(DS_Store\\|localized\\|AppleDouble\\)$\\|^\\.\\.$")
 '(dired-omit-mode nil t)
 '(dired-recursive-copies (quote always))
 '(dired-recursive-deletes (quote always))
 '(diredful-init-file "~/.emacs.d/data/diredful-conf.el")
 '(display-time-mail-function (quote (lambda nil (file-exists-p "/tmp/unread"))))
 '(display-time-use-mail-icon t)
 '(doc-view-resolution 300)
 '(ediff-combination-pattern (quote ("<<<<<<< A: HEAD" A "||||||| Ancestor" Ancestor "=======" B ">>>>>>> B: Incoming")))
 '(ediff-diff-options "-w")
 '(ediff-highlight-all-diffs nil)
 '(ediff-show-clashes-only t)
 '(ediff-window-setup-function (quote ediff-setup-windows-plain))
 '(edit-server-new-frame nil)
 '(el-get-auto-update-cached-recipes nil)
 '(el-get-dir "~/.emacs.d/site-lisp/")
 '(el-get-generate-autoloads nil)
 '(emacs-lisp-mode-hook (quote (turn-on-auto-fill (lambda nil (ignore-errors (diminish (quote auto-fill-function)))) eldoc-mode (lambda nil (local-set-key [(meta 46)] (quote find-function)) (local-set-key [(control 109)] (quote newline-and-indent))))))
 '(emms-player-mplayer-parameters (quote ("-slave" "-quiet" "-really-quiet" "-volume" "15")))
 '(emms-source-file-default-directory "/Volumes/Data/Music/iTunes/iTunes Media/")
 '(enable-recursive-minibuffers t)
 '(erc-auto-query (quote window-noselect))
 '(erc-autoaway-message "I'm away (after %i seconds of idle-time)")
 '(erc-autojoin-channels-alist (quote (("localhost" "&bitlbee") ("freenode.net" "#emacs" "#haskell" "#ledger") ("oftc.net" "#llvm"))))
 '(erc-autojoin-mode t)
 '(erc-fill-static-center 12)
 '(erc-fools (quote ("JordiGH")))
 '(erc-generate-log-file-name-function (quote erc-generate-log-file-name-short))
 '(erc-header-line-format nil)
 '(erc-hide-list (quote ("JOIN" "NICK" "PART" "QUIT" "MODE")))
 '(erc-ignore-list (quote ("rudybot!.*")))
 '(erc-keywords (quote ("wiegley" "ledger" "eshell")))
 '(erc-log-channels-directory "~/Messages/ERC")
 '(erc-log-write-after-send t)
 '(erc-modules (quote (autojoin button completion dcc fill identd irccontrols list log match menu move-to-prompt netsplit networks noncommands readonly replace ring scrolltobottom services smiley stamp spelling track highlight-nicknames)))
 '(erc-nick "johnw")
 '(erc-port 6667)
 '(erc-priority-people-regexp "\\`[^#].+")
 '(erc-prompt-for-nickserv-password nil)
 '(erc-replace-alist (quote (("</?FONT>" . ""))))
 '(erc-server "irc.freenode.net")
 '(erc-services-mode t)
 '(erc-text-matched-hook (quote (erc-log-matches erc-hide-fools my-erc-hook)))
 '(erc-track-enable-keybindings t)
 '(erc-track-exclude-types (quote ("JOIN" "KICK" "NICK" "PART" "QUIT" "MODE" "333" "353")))
 '(erc-track-faces-priority-list (quote (erc-error-face (erc-nick-default-face erc-current-nick-face) erc-current-nick-face erc-keyword-face (erc-nick-default-face erc-pal-face) erc-pal-face erc-nick-msg-face erc-direct-msg-face)))
 '(erc-user-full-name (quote user-full-name))
 '(eshell-directory-name "~/.emacs.d/eshell/")
 '(eshell-history-size 1000)
 '(eshell-ls-dired-initial-args (quote ("-h")))
 '(eshell-ls-exclude-regexp "~\\'")
 '(eshell-ls-initial-args "-h")
 '(eshell-modules-list (quote (eshell-alias eshell-basic eshell-cmpl eshell-dirs eshell-glob eshell-hist eshell-ls eshell-pred eshell-prompt eshell-rebind eshell-script eshell-smart eshell-term eshell-unix eshell-xtra)))
 '(eshell-prefer-to-shell t nil (eshell))
 '(eshell-prompt-function (lambda nil (concat (abbreviate-file-name (eshell/pwd)) (if (= (user-uid) 0) " # " " $ "))))
 '(eshell-save-history-on-exit t)
 '(eshell-stringify-t nil)
 '(eshell-term-name "ansi")
 '(eshell-visual-commands (quote ("vi" "top" "screen" "less" "lynx" "rlogin" "telnet")))
 '(eudc-inline-expansion-format (quote ("%s <%s>" name email)))
 '(eval-expr-print-function (quote pp))
 '(exec-path (quote ("/Users/johnw/bin" "/usr/local/bin" "/opt/local/libexec/git-core" "/opt/local/bin" "/usr/bin" "/bin" "/usr/local/sbin" "/opt/local/sbin" "/usr/sbin" "/sbin" "/usr/X11R6/bin")))
 '(fill-column 78)
 '(find-ls-subdir-switches "-alh")
 '(flyspell-abbrev-p nil)
 '(flyspell-incorrect-hook (quote (flyspell-maybe-correct-transposition)))
 '(flyspell-use-meta-tab nil)
 '(font-lock-support-mode (quote jit-lock-mode))
 '(font-lock-verbose nil)
 '(frame-title-format (quote (:eval (concat (if buffer-file-name default-directory "%b") "    " (number-to-string (cdr (assq (quote width) (frame-parameters)))) "x" (number-to-string (cdr (assq (quote height) (frame-parameters))))))) t)
 '(gc-cons-threshold 3500000)
 '(gdb-find-source-frame t)
 '(gdb-same-frame nil)
 '(global-font-lock-mode t nil (font-lock))
 '(haskell-check-command "hlintall")
 '(haskell-config-use-unicode-symbols t)
 '(haskell-doc-use-inf-haskell t)
 '(haskell-mode-hook (quote (turn-on-haskell-indentation turn-on-font-lock turn-on-eldoc-mode turn-on-haskell-doc-mode turn-on-haskell-decl-scan my-haskell-mode-hook)))
 '(haskell-program-name "ghci")
 '(haskell-saved-check-command "~/.cabal/bin/hlint" t)
 '(hippie-expand-try-functions-list (quote (yas/hippie-try-expand try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-list try-expand-line try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-lisp-symbol-partially try-complete-lisp-symbol)))
 '(history-delete-duplicates t)
 '(history-length 200)
 '(hpaste-announce (quote always))
 '(hpaste-blank-title nil)
 '(hpaste-channel "#haskell")
 '(hpaste-default-lang "haskell")
 '(hpaste-default-nick "johnw")
 '(hpaste-lang (quote always))
 '(ibuffer-default-display-maybe-show-predicates t)
 '(ibuffer-expert t)
 '(ibuffer-formats (quote ((mark modified read-only " " (name 16 -1) " " (size 6 -1 :right) " " (mode 16 16) " " filename) (mark " " (name 16 -1) " " filename))))
 '(ibuffer-maybe-show-regexps nil)
 '(ibuffer-saved-filter-groups (quote (("default" ("Commands" (or (mode . shell-mode) (mode . eshell-mode) (mode . term-mode) (mode . compilation-mode))) ("Helm" (mode . helm-mode)) ("Magit" (or (mode . magit-status-mode) (mode . magit-log-mode))) ("C++" (or (mode . c-mode) (mode . c++-mode))) ("Lisp" (mode . emacs-lisp-mode)) ("Dired" (mode . dired-mode)) ("Gnus" (or (mode . message-mode) (mode . mail-mode) (mode . gnus-group-mode) (mode . gnus-summary-mode) (mode . gnus-article-mode) (name . "^\\.newsrc-dribble"))) ("Org" (or (name . "^\\*Calendar\\*$") (name . "^diary$") (mode . org-mode))) ("Emacs" (or (name . "^\\*scratch\\*$") (name . "^\\*Messages\\*$")))))))
 '(ibuffer-show-empty-filter-groups nil)
 '(ibuffer-shrink-to-minimum-size t t)
 '(ibuffer-use-other-window t)
 '(icicle-Completions-text-scale-decrease 0)
 '(icicle-apropos-cycle-next-keys (quote ([next] [(control 110)])))
 '(icicle-apropos-cycle-previous-keys (quote ([prior] [(control 112)])))
 '(icicle-incremental-completion nil)
 '(icicle-max-candidates 100)
 '(ido-auto-merge-work-directories-length 0)
 '(ido-cannot-complete-command (quote ido-exit-minibuffer))
 '(ido-decorations (quote ("{" "}" "," ",..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
 '(ido-enable-flex-matching t)
 '(ido-enable-last-directory-history nil)
 '(ido-enable-tramp-completion nil)
 '(ido-enter-matching-directory (quote first))
 '(ido-ignore-files (quote ("\\`CVS/" "\\`#" "\\`.#" "\\`\\.\\./" "\\`\\./" "\\`\\.DS_Store" "\\`\\.localized" "\\.sparsebundle/" "\\.dmg\\'")))
 '(ido-save-directory-list-file "~/.emacs.d/data/ido.last")
 '(ido-use-virtual-buffers t)
 '(image-dired-dir "~/.emacs.d/data/image-dired/")
 '(indent-tabs-mode nil)
 '(inhibit-startup-echo-area-message "johnw")
 '(inhibit-startup-screen t)
 '(initial-major-mode (quote fundamental-mode))
 '(initsplit-customizations-alist (quote (("\\`\\(gnus\\|nn\\|message\\|mail\\|mm-\\|smtp\\|send-mail\\|check-mail\\|spam\\|sc-\\)" "~/.emacs.d/gnus-settings.el" nil nil) ("\\`\\(org-\\)" "~/.emacs.d/org-settings.el" nil nil))))
 '(ipa-file "~/Documents/ipa")
 '(ipa-overlay-position "above")
 '(irfc-directory "~/Archives/Admin/RFC/")
 '(ispell-extra-args (quote ("--sug-mode=fast" "--keyboard=dvorak")))
 '(kill-do-not-save-duplicates t)
 '(kill-whole-line t)
 '(large-file-warning-threshold nil)
 '(ledger-file "~/Documents/Accounts/ledger.dat")
 '(ledger-post-use-ido t)
 '(line-number-mode t)
 '(mac-option-modifier (quote alt))
 '(mac-pass-command-to-system nil)
 '(mac-pass-control-to-system nil)
 '(mac-wheel-button-is-mouse-2 nil)
 '(magit-completing-read-function (quote magit-ido-completing-read))
 '(magit-process-popup-time 15)
 '(make-backup-file-name-function (quote my-make-backup-file-name))
 '(moccur-following-mode-toggle nil)
 '(modelinepos-column-limit 80)
 '(mudel-mode-hook (quote (mudel-add-scroll-to-bottom)))
 '(mudel-output-filter-functions (quote (ansi-color-process-output)))
 '(multi-term-program "/opt/local/bin/screen")
 '(multi-term-program-switches "-DR")
 '(multi-term-scroll-show-maximum-output t)
 '(next-line-add-newlines nil)
 '(ns-alternate-modifier (quote alt))
 '(ns-command-modifier (quote meta))
 '(nxml-sexp-element-flag t)
 '(nxml-slash-auto-complete-flag t)
 '(offlineimap-command "offlineimap -u machineui")
 '(package-archives (quote (("gnu" . "http://elpa.gnu.org/packages/") ("ELPA" . "http://tromey.com/elpa/") ("Marmalade" . "http://marmalade-repo.org/packages/"))))
 '(parens-require-spaces t)
 '(pcomplete-compare-entries-function (quote file-newer-than-file-p))
 '(persistent-scratch-file-name "~/.emacs.d/data/persistent-scratch")
 '(pp^L-^L-string "                                                                              ")
 '(ps-font-size (quote (8 . 10)))
 '(ps-footer-font-size (quote (12 . 14)))
 '(ps-header-font-size (quote (12 . 14)))
 '(ps-header-title-font-size (quote (14 . 16)))
 '(ps-line-number-font-size 10)
 '(ps-print-color-p nil)
 '(rdebug-many-windows nil)
 '(read-buffer-function (quote ido-read-buffer))
 '(recentf-auto-cleanup (quote never))
 '(recentf-exclude (quote ("~\\'" "\\`out\\'" "\\.log\\'" "^/[^/]*:" "\\.el\\.gz\\'")))
 '(recentf-max-saved-items 2000)
 '(recentf-save-file "~/.emacs.d/data/recentf")
 '(redisplay-dont-pause t t)
 '(regex-tool-backend (quote perl))
 '(runner-init-file "~/.emacs.d/runner-conf.el")
 '(safe-local-variable-values (quote ((eval require (quote edg)) (eval ignore-errors (require (quote edg))) (after-save-hook my-byte-recompile-file) (after-save-hook git-commit-changes) (org-refer-by-number-id . "1C72AB51-33C2-4FF8-9367-2B494D125027"))))
 '(same-window-buffer-names (quote ("*eshell*" "*shell*" "*mail*" "*inferior-lisp*" "*ielm*" "*scheme*")))
 '(save-abbrevs (quote silently))
 '(save-interprogram-paste-before-kill t)
 '(save-kill-file-name "~/.emacs.d/data/kill-ring-saved.el")
 '(scroll-bar-mode nil)
 '(semanticdb-default-save-directory "~/.emacs.d/data/semanticdb")
 '(session-globals-exclude (quote (load-history flyspell-auto-correct-ring)))
 '(session-globals-include (quote ((kill-ring 10 nil) (session-file-alist 200 t) (file-name-history 200 nil) search-ring regexp-search-ring sr-history-registry)))
 '(session-initialize (quote (session places keys)))
 '(session-registers (quote (t (0 . 127))))
 '(session-save-file "~/.emacs.d/data/session")
 '(show-paren-delay 0)
 '(slime-kill-without-query-p t)
 '(slime-repl-history-file "~/.emacs.d/data/slime-history.eld")
 '(slime-startup-animation nil)
 '(smart-compile-alist (quote (((lambda (buf) (let ((case-fold-search t)) (and (string-match "/ansi/" (buffer-file-name buf)) (string-match "/opencl" (shell-command-to-string "git symbolic-ref HEAD"))))) . "cd ~/Contracts/TI/src/c60_iaansi ; ~/Contracts/TI/bin/build.sh c60") ((lambda (buf) (let ((case-fold-search t)) (and (string-match "/\\(src/ansi\\|src/.*?ansi\\)/" (buffer-file-name buf)) (string-match "/merge_4_2" (shell-command-to-string "git symbolic-ref HEAD"))))) . "cd ~/Contracts/TI/src/msp_iaansi ; ~/Contracts/TI/bin/build.sh msp") ((lambda (buf) (string-match "/\\(\\(src\\|Projects\\)/ledger\\)/" (buffer-file-name buf))) . "cd ~/src/ledger ; ~/src/ledger/tools/build.sh debug") ((lambda (buf) (string-match "/emacs/" (buffer-file-name buf))) . "emacs-build release macport opt make") (emacs-lisp-mode emacs-lisp-byte-compile-and-load) ((lambda (buf) (let ((case-fold-search t)) (string-match "/edg/" (buffer-file-name buf)))) . "cd ~/Products/edg/cree ; jmake && make ARGS=-j$(ncpu) test"))))
 '(sql-sqlite-program "sqlite3")
 '(sr-attributes-display-mask (quote (nil nil t nil nil nil)))
 '(sr-autoload-extensions nil)
 '(sr-kill-unused-buffers nil)
 '(sr-listing-switches "--time-style=locale --group-directories-first -alDhgG")
 '(sr-loop-use-popups nil)
 '(sr-popviewer-style (quote single-frame))
 '(sr-show-file-attributes nil)
 '(sr-show-hidden-files t)
 '(sr-use-commander-keys nil)
 '(sr-windows-default-ratio 80)
 '(ssl-certificate-verification-policy 1)
 '(svn-status-hide-unmodified t)
 '(tags-apropos-verbose t)
 '(tags-case-fold-search nil)
 '(tail-max-size 25)
 '(tail-volatile nil)
 '(temp-buffer-resize-mode t nil (help))
 '(term-bind-key-alist (quote (("C-c C-c" . term-interrupt-subjob) ("C-b" . my-term-send-raw-at-prompt) ("C-f" . my-term-send-raw-at-prompt) ("C-a" . my-term-send-raw-at-prompt) ("C-e" . my-term-send-raw-at-prompt) ("C-p" . previous-line) ("C-n" . next-line) ("C-s" . isearch-forward) ("C-r" . isearch-backward) ("C-m" . term-send-raw) ("M-f" . term-send-forward-word) ("M-b" . term-send-backward-word) ("M->" . my-term-end-of-buffer) ("M-o" . term-send-backspace) ("M-p" . term-send-up) ("M-n" . term-send-down) ("M-d" . term-send-forward-kill-word) ("M-DEL" . term-send-backward-kill-word) ("M-r" . term-send-reverse-search-history) ("M-," . term-send-input) ("M-." . comint-dynamic-complete) ("C-y" . term-paste))))
 '(term-buffer-maximum-size 0)
 '(term-scroll-show-maximum-output t)
 '(text-mode-hook (quote (turn-on-auto-fill (lambda nil (ignore-errors (diminish (quote auto-fill-function)))))))
 '(tls-program (quote ("openssl s_client -connect %h:%p -no_ssl2 -ign_eof -CApath /opt/local/etc/postfix/certs -cert /Users/johnw/Messages/me.pem")))
 '(tool-bar-mode nil)
 '(tramp-auto-save-directory "~/.emacs.d/backups")
 '(tramp-default-method "rsyncc")
 '(tramp-default-method-alist (quote (("\\`\\(127\\.0\\.0\\.1\\|::1\\|localhost6?\\)\\'" "\\`root\\'" "sudo"))))
 '(tramp-persistency-file-name "~/.emacs.d/data/tramp")
 '(trash-directory "~/.Trash")
 '(undo-limit 800000)
 '(uniquify-buffer-name-style (quote post-forward-angle-brackets) nil (uniquify))
 '(url-cache-directory "/Users/johnw/.emacs.d/data/url/cache")
 '(url-configuration-directory "~/.emacs.d/data/url/")
 '(url-irc-function (quote url-irc-erc))
 '(user-full-name "John Wiegley")
 '(user-initials "jww")
 '(user-mail-address "jwiegley@gmail.com")
 '(vc-command-messages t)
 '(vc-follow-symlinks t)
 '(vc-git-diff-switches (quote ("-w" "-U3")))
 '(vc-handled-backends (quote (GIT SVN CVS Bzr Hg)))
 '(vc-make-backup-files t)
 '(version-control t)
 '(visible-bell t)
 '(w3m-cookie-accept-bad-cookies (quote ask))
 '(w3m-default-display-inline-images t)
 '(w3m-fill-column 80)
 '(w3m-use-cookies t)
 '(wdired-use-dired-vertical-movement (quote sometimes))
 '(weblogger-config-alist (quote (("newartisans" "http://www.newartisans.com/xmlrpc.php" "johnw" "" "5"))))
 '(wg-mode-line-on nil)
 '(wg-morph-on nil)
 '(wg-prefix-key "")
 '(wg-query-for-save-on-emacs-exit nil)
 '(wg-query-for-save-on-workgroups-mode-exit nil)
 '(whitespace-auto-cleanup t)
 '(whitespace-line-column 80)
 '(whitespace-rescan-timer-time nil)
 '(whitespace-silent t)
 '(whitespace-style (quote (face trailing lines space-before-tab empty)))
 '(workgroups-mode t)
 '(x-select-enable-clipboard t)
 '(x-stretch-cursor t)
 '(yaoddmuse-browse-function (quote w3m-browse-url))
 '(yaoddmuse-directory "~/.emacs.d/doc")
 '(yas/snippet-dirs (quote ("~/.emacs.d/snippets")) nil (yasnippet))
 '(yas/triggers-in-field t)
 '(yas/wrap-around-region t)
 '(zencoding-preview-default nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(diff-added ((t (:foreground "DarkGreen"))))
 '(diff-added2 ((t (:foreground "SeaGreen"))))
 '(diff-changed ((t (:foreground "MediumBlue"))))
 '(diff-context ((t (:foreground "Black"))))
 '(diff-file-header ((t (:background "grey90" :foreground "Red"))))
 '(diff-header ((t (:background "grey85" :foreground "red"))))
 '(diff-hunk-header ((t (:background "grey90" :foreground "black"))))
 '(diff-index ((t (:foreground "Green"))))
 '(diff-nonexistent ((t (:foreground "DarkBlue"))))
 '(diff-removed ((t (:foreground "firebrick"))))
 '(diff-removed2 ((t (:foreground "Orange"))))
 '(font-lock-comment-face ((((class color)) (:foreground "firebrick"))))
 '(helm-M-x-key ((t (:foreground "dark red" :underline t))))
 '(helm-candidate-number ((t (:background "#faffb5" :foreground "black"))))
 '(helm-selection ((t (:background "#b5ffd1" :underline t))))
 '(helm-separator ((t (:foreground "#ffbfb5"))))
 '(helm-source-header ((t (:background "#abd7f0" :foreground "black" :underline t))))
 '(helm-visible-mark ((t (:background "#d1f5ae"))))
 '(hl-line ((t (:background "cornsilk"))))
 '(ledger-register-pending-face ((t (:weight bold))))
 '(lusty-match-face ((t (:inherit helm-match))))
 '(magit-branch-face ((((class color) (background light)) (:foreground "Blue"))))
 '(magit-diff-none-face ((((class color) (background light)) (:foreground "grey50"))))
 '(magit-header ((t (:weight bold))))
 '(magit-topgit-current ((t nil)))
 '(match ((t (:background "light cyan"))))
 '(slime-highlight-edits-face ((((class color) (background light)) (:background "gray98"))))
 '(trailing-whitespace ((((class color) (background light)) (:background "light salmon"))))
 '(wg-brace-face ((((class color)) (:foreground "dark slate blue"))))
 '(wg-command-face ((((class color)) (:foreground "dark cyan"))))
 '(wg-current-workgroup-face ((((class color)) (:foreground "black"))))
 '(wg-divider-face ((((class color)) (:foreground "dark slate blue"))))
 '(wg-filename-face ((((class color)) (:foreground "dark blue"))))
 '(wg-frame-face ((((class color)) (:foreground "black"))))
 '(wg-message-face ((((class color)) (:foreground "dark blue"))))
 '(wg-mode-line-face ((((class color)) (:foreground "dark blue"))))
 '(wg-other-workgroup-face ((((class color)) (:foreground "dark slate grey"))))
 '(wg-previous-workgroup-face ((((class color)) (:foreground "dark blue"))))
 '(whitespace-line ((t (:background "lemon chiffon" :foreground "dark violet")))))

#+end_src
