#+TITLE: Emacs configuration file
#+AUTHOR: Tony Day
#+EMAIL: zygomega at gmail dot com
#+OPTIONS: toc:2 num:nil ^:nil

* Upfront
:PROPERTIES:
:OPEN: [2012-08-01 Wed 18:27]
:LAST: TODO [2012-08-01 Wed 18:27]
:END:
#+begin_quote
  business in the front, party in the back

  -- [[http://en.wikipedia.org/wiki/The_Mullets_(TV_series)][The Mullets]]
#+end_quote

Emergency status hack-attack city

- take all the starter-kit guff and place it here
- init.el should be placed here too




* init.el
:PROPERTIES:
:tangle:   init.el
:END:

The init.el file is the only file in the startup of emacs
that *needs* to be a .el file.  If you update it here and don't
tangel it the old copy will remain in place only to be overwritten
automatically next restart.

Not much we can do about that.

There are exactly three things that init.el does:
- finds out where it is. This means that it can start anywhere if
  pointed to with:
  
  #+begin_src sh :tangle no
    /Applications/Emacs.app/Contents/MacOS/Emacs -q -l not-the-home/init.el     
  #+end_src
  
  or

  #+begin_src sh :tangle no
    emacs -q -l not-the-home/init.el     
  #+end_src
  
  The other way to test outside of your regular ~/.emacs.d is to set
  $HOME=~/fakehome and place init.el in ~/fakehome/.emacs.d.  
- loads the org directory (if it exists).  This is needed in case
  there is a more recent org-mode installed in which case usage of
  babel before loading the path will result in a mixed install.  Not
  fun debugging that.    
- loads the /real/ init code, which i have called org-init and which
  is contained here.


#+begin_src emacs-lisp
  ;; see org-init.org for documentation
  
  ;; remember this directory
  (setq working-dir
        (file-name-directory (or load-file-name (buffer-file-name))))
  
  ;; put the org dir on the path if it exists
  (let ((org-dir (expand-file-name "src/org-mode/lisp" working-dir)))
      ;; add the src directory to the load path
      (add-to-list 'load-path org-dir))
   
  ;; load up the org-init file
  (org-babel-load-file (expand-file-name "org-init.org" starter-kit-dir))
#+end_src


** DONE pull (local) org-mode to .emacs.d
SCHEDULED: <2012-09-16 Sun>
:PROPERTIES:
:OPEN: [2012-09-15 Sat 17:39]
:LAST:     DONE [2012-10-11 Thu 13:00]
:CLOSE:    [2012-10-11 Thu 13:00]
:END:

* Introduction

This is my personal emacs configuration, written in org and utilising emacs24
and [[http://eschulte.me/emacs24-starter-kit/][starter-kit]].  The latest version of starter-kit is available in git [[https://github.com/eschulte/emacs24-starter-kit/][here]].

Starter kit and this file represent a new way of configuring emacs
using [[http://orgmode.org/][org-mode]] to produce [[http://en.wikipedia.org/wiki/Literate_programming][literate programs]]. A description of the
particular manner adopted and some of the design consideration can be found [[id:f955f29d-1f32-49cb-bfca-125e64365849][here]].

This file is a working file for R&D on setting up
emacs, its various major modes and, especially, on configuration of
org-mode.

** Why move to starter-kit?

I've spent many an hour wading through complicated and opaque init.el files looking at ways
that emacs might be enhanced.  On opening the starter kit init.el,
this is what I saw:

#+begin_src emacs-lisp :eval no :tangle no
;;; init.el --- Where all the magic begins
;;
;; Part of the Emacs Starter Kit
;;
;; This is the first thing to get loaded.
;;

;; remember this directory
(setq starter-kit-dir
      (file-name-directory (or load-file-name (buffer-file-name))))

;; load up the starter kit
(org-babel-load-file (expand-file-name "starter-kit.org" starter-kit-dir))

;;; init.el ends here
#+end_src

It:
1. remembers a directory, then
2. opens an org file

- [ ] I can remember a directory.
- [ ] I can open an org file
- [ ] I already have an org file with my init stuff in there

Bingo!

** References
*** starter kit

Eric's starter-kit blurb

http://eschulte.me/emacs24-starter-kit/

Latest git

https://github.com/eschulte/emacs24-starter-kit/

*** norang
	 :LOGBOOK:
	 CLOCK: [2012-07-17 Tue 10:01]--[2012-07-17 Tue 10:16] =>  0:15
	 CLOCK: [2012-07-17 Tue 09:55]--[2012-07-17 Tue 10:01] =>  0:06
	 CLOCK: [2012-07-17 Tue 09:09]--[2012-07-17 Tue 09:55] =>  0:46
	 :END:

The http://doc.norang.ca/ site is the best I know for an introduction
to what can be achieved through the use of org-mode, and how to go
about the task. My initial inspiration to start playing around with
and eventually adopting an org style of working came from pouring
through this site. Much of the actual code used to set up org-mode
is a cut and paste from http://doc.norang.ca/org-mode.html.

If you are looking for a more general introduction to org-mode, then
norang is a much better spot to start. This is especially true for the
org time and project management material - Bernt's code is so good I
pretty much dropped his init file in and it all worked out of the box.

I have spent some time using the org productivity tools and all I can
do is quote Douglas Adams.

#+BEGIN_QUOTE
I love deadlines. I like the whooshing sound they make as they fly by.
-- Douglas Adams
#+END_QUOTE

This file is more about documenting the code and environment needed to
reproduce [[scarecapital.com][my]] research.

<<<<<<< HEAD
*** other dot emacs files
	 :LOGBOOK:  
	 CLOCK: [2012-04-12 Thu 23:14]--[2012-04-12 Thu 23:16] =>  0:02
	 CLOCK: [2012-04-12 Thu 22:43]--[2012-04-12 Thu 22:57] =>  0:14
	 :END:      

- [ ] add new ones

There are many, many dot files out there and anyone who has used emacs
before emacs24 has spent time looking for themselves.  Some
recommended reading:

[[info:emacs#Init%20File][info:emacs#Init File]]
http://www.emacswiki.org/emacs/RobertAdesamConfig
http://robert-adesam.blogspot.com.au/2011/01/emacsclient-setup-on-windows-7-starter.html
http://www.emacswiki.org/emacs/EmacsInitFileOfSylecn
http://a-nickels-worth.blogspot.com.au/2007/11/effective-emacs.html

*** local copies                                                   :noexport:

[[file:~/projects/learning_org/RA-init.el::%3B%3B%3B][file:~/projects/learning_org/RA-init.el]]
[[file:~/projects/learning_org/EmacsInitFileOfSylecn.txt]]


=======
>>>>>>> fixing-org
* Starting guff
:PROPERTIES:
:tangle: yes
:END:
** Load path
:PROPERTIES:
:OPEN:     [2012-10-11 Thu 13:19]
:LAST:     [2012-10-11 Thu 13:19]
:CLOSE:    [2012-10-11 Thu 13:19]
:END:

** Starter Kit Modifications

The orginal starter kit files have been modified in several areas:

- shift-select-mode turned on (my brain is hardwired like
  that) and a add few other personal tweaks
- I am trying out hunspell as a replacement for Aspell
- added some lisp dependencies
  - clojure-mode
  - slime (?)
- modified ido (not sure whether this was actually necessary)
- added this file to registers
- added to bindings

** Installs

- Package Installs

Just because I can, I list out all the packages I currently like
having (or resent having to have).

- Being split into relevant file deps
| package              | note                            |
|----------------------+---------------------------------|
| auctex               | defer                           |
| clojure-mode         | add to sk lisp                  |
| elisp-slime-nav      | add to sklisp                   |
| find-file-in-project | delay                           |
| idle-highlight-...   | incomplete                      |
| ido-ubiquitous       | package add elsewhere           |
| js-comint            |                                 |
| js2-mode             |                                 |
| json                 |                                 |
| magit                | added already                   |
| magithub             | learn                           |
| org                  | override from org-mode.org site |
| org-magit            |                                 |
| org2blog             |                                 |
| paredit              | package add                     |
| slime                | check                           |
| smex                 |                                 |
| xml-rpc              | dep for org2blog                |
| yaml-mode            | check                           |
| yasnippet-bundle     | sk added already                |
| zenburn-theme        | check how themes are added      |
|                      |                                 |





#+begin_src emacs-lisp  :tangle no
  (defvar starter-kit-packages-extra
        '(clojure-mode 
                elisp-slime-nav
                js-comint
                js2-mode
                json
                magithub
                org-magit
                org2blog
                paredit
                slime
                smex
                xml-rpc
                yaml-mode
                zenburn-theme)
        "Libraries that should be installed beyond the defaults.")
#+end_src

#+RESULTS:
: starter-kit-packages-extra



#+begin_src emacs-lisp
(unless package-archive-contents
  (package-refresh-contents))
(dolist (package '(clojure-mode 
                   elisp-slime-nav
                   js-comint
                   js2-mode
                   json
                   magithub
                   org-magit
                   org2blog
                   paredit
                   slime
                   smex
                   xml-rpc
                   yaml-mode
                   zenburn-theme))
  (unless (package-installed-p package)
    (package-install package)))
#+end_src

- Starter Kit Loads
  #+begin_src emacs-lisp
    (starter-kit-load "eshell")
    (starter-kit-load "lisp")
    (starter-kit-load "misc-recommended")
  #+end_src

- Theme Loads
  - [ ] not sure how custom path gets modified

  #+begin_src emacs-lisp
    ;;(add-to-list 'custom-theme-load-path
    ;;           (concat package-user-dir
    ;;           '"/github-theme-0.0.3/"))
    (load-theme 'zenburn t)
    ;(load-theme 'github t)
  #+end_src

  

* personal loads
** Org                                                                 :org:
:LOGBOOK:
- State "TODO"       from ""           [2012-07-19 Thu 09:49]
:END:
:PROPERTIES:
		:ID:       29d70d42-d144-4fe0-b28b-0edfa6cf91cc
                :OPEN:     [2012-07-21 Sat 20:51]
:LAST: TODO [2012-07-23 Mon 11:27]
		:END:

*** Standard Settings
I start with Org mode
#+begin_src emacs-lisp 
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
  (add-hook 'org-mode-hook 'auto-fill-mode)
  (setq initial-major-mode (quote org-mode))
#+end_src

#+results:
: org-mode

*** Miscellaneous Settings
#+begin_src emacs-lisp 
  ;; shift-select
  (setq org-support-shift-select t)
  ;; keeps links so we can reuse/paste them again
  (setq org-keep-stored-link-after-insertion t)
  
#+end_src

#+results:
: t

*** Starter Kit Keybindings
   :PROPERTIES:
   :CUSTOM_ID: keybindings
   :END:
- global key bindings are in my [[file:starter-kit-bindings.org][starter kit bindings]]
- [ ] toggle iimage not worging
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-iimage-in-org)))
#+end_src

#+results:
| #[nil \300\301\302\303\304$\207 [add-hook before-save-hook org-encrypt-entries nil t] 5] | #[nil \300\301\302\303\304$\207 [org-add-hook change-major-mode-hook org-show-block-all append local] 5] | (lambda nil (local-set-key \216 (quote outline-next-visible-heading)) (local-set-key \220 (quote outline-previous-visible-heading)) (local-set-key \225 (quote outline-up-heading)) (local-set-key \227 (quote org-table-copy-region)) (local-set-key \231 (quote org-table-paste-rectangle)) (local-set-key \214 (quote org-table-sort-lines)) (local-set-key \311 (quote org-toggle-iimage-in-org))) | auto-fill-mode | #[nil \300\301\302\303\304$\207 [org-add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

*** remaining key bindings
:PROPERTIES:
			:ID:       c0914200-d73d-4205-aba1-6cca8b2dd8f1
			:Effort:   0:15
                        :OPEN:     [2012-07-23 Mon 12:22]
:LAST:     [2012-10-11 Thu 13:11]
:CLOSE:    [2012-10-11 Thu 13:11]
			:END:

- [ ] still to rip and test
- [ ] switch to locally set???
#+begin_src emacs-lisp 
(global-set-key (kbd "<f5>") 'bh/org-todo)
(global-set-key (kbd "<S-f5>") 'bh/widen)
(global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
(global-set-key (kbd "<f9> c") 'org-cycle-agenda-files)
(global-set-key (kbd "<f9> <f9>") 'bh/show-org-agenda)
(global-set-key (kbd "<f9> h") 'bh/hide-other)
(global-set-key (kbd "<f9> n") 'org-narrow-to-subtree)
(global-set-key (kbd "<f9> w") 'widen)
(global-set-key (kbd "<f9> u") 'bh/narrow-up-one-level)
(global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
(global-set-key (kbd "<f9> v") 'visible-mode)
(global-set-key (kbd "<f9> p") 'org-publish-current-project)
(global-set-key (kbd "<f9> l") 'org-insert-last-link)
(global-set-key (kbd "M-<f9>") 'org-toggle-inline-images)
(global-set-key (kbd "C-x n r") 'narrow-to-region)
(global-set-key (kbd "C-c s") 'org-insert-subheading)
#+end_src

#+results:
: org-insert-subheading

*** search
 #+begin_src emacs-lisp  
(setq org-link-abbrev-alist
       '(("bugzilla"  . "http://10.1.2.9/bugzilla/show_bug.cgi?id=")
         ("url-to-ja" . "http://translate.google.fr/translate?sl=en&tl=ja&u=%h")
         ("google"    . "http://www.google.com/search?q=")
         ("gmap"      . "http://maps.google.com/maps?q=%s")
         ("omap"      . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
         ("ads"       .
         "http://adsabs.harvard.edu/cgi-bin/nph-abs_connect?author=%s&db_key=AST")))
#+end_src

 #+results:
 | (bugzilla . http://10.1.2.9/bugzilla/show_bug.cgi?id=) | (url-to-ja . http://translate.google.fr/translate?sl=en&tl=ja&u=%h) | (google . http://www.google.com/search?q=) | (gmap . http://maps.google.com/maps?q=%s) | (omap . http://nominatim.openstreetmap.org/search?q=%s&polygon=1) | (ads . http://adsabs.harvard.edu/cgi-bin/nph-abs_connect?author=%s&db_key=AST) |

[[google:goofy]]

*** Encryption within Org
#+begin_src emacs-lisp 
(require 'org-crypt)
; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
; GPG key to use for encryption
(setq org-crypt-key nil)
(setq org-crypt-disable-auto-save nil)
#+end_src

#+results:



*** MobileOrg
:PROPERTIES:
:OPEN: [2012-07-23 Mon 11:48]
:LAST:     [2012-09-16 Sun 09:11]
:CLOSE:    [2012-09-16 Sun 09:11]
:END:

MobileOrg via Dropbox
#+begin_src emacs-lisp 
  (setq org-default-notes-file "~/stuff/org/refile.org")
  ;; Set to the name of the file where new notes will be stored
  (setq org-mobile-inbox-for-pull "~/stuff/org/refile.org")
  ;; Set to <your Dropbox root directory>/MobileOrg.
  (setq org-mobile-directory "~/Dropbox/MobileOrg")
#+end_src

#+results:
: ~/Dropbox/MobileOrg


Character encoding
- [ ] I think the character coding is already set ok by starter kit (but need to check)
#+begin_src emacs-lisp :tangle no
(if (eq system-type 'darwin)
    (progn
      (prefer-coding-system 'utf-8-unix)
      (set-default-coding-systems 'utf-8-unix)
      (if (< emacs-major-version 23)
          (set-keyboard-coding-system 'utf-8))
      (set-clipboard-coding-system 'utf-8)
      (set-terminal-coding-system 'utf-8)))
(if (or (eq system-type 'gnu/linux)
        (eq system-type 'windows-nt))
    (progn
      (prefer-coding-system 'utf-8-unix)
      (load-library "iso-transl")))
(define-coding-system-alias 'utf-8-emacs 'utf-8) ; needed by bbdb...
#+end_src

#+results:

*** Clocking into drawers
#+begin_src emacs-lisp 
;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
#+end_src

#+results:
: t


*** State and Change
:PROPERTIES:
:OPEN: [2012-07-23 Mon 19:44]
:LAST:  [2012-07-23 Mon 20:24]
:CLOSE: [2012-07-23 Mon 20:24]
:END:
- I use a customised state change hook to record when state changes occur.
#+begin_src emacs-lisp 
(setq org-log-done nil)
(setq org-log-into-drawer t)
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)"))))
(setq org-use-fast-todo-selection t)
(setq org-treat-S-cursor-todo-selection-as-state-change t)
(setq org-todo-state-tags-triggers nil)
;;(add-hook 'org-after-todo-state-change-hook 'zyg/log-state-change)
#+end_src

#+results:
| org-clock-out-if-current | org-checklist | zyg/log-state-change |

- It's frustrating, but org is usually correct
#+begin_src emacs-lisp 
(setq org-enforce-todo-dependencies t)
#+end_src

#+results:
: t

  
*** Plain Lists


- Demotion
  #+begin_src emacs-lisp 
  (setq org-list-demote-modify-bullet (quote (("+" . "-")
                                              ("*" . "-")
                                              ("1." . "-")
                                              ("1)" . "-"))))
  #+end_src

  #+results:
  | (+ . -) | (* . -) | (1. . -) | (1) . -) |

- Reset Repeater Checklist
  Repeater checklists saved my career.
  http://orgmode.org/worg/org-contrib/org-checklist.html
  #+begin_src emacs-lisp 
  (require 'org-checklist)
  #+end_src

  #+results:
  : org-checklist

- Use cycle for plain lists
  #+begin_src emacs-lisp 
  (setq org-cycle-include-plain-lists t)
  #+end_src

  #+results:
  : t



*** Priority

Using priorities kills the ability to ever use S-down to select
regions.  Can't bring myself to do it - instead I use an urgent tag.

#+begin_src emacs-lisp 
  (setq org-enable-priority-commands nil)
#+end_src

#+results:


*** Capture
:LOGBOOK:
CLOCK: [2012-08-23 Thu 20:49]--[2012-08-24 Fri 10:02] => 13:13
- Note taken on [2012-07-21 Sat 21:09] \\
  edited to account for timestamp stuff
:END:
:PROPERTIES:
:ID:       e79ecad1-2428-452a-b9d6-9fdd3ef8a174
:END:



#+begin_src emacs-lisp 
  
  (setq org-capture-templates
        (quote (("t" "todo (with link)" entry (file "~/stuff/org/refile.org")
                 "* TODO %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n%a\n")
                ("j" "Journal" entry (file+datetree "~/stuff/org/diary.org")
                 "* %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n")
                ("u" "urgent todo" entry (file "~/stuff/org/refile.org")
                 "* TODO %? :urgent:\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n")
                ("n" "note" entry (file "~/stuff/org/refile.org")
                 "* %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n")
                ("z" "bugz" entry (file+headline "~/stuff/org/bugz.org" "incoming")
                 "* TODO %?\n:PROPERTIES:\n:OPEN: %U\n:LAST:%U\n:END:\n%a\n")
                ("i" "instadev" entry (file+headline "~/stuff/content/ideas.org" "instadev")
                 "* %c\n")
                ("s" "snipz")  
                ("sr" "snipz request" entry (file+headline "~/stuff/org/snipz.org" "incoming")
                 "* TODO %?\n:PROPERTIES:\n:OPEN: %U\n:LAST:%U\n:END:\n%a\n")
                ("sn" "snipz note" entry (file+headline "~/stuff/org/snipz.org" "incoming")
                 "* %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n%c\n")
                ("b" "binding" entry (file+headline "~/stuff/org/snipz.org" "bindings")
                 "* %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:")
                ("k" "kill ring")
                ("kb" "kill ring body" entry (file "~/stuff/org/refile.org")
                 "* %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n%c")
                ("kh" "kill ring head" entry (file "~/stuff/org/refile.org")
                 "* TODO %c\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n%?"))))
  
#+end_src

#+results:
| t  | todo (with link) | entry | (file ~/stuff/org/refile.org)                      | * TODO %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n%a\n      |
| j  | Journal          | entry | (file+datetree ~/stuff/org/diary.org)              | * %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n               |
| u  | urgent todo      | entry | (file ~/stuff/org/refile.org)                      | * TODO %? :urgent:\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n |
| n  | note             | entry | (file ~/stuff/org/refile.org)                      | * %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n               |
| z  | bugz             | entry | (file+headline ~/stuff/org/bugz.org incoming)      | * TODO %?\n:PROPERTIES:\n:OPEN: %U\n:LAST:%U\n:END:\n%a\n       |
| i  | instadev         | entry | (file+headline ~/stuff/content/ideas.org instadev) | * %c\n                                                          |
| s  | snipz            |       |                                                    |                                                                 |
| sr | snipz request    | entry | (file+headline ~/stuff/org/snipz.org incoming)     | * TODO %?\n:PROPERTIES:\n:OPEN: %U\n:LAST:%U\n:END:\n%a\n       |
| sn | snipz note       | entry | (file+headline ~/stuff/org/snipz.org incoming)     | * %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n%c\n           |
| b  | binding          | entry | (file+headline ~/stuff/org/snipz.org bindings)     | * %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:                 |
| k  | kill ring        |       |                                                    |                                                                 |
| kb | kill ring body   | entry | (file ~/stuff/org/refile.org)                      | * %?\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n%c             |
| kh | kill ring head   | entry | (file ~/stuff/org/refile.org)                      | * TODO %c\n:PROPERTIES:\n:OPEN: %U\n:LAST: %U\n:END:\n%?        |




*** Refiling
CLOSED: [2012-07-20 Fri 00:20]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2012-07-20 Fri 00:20]
- State "NEXT"       from "TODO"       [2012-07-20 Fri 00:20]
- State "TODO"       from ""           [2012-07-19 Thu 22:43]
:END:

#+begin_src emacs-lisp  
; Targets include this file and any file contributing to the agenda - up to 4 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 4)
                                 (org-agenda-files :maxlevel . 4))))
; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)
; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)
; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))
; every header is a refile target
(setq org-refile-target-verify-function nil)
; use IDO
(setq org-completion-use-ido t)

#+end_src

#+results:

*** Agenda view
:PROPERTIES:
		:Effort:   0.45
:OPEN: [2012-07-23 Mon 19:45]
:LAST:  [2012-07-23 Mon 20:24]
:CLOSE: [2012-07-23 Mon 20:24]
:ID: b6b3a794-7836-4259-8b9c-92ce0a35cd24
		:END:

Startup should take this table and create the org-agenda-files list.

#+TBLNAME: agenda-files-table
| stuff           | meta.org                    |                   |
| .emacs.d        | README.org                  |                   |
| stuff           | org                         | refile.org        |
| stuff           | org                         | bugz.org          |
| stuff           | org                         | snipz.org         |
| stuff           | org                         | org.org           |
| stuff           | emacs                       | emacs.org         |
| stuff           | sys                         | sys.org           |
| stuff           | biz                         | scarce.org        |
| stuff           | site                        | landing.org       |
| stuff           | site                        | scarcecapital.org |
| stuff           | content                     | life.org          |
| stuff           | content                     | writing.org       |
| stuff           | dev                         | webdev.org        |
| stuff           | emacs                       | bindings.org      |
| stuff           | sys                         | git.org           |
| stuff           | factor                      | factor.org        |
| stuff           | dev                         | jsdev.org         |
| stuff           | content                     | ideas.org         |
| git             | emfx_R                      | emfx.org          |
| git             | emfx_R                      | volatility.org    |
| git             | emfx_R                      | rdev.org          |
| git             | emfx_R                      | xkcd.org          |
| emfx            | README.org                  |                   |

- function to reset org-agenda-files based on the above table of directories
  and files
  #+begin_src emacs-lisp :var table=agenda-files-table
    (setq clean-table
          (delete nil  
                  (loop for line in table
                        collect 
                        (delete "" (delete-dups line)))))
    
    (setq org-agenda-files 
          (mapcar
           (lambda (x) 
             (concat "~/"
                     (mapconcat
                      'eval x "/")))
           clean-table))
  #+end_src

  #+results:
  | ~/stuff/meta.org | ~/.emacs.d/README.org | ~/stuff/org/refile.org | ~/stuff/org/bugz.org | ~/stuff/org/snipz.org | ~/stuff/org/org.org | ~/stuff/emacs/emacs.org | ~/stuff/sys/sys.org | ~/stuff/biz/scarce.org | ~/stuff/site/landing.org | ~/stuff/site/scarcecapital.org | ~/stuff/content/life.org | ~/stuff/content/writing.org | ~/stuff/dev/webdev.org | ~/stuff/emacs/bindings.org | ~/stuff/sys/git.org | ~/stuff/factor/factor.org | ~/stuff/dev/jsdev.org | ~/stuff/content/ideas.org | ~/git/emfx_R/emfx.org | ~/git/emfx_R/volatility.org | ~/git/emfx_R/rdev.org | ~/git/emfx_R/xkcd.org | ~/emfx/README.org |



- (Manual) Agenda Files (turned off)
  #+begin_src emacs-lisp :tangle no
    ;; the entire directory (hand edit this)
    (setq org-agenda-files (quote ("~/stuff/org/refile.org"
                                   "~/stuff/org/org.org"
                                   "~/stuff/org/bugz.org"
                                   "~/stuff/org/snipz.org"
                                   "~/stuff/biz/scarce.org"
                                   "~/stuff/meta.org"
                                   "~/stuff/content/life.org"
                                   "~/stuff/content/writing.org"
                                   "~/stuff/emacs/emacs.org"
                                   "~/stuff/emacs/bindings.org"
                                   "~/.emacs.d/tonyday.org"
                                   "~/.emacs.d/starter-kit-tonyday-org.org"
                                   "~/stuff/sys/sys.org"
                                   "~/stuff/sys/migrate.org"
                                   "~/stuff/site/scarcecapital.org"
                                   "~/stuff/dev/webdev.org"
                                   "~/stuff/sys/git.org"
                                   "~/stuff/factor/momentum/qic.org"
                                   "~/stuff/factor/emfx.org"
                                   "~/stuff/factor/factor.org"
                                   "~/emfx/emfx.org"
                                   "~/dotemacs-mashup/README.org"
                                   "~/stuff/dev/rdev.org"
                                   "~/stuff/dev/jsdev.org"
                                   "~/stuff/dev/webdev.org"
                                   "~/stuff/content/quant.org"
                                   "~/stuff/content/ideas.org")))
    
  #+end_src

  #+results:
  | ~/stuff/org/refile.org | ~/stuff/org/org.org | ~/stuff/org/bugz.org | ~/stuff/org/snipz.org | ~/stuff/biz/scarce.org | ~/stuff/meta.org | ~/stuff/content/life.org | ~/stuff/content/writing.org | ~/stuff/emacs/emacs.org | ~/stuff/emacs/bindings.org | ~/.emacs.d/tonyday.org | ~/.emacs.d/starter-kit-tonyday-org.org | ~/stuff/sys/sys.org | ~/stuff/sys/migrate.org | ~/stuff/site/scarcecapital.org | ~/stuff/dev/webdev.org | ~/stuff/sys/git.org | ~/stuff/factor/momentum/qic.org | ~/stuff/factor/emfx.org | ~/stuff/factor/factor.org | ~/emfx/emfx.org | ~/dotemacs-mashup/README.org | ~/stuff/dev/rdev.org | ~/stuff/dev/jsdev.org | ~/stuff/dev/webdev.org | ~/stuff/content/quant.org | ~/stuff/content/ideas.org |

- disable =C-c [=
  I adopt the same system as =norang=.  It becomes difficult to
  remember what's on and not on the agenda
 #+begin_src emacs-lisp
   ;; Disable C-c [ and C-c ] in org-mode
   (add-hook 'org-mode-hook
             (lambda ()
               ;; Undefine C-c [ and C-c ] since this breaks my
               ;; org-agenda files when directories are include It
               ;; expands the files in the directories individually
               (org-defkey org-mode-map "\C-c["    'undefined)
               (org-defkey org-mode-map "\C-c]"    'undefined))
             'append)
  #+end_src




Standard settings
#+begin_src emacs-lisp 
  ;; Compact the block agenda view
  (setq org-agenda-compact-blocks t)
  
  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)
  (setq org-agenda-span 'day)
  (setq org-stuck-projects (quote ("" nil nil "")))

#+end_src

#+results:
|   | nil | nil |   |

- Custom agenda
  This custom view is lidted straight from =norang=.  I have no idea
  how it does what it does, nor what it actually does, but it works
  for me.
  #+begin_src emacs-lisp :tangle yes
    ;; Custom agenda command definitions
    (setq org-agenda-custom-commands
          (quote (("N" "Notes" tags "NOTE"
                   ((org-agenda-overriding-header "Notes")
                    (org-tags-match-list-sublevels t)))
                  ("h" "Habits" tags-todo "STYLE=\"habit\""
                   ((org-agenda-overriding-header "Habits")
                    (org-agenda-sorting-strategy
                     '(todo-state-down effort-up category-keep))))
                  (" " "Agenda"
                   ((agenda "" nil)
                    (tags "REFILE"
                          ((org-agenda-overriding-header "Tasks to Refile")
                           (org-tags-match-list-sublevels nil)))
                    (tags-todo "-CANCELLED/!"
                               ((org-agenda-overriding-header "Stuck Projects")
                                (org-agenda-skip-function 'bh/skip-non-stuck-projects)))
                    (tags-todo "-WAITING-CANCELLED/!NEXT"
                               ((org-agenda-overriding-header "Next Tasks")
                                (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                                (org-agenda-todo-ignore-scheduled t)
                                (org-agenda-todo-ignore-deadlines t)
                                (org-tags-match-list-sublevels t)
                                (org-agenda-sorting-strategy
                                 '(todo-state-down effort-up category-keep))))
                    (tags-todo "-REFILE-CANCELLED/!-HOLD-WAITING"
                               ((org-agenda-overriding-header "Tasks")
                                (org-agenda-skip-function 'bh/skip-project-tasks-maybe)
                                (org-agenda-todo-ignore-scheduled t)
                                (org-agenda-todo-ignore-deadlines t)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-CANCELLED/!"
                               ((org-agenda-overriding-header "Projects")
                                (org-agenda-skip-function 'bh/skip-non-projects)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-CANCELLED/!WAITING|HOLD"
                               ((org-agenda-overriding-header "Waiting and Postponed Tasks")
                                (org-tags-match-list-sublevels nil)
                                (org-agenda-todo-ignore-scheduled 'future)
                                (org-agenda-todo-ignore-deadlines 'future)))
                    (tags "-REFILE/"
                          ((org-agenda-overriding-header "Tasks to Archive")
                           (org-agenda-skip-function 'bh/skip-non-archivable-tasks))))
                   nil)
                  ("r" "Tasks to Refile" tags "REFILE"
                   ((org-agenda-overriding-header "Tasks to Refile")
                    (org-tags-match-list-sublevels nil)))
                  ("#" "Stuck Projects" tags-todo "-CANCELLED/!"
                   ((org-agenda-overriding-header "Stuck Projects")
                    (org-agenda-skip-function 'bh/skip-non-stuck-projects)))
                  ("n" "Next Tasks" tags-todo "-WAITING-CANCELLED/!NEXT"
                   ((org-agenda-overriding-header "Next Tasks")
                    (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                    (org-agenda-todo-ignore-scheduled t)
                    (org-agenda-todo-ignore-deadlines t)
                    (org-tags-match-list-sublevels t)
                    (org-agenda-sorting-strategy
                     '(todo-state-down effort-up category-keep))))
                  ("R" "Tasks" tags-todo "-REFILE-CANCELLED/!-HOLD-WAITING"
                   ((org-agenda-overriding-header "Tasks")
                    (org-agenda-skip-function 'bh/skip-project-tasks-maybe)
                    (org-agenda-sorting-strategy
                     '(category-keep))))
                  ("p" "Projects" tags-todo "-CANCELLED/!"
                   ((org-agenda-overriding-header "Projects")
                    (org-agenda-skip-function 'bh/skip-non-projects)
                    (org-agenda-sorting-strategy
                     '(category-keep))))
                  ("w" "Waiting Tasks" tags-todo "-CANCELLED/!WAITING|HOLD"
                   ((org-agenda-overriding-header "Waiting and Postponed tasks"))
                   (org-tags-match-list-sublevels nil))
                  ("A" "Tasks to Archive" tags "-REFILE/"
                   ((org-agenda-overriding-header "Tasks to Archive")
                    (org-agenda-skip-function 'bh/skip-non-archivable-tasks))))))
  #+end_src

  #+results:
  | N | Notes            | tags| NOTE                                                                                                                                                                                                                                                                                                                                          | ((org-agenda-overriding-header Notes) (org-tags-match-list-sublevels t))                                                                                                                                                                                                                                                |                                                              |                                     |
  | h | Habits           | tags-todo                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | STYLE="habit"                                                                                                                                                                                                                                                                                                                                 | ((org-agenda-overriding-header Habits) (org-agenda-sorting-strategy (quote (todo-state-down effort-up category-keep))))                                                                                                                                                                                                 |                                                              |                                     |
  |   | Agenda           | ((agenda  nil) (tags REFILE ((org-agenda-overriding-header Tasks to Refile) (org-tags-match-list-sublevels nil))) (tags-todo -CANCELLED/! ((org-agenda-overriding-header Stuck Projects) (org-agenda-skip-function (quote bh/skip-non-stuck-projects)))) (tags-todo -WAITING-CANCELLED/!NEXT ((org-agenda-overriding-header Next Tasks) (org-agenda-skip-function (quote bh/skip-projects-and-habits-and-single-tasks)) (org-agenda-todo-ignore-scheduled t) (org-agenda-todo-ignore-deadlines t) (org-tags-match-list-sublevels t) (org-agenda-sorting-strategy (quote (todo-state-down effort-up category-keep))))) (tags-todo -REFILE-CANCELLED/!-HOLD-WAITING ((org-agenda-overriding-header Tasks) (org-agenda-skip-function (quote bh/skip-project-tasks-maybe)) (org-agenda-todo-ignore-scheduled t) (org-agenda-todo-ignore-deadlines t) (org-agenda-sorting-strategy (quote (category-keep))))) (tags-todo -CANCELLED/! ((org-agenda-overriding-header Projects) (org-agenda-skip-function (quote bh/skip-non-projects)) (org-agenda-sorting-strategy (quote (category-keep))))) (tags-todo -CANCELLED/!WAITING | HOLD ((org-agenda-overriding-header Waiting and Postponed Tasks) (org-tags-match-list-sublevels nil) (org-agenda-todo-ignore-scheduled (quote future)) (org-agenda-todo-ignore-deadlines (quote future)))) (tags -REFILE/ ((org-agenda-overriding-header Tasks to Archive) (org-agenda-skip-function (quote bh/skip-non-archivable-tasks))))) | nil                                                                                                                                                                                                                                                                                                                     |                                                              |                                     |
  | r | Tasks to Refile  | tags| REFILE                                                                                                                                                                                                                                                                                                                                        | ((org-agenda-overriding-header Tasks to Refile) (org-tags-match-list-sublevels nil))                                                                                                                                                                                                                                    |                                                              |                                     |
  | # | Stuck Projects   | tags-todo| -CANCELLED/!                                                                                                                                                                                                                                                                                                                                  | ((org-agenda-overriding-header Stuck Projects) (org-agenda-skip-function (quote bh/skip-non-stuck-projects)))                                                                                                                                                                                                           |                                                              |                                     |
  | n | Next Tasks       | tags-todo| -WAITING-CANCELLED/!NEXT                                                                                                                                                                                                                                                                                                                      | ((org-agenda-overriding-header Next Tasks) (org-agenda-skip-function (quote bh/skip-projects-and-habits-and-single-tasks)) (org-agenda-todo-ignore-scheduled t) (org-agenda-todo-ignore-deadlines t) (org-tags-match-list-sublevels t) (org-agenda-sorting-strategy (quote (todo-state-down effort-up category-keep)))) |                                                              |                                     |
  | R | Tasks            | tags-todo| -REFILE-CANCELLED/!-HOLD-WAITING                                                                                                                                                                                                                                                                                                              | ((org-agenda-overriding-header Tasks) (org-agenda-skip-function (quote bh/skip-project-tasks-maybe)) (org-agenda-sorting-strategy (quote (category-keep))))                                                                                                                                                             |                                                              |                                     |
  | p | Projects         | tags-todo| -CANCELLED/!                                                                                                                                                                                                                                                                                                                                  | ((org-agenda-overriding-header Projects) (org-agenda-skip-function (quote bh/skip-non-projects)) (org-agenda-sorting-strategy (quote (category-keep))))                                                                                                                                                                 |                                                              |                                     |
  | w | Waiting Tasks    | tags-todo| -CANCELLED/!WAITING                                                                                                                                                                                                                                                                                                                           | HOLD                                                                                                                                                                                                                                                                                                                    | ((org-agenda-overriding-header Waiting and Postponed tasks)) | (org-tags-match-list-sublevels nil) |
  | A | Tasks to Archive | tags| -REFILE/                                                                                                                                                                                                                                                                                                                                      | ((org-agenda-overriding-header Tasks to Archive) (org-agenda-skip-function (quote bh/skip-non-archivable-tasks)))                                                                                                                                                                                                       |                                                              |                                     |




*** Agenda Keys
:PROPERTIES:
:OPEN: [2012-07-23 Mon 20:41]
:LAST: NEXT [2012-08-01 Wed 15:08]
:END:

Most of these agenda commands are from =norang=.  The defuns are
defined [[file:starter-kit-zyg-defuns-org.org::*%3Dnorang%3D%20defuns][here]].

#+begin_src emacs-lisp 
(add-hook 'org-agenda-mode-hook
          (lambda ()
            (define-key org-agenda-mode-map "q" 'bury-buffer))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "F" 'bh/restrict-to-file-or-follow))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "W" 'bh/widen))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "N" 'bh/narrow-to-subtree))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "P" 'bh/narrow-to-project))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "U" 'bh/narrow-up-one-level))
          'append)
(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "\C-c\C-x<" 'bh/set-agenda-restriction-lock))
          'append)
#+end_src

#+results:
| lambda | nil | (define-key org-agenda-mode-map q (quote bury-buffer))                        |
| lambda | nil | (org-defkey org-agenda-mode-map F (quote bh/restrict-to-file-or-follow))      |
| lambda | nil | (org-defkey org-agenda-mode-map W (quote bh/widen))                           |
| lambda | nil | (org-defkey org-agenda-mode-map N (quote bh/narrow-to-subtree))               |
| lambda | nil | (org-defkey org-agenda-mode-map P (quote bh/narrow-to-project))               |
| lambda | nil | (org-defkey org-agenda-mode-map U (quote bh/narrow-up-one-level))             |
| lambda | nil | (org-defkey org-agenda-mode-map < (quote bh/set-agenda-restriction-lock)) |
| lambda | nil | (hl-line-mode 1)                                                              |

*** Agenda Settings - Miscellaneous
:PROPERTIES:
:OPEN: [2012-08-01 Wed 13:57]
:CLOSE: [2012-08-01 Wed 13:57]
:LAST:  [2012-08-01 Wed 13:57]
:END:

These follow the =norang= suggestions  
#+begin_src emacs-lisp 
;; Always hilight the current agenda line
(add-hook 'org-agenda-mode-hook
          '(lambda () (hl-line-mode 1))
          'append)

;; Keep tasks with dates on the global todo lists
(setq org-agenda-todo-ignore-with-date nil)

;; Keep tasks with deadlines on the global todo lists
(setq org-agenda-todo-ignore-deadlines nil)

;; Keep tasks with scheduled dates on the global todo lists
(setq org-agenda-todo-ignore-scheduled nil)

;; Keep tasks with timestamps on the global todo lists
(setq org-agenda-todo-ignore-timestamp nil)

;; Remove completed deadline tasks from the agenda view
(setq org-agenda-skip-deadline-if-done t)

;; Remove completed scheduled tasks from the agenda view
(setq org-agenda-skip-scheduled-if-done t)

;; Remove completed items from search results
(setq org-agenda-skip-timestamp-if-done t)

(setq org-agenda-include-diary nil)
(setq org-agenda-diary-file (expand-file-name "~/org/diary.org"))

(setq org-agenda-insert-diary-extract-time t)

;; Include agenda archive files when searching for things
(setq org-agenda-text-search-extra-files (quote (agenda-archives)))

;; Show all future entries for repeating tasks
(setq org-agenda-repeating-timestamp-show-all t)

;; Show all agenda dates - even if they are empty
(setq org-agenda-show-all-dates t)

;; Start the weekly agenda on Monday
(setq org-agenda-start-on-weekday 1)

;; Enable display of the time grid so we can see the marker for the current time
(setq org-agenda-time-grid (quote ((daily today remove-match)
                                   #("----------------" 0 16 (org-heading t))
                                   (830 1000 1200 1300 1500 1700))))

;; Display tags farther right
(setq org-agenda-tags-column -102)

;; Keep filters in place
(setq org-agenda-persistent-filter t)




#+end_src

#+results:
: t




*** Agenda sort from =norang=

Defuns are defined [[file:starter-kit-zyg-defuns-org.org::*%3Dnorang%3D%20defuns][here]]. 
#+begin_src emacs-lisp
  
  ;; Sorting order for tasks on the agenda
  (setq org-agenda-sorting-strategy
        (quote ((agenda habit-down time-up user-defined-up priority-down effort-up category-keep)
                (todo category-up priority-down effort-up)
                (tags category-up priority-down effort-up)
                (search category-up))))
  ;;
  ;; Agenda sorting functions
  ;;
  (setq org-agenda-cmp-user-defined 'bh/agenda-sort)
#+end_src

#+results:
: bh/agenda-sort

*** Tags

#+begin_src emacs-lisp 

; Tags with fast selection keys
(setq org-tag-alist (quote (("urgent" . ?u)
                            ("bill" . ?b)
                            ("scarce" . ?s)
                            ("crypt" . ?c)
                            ("emacs" . ?e))))
                            
; Allow setting single tags without the menu
(setq org-fast-tag-selection-single-key (quote expert))

; For tag searches ignore tasks with scheduled and deadline dates
(setq org-agenda-tags-todo-honor-ignore-options nil)

#+end_src

#+results:

*** Archiving
:LOGBOOK:
- State "DONE"       from "NEXT"       [2012-07-19 Thu 23:19]
- State "NEXT"       from "TODO"       [2012-07-19 Thu 23:19]
- State "TODO"       from ""           [2012-07-19 Thu 23:19]
:END:

Anything with a =DONE= todo tag is a valid archiving candidate.
Though more often than not I'm going to set a section heading back to
=""= once I'm done.

#+begin_src emacs-lisp 
(setq org-archive-mark-done nil)
(setq org-archive-location "%s_archive::* Archived Tasks")
#+end_src

#+results:
: %s_archive::* Archived Tasks

*** Code Blocks
:PROPERTIES:
:OPEN: [2012-07-23 Mon 19:52]
:LAST: TODO [2012-07-23 Mon 19:52]
:END:

- lowercase results
  #+begin_src emacs-lisp 
  (setq org-babel-results-keyword "results")
  #+end_src

  #+results:
  : results

- languages used
  #+begin_src emacs-lisp 
    (org-babel-do-load-languages
       (quote org-babel-load-languages)
       (quote ((emacs-lisp . t)
               (sh . t)
               (gnuplot . t)
               (org . t)
               (octave . t)
               (js . t)
               (R . t))))
  #+end_src

  #+results:
  | (emacs-lisp . t) | (sh . t) | (gnuplot . t) | (org . t) | (octave . t) |

- Don't cache me
  #+begin_src emacs-lisp 
    (setq org-babel-default-header-args
    (cons '(:cache . "no")
    (assq-delete-all :cache org-babel-default-header-args)))
  #+end_src

  #+results:
  | (:cache . no) | (:session . *Inferior Octave*) | (:results . value) | (:results . replace) | (:exports . code) | (:noweb . no) | (:hlines . no) | (:tangle . no) | (:padnewline . yes) |

- Don't prompt me
  #+begin_src emacs-lisp 
  (setq org-confirm-babel-evaluate nil)
  #+end_src

  #+results:

- do not re-evaluate on export
  #+begin_src emacs-lisp 
  (setq org-export-babel-evaluate nil)
  #+end_src

  #+results:

- Use the current window for C-c ' source editing
  #+begin_src emacs-lisp 
  (setq org-src-window-setup 'current-window)
  #+end_src

  #+results:
  : current-window

- Always look your best
  #+begin_src emacs-lisp 
  (setq org-src-fontify-natively t)
  #+end_src

  #+results:
  : t

- I wish I'd known about this before.
  #+begin_src emacs-lisp 
  (setq org-src-tab-acts-natively t)
  #+end_src

  #+results:
  : t

  

*** Setting to get Octave Working
:PROPERTIES:
:ID: b142296d-b21d-4f4b-a462-3404ff6b4c57
:END:

- Results are value (needed for octave)
  #+begin_src emacs-lisp 
  (setq org-babel-default-header-args
       (cons '(:results . "value") org-babel-default-header-args)) 
  #+end_src

  #+results:
  | (:results . value) | (:cache . no) | (:session . *Inferior Octave*) | (:results . value) | (:results . replace) | (:exports . code) | (:noweb . no) | (:hlines . no) | (:tangle . no) | (:padnewline . yes) |

- [ ] inline images break my windows emacs 
  #+begin_src emacs-lisp 
  (setq org-startup-with-inline-images nil)
  #+end_src

  #+results:

- Single session for Octave
  - [ ] breaks other languages of course as it's a global variable
  - turning this off
  #+begin_src emacs-lisp :tangle no
  ; Run octave in the same session.  Without this set, octave opens
  ; and closes on every evaluation.
  (setq org-babel-default-header-args
         (cons '(:session . "*Inferior Octave*")
         (assq-delete-all :session org-babel-default-header-args)))
  #+end_src

  #+results:
  | (:session . *Inferior Octave*) | (:results . value) | (:cache . no) | (:results . value) | (:results . replace) | (:exports . code) | (:noweb . no) | (:hlines . no) | (:tangle . no) | (:padnewline . yes) |

- tangle octave files with a .m suffix
  #+begin_src emacs-lisp 
  (add-to-list 'org-babel-tangle-lang-exts '("octave" . "m"))
  #+end_src

  #+results:
  | (octave . m) | (emacs-lisp . el) |

- sub-scripts might mess with octave
  #+begin_src emacs-lisp 
  (setq org-use-sub-superscripts nil)
  #+end_src

  #+results:


*** Export settings
:LOGBOOK:
		 - State "DONE"       from "TODO"       [2012-05-29 Tue 09:10]
		 :END:
:PROPERTIES:
:Effort: 5:00
:ID: 85ec9756-18b2-4240-a021-7cfa8e6f718b
:END:

HTML exported using org looks so clean and stylish.

- no post-amble thanks
  #+begin_src emacs-lisp 
  (setq org-export-html-postamble nil)
  #+end_src

  #+results:

  
- Inline images in HTML instead of producting links to the image
  #+begin_src emacs-lisp 
  (setq org-export-html-inline-images t)
  #+end_src

  #+results:
  : t

- Using an external style file
  #+begin_src emacs-lisp 
    (setq org-export-html-style "<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>")
    (setq org-export-html-style-include-default nil)
  #+end_src

  #+results:

- Do not generate internal css formatting for HTML exports
  - [ ] try this out M-x org-export-htmlize-generate-css
  #+begin_src emacs-lisp 
  (setq org-export-htmlize-output-type (quote css))
  #+end_src

  #+results:
  : css

- Export with LaTeX fragments
  - [ ] dollar dollar bug
  #+begin_src emacs-lisp 
  (setq org-export-with-LaTeX-fragments t)
  #+end_src

  #+results:
  : t

- html decl
  #+begin_src emacs-lisp 
  (setq org-export-html-xml-declaration (quote (("html" . "")
                                                ("was-html" . "<?xml version=\"1.0\" encoding=\"%s\"?>")
                                                ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>"))))
  #+end_src

  #+results:
  | (html . ) | (was-html . <?xml version="1.0" encoding="%s"?>) | (php . <?php echo "<?xml version=\"1.0\" encoding=\"%s\" ?>"; ?>) |

- allow BIND to do its thing
  #+begin_src emacs-lisp 
  (setq org-export-allow-BIND t)
  #+end_src

  #+results:
  : t

- timestamps outside drawers are evil.
  #+begin_src emacs-lisp 
  (setq org-export-with-timestamps nil)
  #+end_src

  #+results:


*** Publishing
:PROPERTIES:
:OPEN: [2012-07-23 Mon 20:14]
:LAST:     [2012-10-11 Thu 13:31]
:CLOSE:    [2012-10-11 Thu 13:31]
:END:

This is still in test mode.

#+begin_src emacs-lisp 
  ;tmp - http://www.scarcecapital.com/qic
  (setq org-publish-project-alist
        ; mom-org are the org-files that generate the content
        ; mom-extra are images and css files that need to be included
        ; mom is the top-level project that gets published
        (quote (("mom-report-org"
                 :base-directory "~/projects/qic/momentum/draft"
                 :publishing-directory "~/pub/report"
                 ; :publishing-directory "/ssh:www-data@www:~/www.scarcecapital.com/tmp"
                 :recursive t
                 :section-numbers nil
                 :table-of-contents nil
                 :base-extension "org"
                 :publishing-function (org-publish-org-to-html org-publish-org-to-org)
                 :style "<link rel=\"stylesheet\" href=\"scarce.css\" type=\"text/css\" />"
                 :plain-source t
                 :htmlized-source t
                 :style-include-default nil
                 :auto-sitemap t
                 :sitemap-filename "index.html"
                 :sitemap-title "Momentum Report"
                 :sitemap-style "tree"
                 :author-info t
                 :creator-info t)
                ("mom-report-extra"
                 :base-directory "~/projects/qic/momentum/draft"
                 :publishing-directory "~/pub/report"
                 :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
                 :publishing-function org-publish-attachment
                 :recursive t
                 :author nil)
                ("mom-report"
                 :components ("mom-report-org" "mom-report-extra"))
                ; tmp for quick testing
                ("tmp-org"
                 :base-directory "~/tmp/publish"
                 :publishing-directory "~/pub/tmp"
                 ; :publishing-directory "/ssh:www-data@www:~/www.scarcecapital.com/tmp"
                 :recursive t
                 :section-numbers nil
                 :table-of-contents nil
                 :base-extension "org"
                 :publishing-function (org-publish-org-to-html org-publish-org-to-org)
                 ;:style "<link rel=\"stylesheet\" href=\"http://scarcecapital.com/tmp/org.css\" type=\"text/css\" />"
                 ; I assume you can then just put the stylesheet in the directory (tmp) and all is cool
                 :style "<link rel=\"stylesheet\" href=\"org.css\" type=\"text/css\" />"
                 :plain-source t
                 :htmlized-source t
                 :style-include-default nil
                 :auto-sitemap t
                 :sitemap-filename "index.html"
                 :sitemap-title "Test Publishing Environment"
                 :sitemap-style "tree"
                 :author-info t
                 :creator-info t)
                ("tmp-extra"
                 :base-directory "~/tmp/publish/"
                 :publishing-directory "~/pub/tmp"
                 :base-extension "css\\|pdf\\|png\\|jpg\\|gif\\|el"
                 :publishing-function org-publish-attachment
                 :recursive t
                 :author nil)
                ("tmp"
                 :components ("tmp-org" "tmp-extra"))
                ; mom-dev is a testing version
                ("mom-dev-org"
                 :base-directory "~/projects/momentum/dev"
                 :publishing-directory "~/pub/dev"
                 ; :publishing-directory "/ssh:www-data@www:~/www.scarcecapital.com/tmp"
                 :recursive t
                 :section-numbers nil
                 :table-of-contents nil
                 :base-extension "org"
                 :publishing-function (org-publish-org-to-html org-publish-org-to-org)
                 :style "<link rel=\"stylesheet\" href=\"http://scarcecapital.com/tmp/org.css\" type=\"text/css\" />"
                 :plain-source t
                 :htmlized-source t
                 :style-include-default nil
                 :auto-sitemap t
                 :sitemap-filename "index.html"
                 :sitemap-title "Momemtum Development"
                 :sitemap-style "tree"
                 :author-info t
                 :creator-info t)
                ("mom-dev-extra"
                 :base-directory "~/projects/momentum/dev"
                 :publishing-directory "~/pub/dev"
                 :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
                 :publishing-function org-publish-attachment
                 :recursive t
                 :author nil)
                ("mom-dev"
                 :components ("mom-dev-org" "mom-dev-extra")))))

#+end_src

#+results:
| mom-report-org   | :base-directory | ~/projects/qic/momentum/draft     | :publishing-directory | ~/pub/report | :recursive      | t    | :section-numbers | nil  | :table-of-contents | nil  | :base-extension      | org                    | :publishing-function   | (org-publish-org-to-html org-publish-org-to-org) | :style  | <link rel="stylesheet" href="scarce.css" type="text/css" />                           | :plain-source | t | :htmlized-source | t | :style-include-default | nil | :auto-sitemap | t | :sitemap-filename | index.html | :sitemap-title | Momentum Report             | :sitemap-style | tree | :author-info | t | :creator-info | t |
| mom-report-extra | :base-directory | ~/projects/qic/momentum/draft     | :publishing-directory | ~/pub/report | :base-extension | css\ | pdf\             | png\ | jpg\               | gif  | :publishing-function | org-publish-attachment | :recursive             | t                                                | :author | nil                                                                                   |               |   |                  |   |                        |     |               |   |                   |            |                |                             |                |      |              |   |               |   |
| mom-report       | :components     | (mom-report-org mom-report-extra) |                       |              |                 |      |                  |      |                    |      |                      |                        |                        |                                                  |         |                                                                                       |               |   |                  |   |                        |     |               |   |                   |            |                |                             |                |      |              |   |               |   |
| tmp-org          | :base-directory | ~/tmp/publish                     | :publishing-directory | ~/pub/tmp    | :recursive      | t    | :section-numbers | nil  | :table-of-contents | nil  | :base-extension      | org                    | :publishing-function   | (org-publish-org-to-html org-publish-org-to-org) | :style  | <link rel="stylesheet" href="org.css" type="text/css" />                              | :plain-source | t | :htmlized-source | t | :style-include-default | nil | :auto-sitemap | t | :sitemap-filename | index.html | :sitemap-title | Test Publishing Environment | :sitemap-style | tree | :author-info | t | :creator-info | t |
| tmp-extra        | :base-directory | ~/tmp/publish/                    | :publishing-directory | ~/pub/tmp    | :base-extension | css\ | pdf\             | png\ | jpg\               | gif\ | el                   | :publishing-function   | org-publish-attachment | :recursive                                       | t       | :author                                                                               | nil           |   |                  |   |                        |     |               |   |                   |            |                |                             |                |      |              |   |               |   |
| tmp              | :components     | (tmp-org tmp-extra)               |                       |              |                 |      |                  |      |                    |      |                      |                        |                        |                                                  |         |                                                                                       |               |   |                  |   |                        |     |               |   |                   |            |                |                             |                |      |              |   |               |   |
| mom-dev-org      | :base-directory | ~/projects/momentum/dev           | :publishing-directory | ~/pub/dev    | :recursive      | t    | :section-numbers | nil  | :table-of-contents | nil  | :base-extension      | org                    | :publishing-function   | (org-publish-org-to-html org-publish-org-to-org) | :style  | <link rel="stylesheet" href="http://scarcecapital.com/tmp/org.css" type="text/css" /> | :plain-source | t | :htmlized-source | t | :style-include-default | nil | :auto-sitemap | t | :sitemap-filename | index.html | :sitemap-title | Momemtum Development        | :sitemap-style | tree | :author-info | t | :creator-info | t |
| mom-dev-extra    | :base-directory | ~/projects/momentum/dev           | :publishing-directory | ~/pub/dev    | :base-extension | css\ | pdf\             | png\ | jpg\               | gif  | :publishing-function | org-publish-attachment | :recursive             | t                                                | :author | nil                                                                                   |               |   |                  |   |                        |     |               |   |                   |            |                |                             |                |      |              |   |               |   |
| mom-dev          | :components     | (mom-dev-org mom-dev-extra)       |                       |              |                 |      |                  |      |                    |      |                      |                        |                        |                                                  |         |                                                                                       |               |   |                  |   |                        |     |               |   |                   |            |                |                             |                |      |              |   |               |   |


*** Visuals

Various visual stylistic choices 
#+begin_src emacs-lisp 
  (setq org-hide-leading-stars nil)
  (setq org-startup-indented t)
  (setq org-cycle-separator-lines 0)
  (setq org-blank-before-new-entry (quote ((heading)
                                           (plain-list-item . auto))))

  (setq org-emphasis-alist (quote (("*" bold "<b>" "</b>")
                                   ("/" italic "<i>" "</i>")
                                   ("_" underline "<span style=\"text-decoration:underline;\">" "</span>")
                                   ("=" org-code "<code>" "</code>" verbatim)
                                   ("~" org-verbatim "<code>" "</code>" verbatim))))
  
#+end_src

#+results:
| * | bold         | <b>                                       | </b>    |          |
| / | italic       | <i>                                       | </i>    |          |
| _ | underline    | <span style="text-decoration:underline;"> | </span> |          |
| = | org-code     | <code>                                    | </code> | verbatim |
| ~ | org-verbatim | <code>                                    | </code> | verbatim |

*** Action Modification

Various stylistic choices 
#+begin_src emacs-lisp 
(setq org-return-follows-link t)
#+end_src

#+results:
: t


*** Special Key

#+begin_src emacs-lisp :tangle yes
  (setq org-special-ctrl-a/e 'reversed)
  (setq org-special-ctrl-k t)
  (setq org-yank-adjusted-subtrees t)
#+end_src

#+results:
: t

 
*** Speed keys
:PROPERTIES:
:CUSTOM_ID: speed-keys
:END:
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the =org-speed-commands-default= variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to `=org-babel-describe-bindings=') will
display a list of the code blocks commands and their related keys.

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
(setq org-speed-commands-user (quote (("0" . ignore)
                                        ("1" . ignore)
                                        ("2" . ignore)
                                        ("3" . ignore)
                                        ("4" . ignore)
                                        ("5" . ignore)
                                        ("6" . ignore)
                                        ("7" . ignore)
                                        ("8" . ignore)
                                        ("9" . ignore)
  
                                        ("a" . ignore)
                                        ("d" . ignore)
                                        ("h" . bh/hide-other)
                                        ("i" progn
                                         (forward-char 1)
                                         (call-interactively 'org-insert-heading-respect-content))
                                        ("k" . org-kill-note-or-show-branches)
                                        ("l" . ignore)
                                        ("m" . ignore)
                                        ("q" . bh/show-org-agenda)
                                        ("r" . ignore)
                                        ("s" . org-save-all-org-buffers)
                                        ("w" . org-refile)
                                        ("x" . ignore)
                                        ("y" . ignore)
                                        ("z" . org-add-note)
  
                                        ("A" . ignore)
                                        ("B" . ignore)
                                        ("E" . ignore)
                                        ("F" . bh/restrict-to-file-or-follow)
                                        ("G" . ignore)
                                        ("H" . ignore)
                                        ("J" . org-clock-goto)
                                        ("K" . ignore)
                                        ("L" . ignore)
                                        ("M" . ignore)
                                        ("N" . bh/narrow-to-subtree)
                                        ("P" . bh/narrow-to-project)
                                        ("Q" . ignore)
                                        ("R" . ignore)
                                        ("S" . ignore)
                                        ("T" . bh/org-todo)
                                        ("U" . bh/narrow-up-one-level)
                                        ("V" . ignore)
                                        ("W" . bh/widen)
                                        ("X" . ignore)
                                        ("Y" . ignore)
                                        ("Z" . ignore))))


#+end_src

#+results:
: t


*** Auto Save and Revert

#+begin_src emacs-lisp
(run-at-time "00:59" 3600 'org-save-all-org-buffers)
(global-auto-revert-mode t)
#+end_src

#+results:
: t

*** org2blog
:LOGBOOK:
CLOCK: [2012-08-20 Mon 18:29]--[2012-08-20 Mon 18:29] =>  0:00
:END:
:PROPERTIES:
:OPEN: [2012-08-19 Sun 11:51]
:LAST:  [2012-09-09 Sun 12:30]
:CLOSE: [2012-09-09 Sun 12:30]
:END:

#+begin_src emacs-lisp
(require 'org2blog-autoloads)
#+end_src

#+results:
: org2blog-autoloads

#+begin_src emacs-lisp
  (setq org2blog/wp-blog-alist
       '(("scarce"
          :url "http://scarcecapital.com/wordpress/xmlrpc.php"
          :username "Tony Day")
         ("dev"
          :url "http://127.0.0.1:4001/wpdev/xmlrpc.php"
          :username "Tony Day"
          :default-title "test title (production)"
          :default-categories ("quant" "org" "emacs")
          :tags-as-categories nil)))
#+end_src

#+results:
| scarce | :url | http://scarcecapital.com/wordpress/xmlrpc.php | :username | Tony Day |                |                         |                     |                   |                     |     |
| dev    | :url | http://127.0.0.1:4001/wpdev/xmlrpc.php        | :username | Tony Day | :default-title | test title (production) | :default-categories | (quant org emacs) | :tags-as-categories | nil |





*** clipboard

#+begin_src emacs-lisp
  (setq org-cycle-global-at-bob t)
#+end_src

#+begin_src emacs-lisp :tangle no
(message "%s" "features")
(message "%s" features)
(message "%s" (locate-library "org-compat"))
  (load "org-compat")
  (require 'org-jsinfo)
#+end_src

#+results:
: org-compat

#+begin_src emacs-lisp :tangle no
  ; Enable habit tracking (and a bunch of other modules)
  (setq org-modules (quote (org-bbdb
                            org-bibtex
                            org-crypt
                            org-gnus
                            org-id
                            org-info
                            org-habit
                            org-inlinetask
                            org-irc
                            org-mew
                            org-mhe
                            org-protocol
                            org-rmail
                            org-vm
                            org-wl
                            org-w3m)))
  
  ; position the habit graph on the agenda to the right of the default
  (setq org-habit-graph-column 50)
  (require 'org-habit)
  
#+end_src

#+results:
: 50




#+begin_src emacs-lisp :tangle no
  (require 'org-jsinfo)

(require 'org-compat)

(library-path "org-compat")

(load "org-compat.elc")

  (locate-library "org-compat")

(load "org-compat")

#+end_src
*** MobileOrg hack

#+begin_src emacs-lisp
  (setq org-mobile-force-id-on-agenda-items nil)
  (setq org-directory "~")
(require 'org-habit)
#+end_src

*** org defuns
**** TODO Insert the last stored link
:PROPERTIES:
:OPEN: [2012-07-23 Mon 20:53]
:LAST: TODO [2012-07-23 Mon 20:53]
:ID:       56629caf-21e0-42c2-a6ac-69d78ff00993
:END:

- saving a button press
- [ ] broken
#+begin_src emacs-lisp
(defun org-insert-last-link()
  (interactive)
  (insert (concat "[[" 
        (plist-get org-store-link-plist :link)
        "]["
        (plist-get org-store-link-plist :description)
        "]]")))
#+end_src

#+results:
: org-insert-last-link


**** Get Timestamp as String
Return a timestamp string for use in my logging process.
#+begin_src emacs-lisp 
(defun org-string-timestamp (time &optional with-hm inactive pre post extra)
  "return a string for the date given by the internal TIME.
WITH-HM means use the stamp format that includes the time of the day.
INACTIVE means use square brackets instead of angular ones, so that the
stamp will not contribute to the agenda.
PRE and POST are optional strings to be inserted before and after the
stamp.
The command returns the time stamp as a string.
This is the same as org-insert-time-stamp without the insert.
"
  (let ((fmt (funcall (if with-hm 'cdr 'car) org-time-stamp-formats))
          stamp)
      (if inactive (setq fmt (concat "[" (substring fmt 1 -1) "]")))
      (when (listp extra)
        (setq extra (car extra))
        (if (and (stringp extra)
                 (string-match "\\([0-9]+\\):\\([0-9]+\\)" extra))
            (setq extra (format "-%02d:%02d"
                                (string-to-number (match-string 1 extra))
                                (string-to-number (match-string 2 extra))))
          (setq extra nil)))
      (when extra
        (setq fmt (concat (substring fmt 0 -1) extra (substring fmt -1))))
      (setq stamp (format-time-string fmt time))
      ))
#+end_src

#+results:
: org-string-timestamp

**** Log State Change
#+begin_src emacs-lisp 
  (defun zyg/log-state-change ()
    "logs timestamps in PROPERTIES for any todo-tag state change (LASTTOUCH),
      first state change (OPENED), and when last entered a done state
      (CLOSE).
  "
    (interactive)
    (save-excursion 
      (let* ((has-opened (org-entry-get nil "OPEN"))
             (stamp (org-string-timestamp nil t t nil nil nil)))
        (if (not has-opened)
            (org-set-property "OPEN" stamp))
        (if (or (equal org-state nil)
                (equal org-state "DONE"))
            (org-set-property "CLOSE" stamp))
        (if (or (equal org-state "TODO")
                (equal org-state "NEXT"))
            (org-entry-delete nil "CLOSE"))
        (org-set-property "LAST" (concatenate 'string org-state " " stamp)))))
#+end_src

#+results:
: zyg/log-state-change


**** =norang= general defuns
:PROPERTIES:
:OPEN: [2012-07-23 Mon 20:50]
:LAST:  [2012-08-01 Wed 13:54]
:CLOSE: [2012-08-01 Wed 13:54]
:END:


#+begin_src emacs-lisp 
(defun bh/show-org-agenda ()
    (interactive)
    (switch-to-buffer "*Org Agenda*")
    (delete-other-windows))

(defun bh/hide-other ()
  (interactive)
  (save-excursion
    (org-back-to-heading 'invisible-ok)
    (hide-other)
    (org-cycle)
    (org-cycle)
    (org-cycle)))

(defun bh/set-truncate-lines ()
  "Toggle value of truncate-lines and refresh window display."
  (interactive)
  (setq truncate-lines (not truncate-lines))
  ;; now refresh window display (an idiom from simple.el):
  (save-excursion
    (set-window-start (selected-window)
                      (window-start (selected-window)))))

(defun bh/org-todo (arg)
  (interactive "p")
  (if (equal arg 4)
      (save-restriction
        (widen)
        (org-narrow-to-subtree)
        (org-show-todo-tree nil))
    (widen)
    (org-narrow-to-subtree)
    (org-show-todo-tree nil)))

(defun bh/widen ()
  (interactive)
  (widen)
  (org-agenda-remove-restriction-lock))

(defun bh/restrict-to-file-or-follow (arg)
  "Set agenda restriction to 'file or with argument invoke follow mode.
I don't use follow mode very often but I restrict to file all the time
so change the default 'F' binding in the agenda to allow both"
  (interactive "p")
  (if (equal arg 4)
      (org-agenda-follow-mode)
    (if (equal major-mode 'org-agenda-mode)
        (bh/set-agenda-restriction-lock 4)
      (widen))))

(defun bh/narrow-to-org-subtree ()
  (widen)
  (org-narrow-to-subtree)
  (save-restriction
    (org-agenda-set-restriction-lock)))

(defun bh/narrow-to-subtree ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (org-with-point-at (org-get-at-bol 'org-hd-marker)
        (bh/narrow-to-org-subtree))
    (bh/narrow-to-org-subtree)))

(defun bh/narrow-up-one-org-level ()
  (widen)
  (save-excursion
    (outline-up-heading 1 'invisible-ok)
    (bh/narrow-to-org-subtree)))

(defun bh/narrow-up-one-level ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (org-with-point-at (org-get-at-bol 'org-hd-marker)
        (bh/narrow-up-one-org-level))
    (bh/narrow-up-one-org-level)))

(defun bh/narrow-to-org-project ()
  (widen)
  (save-excursion
    (bh/find-project-task)
    (bh/narrow-to-org-subtree)))

(defun bh/narrow-to-project ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (org-with-point-at (org-get-at-bol 'org-hd-marker)
        (bh/narrow-to-org-project))
    (bh/narrow-to-org-project)))

(defun bh/set-agenda-restriction-lock (arg)
  "Set restriction lock to current task subtree or file if prefix is specified"
  (interactive "p")
  (let* ((pom (or (org-get-at-bol 'org-hd-marker)
                  org-agenda-restrict-begin))
         (tags (org-with-point-at pom (org-get-tags-at))))
    (let ((restriction-type (if (equal arg 4) 'file 'subtree)))
      (save-restriction
        (cond
         ((equal major-mode 'org-agenda-mode)
          (org-with-point-at pom
            (org-agenda-set-restriction-lock restriction-type)))
         ((and (equal major-mode 'org-mode) (org-before-first-heading-p))
          (org-agenda-set-restriction-lock 'file))
         (t
          (org-with-point-at pom
            (org-agenda-set-restriction-lock restriction-type))))))))

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/show-org-agenda ()
    (interactive)
    (switch-to-buffer "*Org Agenda*")
    (delete-other-windows))




#+end_src

#+results:
: bh/show-org-agenda


**** =norang= agenda helper defuns

#+begin_src emacs-lisp 
    (defun bh/is-project-p ()
      "Any task with a todo keyword subtask"
      (save-restriction
        (widen)
        (let ((has-subtask)
              (subtree-end (save-excursion (org-end-of-subtree t)))
              (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task has-subtask))))
    
    (defun bh/is-project-subtree-p ()
      "Any task with a todo keyword that is in a project subtree.
    Callers of this function already widen the buffer view."
      (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                  (point))))
        (save-excursion
          (bh/find-project-task)
          (if (equal (point) task)
              nil
            t))))
    
    (defun bh/is-task-p ()
      "Any task with a todo keyword and no subtask"
      (save-restriction
        (widen)
        (let ((has-subtask)
              (subtree-end (save-excursion (org-end-of-subtree t)))
              (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
          (save-excursion
            (forward-line 1)
            (while (and (not has-subtask)
                        (< (point) subtree-end)
                        (re-search-forward "^\*+ " subtree-end t))
              (when (member (org-get-todo-state) org-todo-keywords-1)
                (setq has-subtask t))))
          (and is-a-task (not has-subtask)))))
    
    (defun bh/is-subproject-p ()
      "Any task which is a subtask of another project"
      (let ((is-subproject)
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (while (and (not is-subproject) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq is-subproject t))))
        (and is-a-task is-subproject)))
    
    (defun bh/list-sublevels-for-projects-indented ()
      "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
      This is normally used by skipping functions where this variable is already local to the agenda."
      (if (marker-buffer org-agenda-restrict-begin)
          (setq org-tags-match-list-sublevels 'indented)
        (setq org-tags-match-list-sublevels nil))
      nil)
    
    (defun bh/list-sublevels-for-projects ()
      "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
      This is normally used by skipping functions where this variable is already local to the agenda."
      (if (marker-buffer org-agenda-restrict-begin)
          (setq org-tags-match-list-sublevels t)
        (setq org-tags-match-list-sublevels nil))
      nil)
    
    (defun bh/skip-non-stuck-projects ()
      "Skip trees that are not stuck projects"
      (bh/list-sublevels-for-projects-indented)
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (if (bh/is-project-p)
              (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                     (has-next (save-excursion
                                 (forward-line 1)
                                 (and (< (point) subtree-end)
                                      (re-search-forward "^\\*+ \\(NEXT\\) " subtree-end t)))))
                (if has-next
                    next-headline
                  nil)) ; a stuck project, has subtasks but no next task
            next-headline))))
    
    (defun bh/skip-non-projects ()
      "Skip trees that are not projects"
      (bh/list-sublevels-for-projects-indented)
      (if (save-excursion (bh/skip-non-stuck-projects))
          (save-restriction
            (widen)
            (let ((subtree-end (save-excursion (org-end-of-subtree t))))
              (if (bh/is-project-p)
                  nil
                subtree-end)))
        (org-end-of-subtree t)))
    
    (defun bh/skip-project-trees-and-habits ()
      "Skip trees that are projects"
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           (t
            nil)))))
    
    (defun bh/skip-projects-and-habits-and-single-tasks ()
      "Skip trees that are projects, tasks that are habits, single non-project tasks"
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          (cond
           ((org-is-habit-p)
            next-headline)
           ((bh/is-project-p)
            next-headline)
           ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
            next-headline)
           (t
            nil)))))
    
    (defun bh/skip-project-tasks-maybe ()
      "Show tasks related to the current restriction.
    When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
    When not restricted, skip project and sub-project tasks, habits, and project related tasks."
      (save-restriction
        (widen)
        (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
               (next-headline (save-excursion (or (outline-next-heading) (point-max))))
               (limit-to-project (marker-buffer org-agenda-restrict-begin)))
          (cond
           ((bh/is-project-p)
            next-headline)
           ((org-is-habit-p)
            subtree-end)
           ((and (not limit-to-project)
                 (bh/is-project-subtree-p))
            subtree-end)
           ((and limit-to-project
                 (bh/is-project-subtree-p)
                 (member (org-get-todo-state) (list "NEXT")))
            subtree-end)
           (t
            nil)))))
    
    (defun bh/skip-projects-and-habits ()
      "Skip trees that are projects and tasks that are habits"
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            subtree-end)
           ((org-is-habit-p)
            subtree-end)
           (t
            nil)))))
    
    (defun bh/skip-non-subprojects ()
      "Skip trees that are not projects"
      (let ((next-headline (save-excursion (outline-next-heading))))
        (if (bh/is-subproject-p)
            nil
          next-headline)))
    
  (defun bh/skip-non-archivable-tasks ()
      "Skip trees that are not available for archiving"
      (save-restriction
        (widen)
        (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
          ;; Consider only tasks with done todo headings as archivable candidates
          (if (member (org-get-todo-state) org-done-keywords)
              (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                     (daynr (string-to-int (format-time-string "%d" (current-time))))
                     (a-month-ago (* 60 60 24 (+ daynr 1)))
                     (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                     (this-month (format-time-string "%Y-%m-" (current-time)))
                     (subtree-is-current (save-excursion
                                           (forward-line 1)
                                           (and (< (point) subtree-end)
                                                (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                (if subtree-is-current
                    next-headline ; Has a date in this month or last month, skip it
                  nil))  ; available to archive
            (or next-headline (point-max))))))
  
#+end_src

#+results:
: bh/skip-non-archivable-tasks





**** =norang= agenda sort

#+begin_src emacs-lisp
  (defun bh/agenda-sort (a b)
    "Sorting strategy for agenda items.
  Late deadlines first, then scheduled, then non-late deadlines"
    (let (result num-a num-b)
      (cond
       ; time specific items are already sorted first by org-agenda-sorting-strategy
  
       ; non-deadline and non-scheduled items next
       ((bh/agenda-sort-test 'bh/is-not-scheduled-or-deadline a b))
  
       ; deadlines for today next
       ((bh/agenda-sort-test 'bh/is-due-deadline a b))
  
       ; late deadlines next
       ((bh/agenda-sort-test-num 'bh/is-late-deadline '< a b))
  
       ; scheduled items for today next
       ((bh/agenda-sort-test 'bh/is-scheduled-today a b))
  
       ; late scheduled items next
       ((bh/agenda-sort-test-num 'bh/is-scheduled-late '> a b))
  
       ; pending deadlines last
       ((bh/agenda-sort-test-num 'bh/is-pending-deadline '< a b))
  
       ; finally default to unsorted
       (t (setq result nil)))
      result))
  
  (defmacro bh/agenda-sort-test (fn a b)
    "Test for agenda sort"
    `(cond
      ; if both match leave them unsorted
      ((and (apply ,fn (list ,a))
            (apply ,fn (list ,b)))
       (setq result nil))
      ; if a matches put a first
      ((apply ,fn (list ,a))
       (setq result -1))
      ; otherwise if b matches put b first
      ((apply ,fn (list ,b))
       (setq result 1))
      ; if none match leave them unsorted
      (t nil)))
  
  (defmacro bh/agenda-sort-test-num (fn compfn a b)
    `(cond
      ((apply ,fn (list ,a))
       (setq num-a (string-to-number (match-string 1 ,a)))
       (if (apply ,fn (list ,b))
           (progn
             (setq num-b (string-to-number (match-string 1 ,b)))
             (setq result (if (apply ,compfn (list num-a num-b))
                              -1
                            1)))
         (setq result -1)))
      ((apply ,fn (list ,b))
       (setq result 1))
      (t nil)))
  
  (defun bh/is-not-scheduled-or-deadline (date-str)
    (and (not (bh/is-deadline date-str))
         (not (bh/is-scheduled date-str))))
  
  (defun bh/is-due-deadline (date-str)
    (string-match "Deadline:" date-str))
  
  (defun bh/is-late-deadline (date-str)
    (string-match "In *\\(-.*\\)d\.:" date-str))
  
  (defun bh/is-pending-deadline (date-str)
    (string-match "In \\([^-]*\\)d\.:" date-str))
  
  (defun bh/is-deadline (date-str)
    (or (bh/is-due-deadline date-str)
        (bh/is-late-deadline date-str)
        (bh/is-pending-deadline date-str)))
  
  (defun bh/is-scheduled (date-str)
    (or (bh/is-scheduled-today date-str)
        (bh/is-scheduled-late date-str)))
  
  (defun bh/is-scheduled-today (date-str)
    (string-match "Scheduled:" date-str))
  
  (defun bh/is-scheduled-late (date-str)
    (string-match "Sched\.\\(.*\\)x:" date-str))
#+end_src

#+results:
: bh/is-scheduled-late







** Octave
#+begin_src emacs-lisp 
  (autoload 'octave-mode "octave-mod" nil t)
  (setq auto-mode-alist
     (cons '("\\.m$" . octave-mode) auto-mode-alist))
  (add-hook 'octave-mode-hook
                      (lambda ()
                        (abbrev-mode 1)
                        (auto-fill-mode 1)
                        (if (eq window-system 'x)
                            (font-lock-mode 1))))

  ;; if you have the win32 version of octave
  (add-hook 'inferior-octave-mode-hook
             '(lambda ()
                 (setq inferior-octave-program
                     "octave")))
  
  ;; run an inferior Octave process in a special Emacs buffer
  (autoload 'run-octave "octave-inf" nil t)
#+end_src



* snippets
** dev code snippets
:PROPERTIES:
:OPEN: [2012-08-01 Wed 22:29]
:LAST: TODO [2012-08-01 Wed 22:29]
:ID: 50603d6b-021f-47bf-9a5e-22827e5932e8
:END:
- standard org bindings
  #+begin_src emacs-lisp
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  #+end_src

  #+results:
  : org-capture


- yegges binding suggestions
  #+begin_src emacs-lisp
  (global-set-key "\C-x\C-m" 'execute-extended-command)
  (global-set-key "\C-c\C-m" 'execute-extended-command)
  #+end_src

- backward kill word binding
  #+begin_src emacs-lisp
    (global-set-key "\C-w" 'backward-kill-word)
    (global-set-key "\C-x\C-k" 'kill-region)
    (global-set-key "\C-c\C-k" 'kill-region)
    (global-set-key [f4] 'call-last-kbd-macro)
  #+end_src

- saveplace
  #+begin_src emacs-lisp :tangle no 
    (setq-default save-place t)
  #+end_src

- transpose-windows
  #+begin_src emacs-lisp
    (defun transpose-windows (arg)
      "Transpose the buffers shown in two windows."
      (interactive "p")
      (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
        (while (/= arg 0)
          (let ((this-win (window-buffer))
                (next-win (window-buffer (funcall selector))))
            (set-window-buffer (selected-window) next-win)
            (set-window-buffer (funcall selector) this-win)
            (select-window (funcall selector)))
          (setq arg (if (plusp arg) (1- arg) (1+ arg))))))
    (define-key ctl-x-4-map (kbd "t") 'transpose-windows)
  #+end_src

  #+results:
  : transpose-windows

- babel bindings
  #+begin_src emacs-lisp
    (global-set-key (kbd "<f11> s") 'org-babel-execute-subtree)
    (global-set-key (kbd "<f11> b") 'org-babel-execute-buffer)
    (global-set-key (kbd "<f11> t") 'org-table-recalculate-buffer-tables)
  #+end_src
- ido completion for yasnippet insertion
  #+begin_src emacs-lisp
    (setq yas/prompt-functions '(yas/ido-prompt yas/dropdown-prompt
                                                yas/completing-prompt yas/x-prompt yas/no-prompt))
  #+end_src

- yas/insert bound to f9-y
  #+begin_src emacs-lisp 
    (global-set-key (kbd "<f9> y") 'yas/insert-snippet)
  #+end_src

- kbd macro bindings
  #+begin_src emacs-lisp
    (global-set-key (kbd "<C-f4>") 'start-kbd-macro)
    (global-set-key (kbd "<S-f4>") 'end-kbd-macro)
  #+end_src

  #+results:
  : end-kbd-macro

- occur within isearch
  #+begin_src emacs-lisp
  ;; Activate occur easily inside isearch
  (define-key isearch-mode-map (kbd "C-o") 'isearch-occur)
  #+end_src




** nxhtml
:PROPERTIES:
:OPEN:     [2012-10-11 Thu 13:28]
:CLOSE:    [2012-10-11 Thu 13:28]
:LAST:     [2012-10-11 Thu 13:28]
:END:
  #+begin_src emacs-lisp 
    ;;(load (concat starter-kit-dir "src/nxhtml/autostart.el"))
  #+end_src


** magit info
  #+begin_src emacs-lisp :tangle no
    (add-to-list 'Info-default-directory-list "~/.emacs.d/git/magit")
  #+end_src

** simple bookmarks
:PROPERTIES:
:OPEN: [2012-07-23 Mon 10:49]
:LAST: TODO [2012-07-23 Mon 10:49]
:END:

#+begin_src emacs-lisp 
  (global-set-key (kbd "<C-f6>") 
                  '(lambda () (interactive) (bookmark-set "SAVED")))
  (global-set-key (kbd "<f6>")
                  '(lambda () (interactive) (bookmark-jump "SAVED")))
#+end_src

** buffer cycling

#+begin_src emacs-lisp 
  (global-set-key (kbd "C-<f9>") 'previous-buffer)
  (global-set-key (kbd "C-<f10>") 'next-buffer)
#+end_src

** tabify

#+begin_src emacs-lisp 
  (global-set-key (kbd "<f9> T") 'tabify)
  (global-set-key (kbd "<f9> U") 'untabify)
#+end_src

** Scratch
:PROPERTIES:
:OPEN: [2012-07-23 Mon 12:12]
:LAST:     [2012-10-11 Thu 13:28]
:CLOSE:    [2012-10-11 Thu 13:28]
:END:
All this scratching is making me itch.
- [ ] test these
- [ ] find out how/where *scratch*
- [ ] make a *escratch*
#+begin_src emacs-lisp 
  (global-set-key (kbd "<f9> o") 'make-org-scratch)
  (global-set-key (kbd "<f9> s") 'switch-to-org-scratch)
  (global-set-key (kbd "<f9> e") 'make-elisp-scratch)
  (global-set-key (kbd "<f9> z") 'switch-to-elisp-scratch)
#+end_src

Defuns
#+begin_src emacs-lisp 
(defun make-org-scratch ()
  (interactive)
  (find-file "~/.emacs.d/tmp/scratch.org")
  (ido-make-directory "~/.emacs.d/tmp"))  
(defun make-elisp-scratch ()
  (interactive)
  (find-file "~/.emacs.d/tmp/scratch.el")
  (ido-make-directory "~/.emacs.d/tmp"))  
(defun switch-to-org-scratch ()
  (interactive)
  (switch-to-buffer "*scratch*"))
(defun switch-to-elisp-scratch ()
  (interactive)
  (switch-to-buffer "*escratch*"))
#+end_src


** miscellaneous and overrides
:PROPERTIES:
:OPEN:     [2012-09-17 Mon 10:13]
:CLOSE:    [2012-09-17 Mon 10:13]
:LAST:     [2012-09-17 Mon 10:13]
:END:

#+begin_src emacs-lisp 
(setq shift-select-mode t)
(setq display-time-format " %I:%M%p %a %d %b ")
(display-time-mode)
(delete-selection-mode)
(setq ido-file-extensions-order '(".org"))
(setq sentence-end-double-space nil)  
#+end_src

#+results:

** A Column Number is always handy.
#+begin_src emacs-lisp
(column-number-mode t)
#+end_src


** register (off)

#+begin_example
 (?z (file . ,(concat starter-kit-dir "zygomega.org")))
#+end_example

** hunspell (off)
:PROPERTIES:
:OPEN: [2012-07-23 Mon 09:24]
:LAST:  [2012-08-03 Fri 15:21]
:CLOSE: [2012-08-03 Fri 15:21]
:tangle: no
:END:
Installing in windows involved a lot of tweaking, but hunspell is the
future.

*** Installing hunspell on Windows
It was a chore.  I had to:
- build hunspell from source (in Visual Studio 10)
- added a new directory (~/bin) to path to house it
- copied the hunspell.exe it over to ~/bin

http://sourceforge.net/projects/hunspell/

http://www.mail-archive.com/gnu-emacs-sources@gnu.org/msg01709.html

http://www.emacswiki.org/emacs/InteractiveSpell

personal dictionary is at ~/.personal_dicitionary

*** Packages and Settings

Why there are 3 packages, idk.
#+begin_src emacs-lisp
  (dolist (package '(rw-hunspell rw-ispell
                rw-language-and-country-codes))
    (unless (package-installed-p package)
      (package-install package)))
#+end_src

#+begin_src emacs-lisp 
  (require 'rw-hunspell)
  (require 'rw-ispell)
  (require 'rw-language-and-country-codes)
  (setq ispell-program-name "hunspell") 
  (setq ispell-dictionary "en_US_hunspell") ;the _suffix is the same as the name of the final dicpath directory
  ;; uses your home directory by default
  (setq ispell-process-directory (expand-file-name "~/.emacs.d/"))
  (setq rw-hunspell-dicpath-list '("~/hunspell")) ;spaces or special characters may be problematic
  (setq rw-hunspell-make-dictionary-menu t)
  (setq rw-hunspell-use-rw-ispell t)
  ;;(setq ispell-personal-dictionary (expand-file-name "~/.hunspell_en_US"))
#+end_src



** git folder list

#+begin_src emacs-lisp
      
        (setq magit-repo-dirs '("~/.emacs.d" 
                                "~/stuff"
                                "~/dotemacs-mashup"
                                "~/emfx"))
      
#+end_src

#+results:
| ~/.emacs.d | ~/stuff | ~/dotemacs-mashup | ~/emfx |




** sunrise commander

- M-x customize-group <RET> sunrise <RET> 
- M-x sunrise
- M-x sunrise-cd

#+begin_src emacs-lisp :tangle no
  (require 'sunrise-commander)
  (add-to-list 'auto-mode-alist '("\\.srvm\\'" . sr-virtual-mode))
#+end_src

** R
#+begin_src emacs-lisp
  (setq-default inferior-R-program-name "R")
  (require 'ess-site)
#+end_src
[[file:tonyday.org]]



** o-blog
#+begin_src emacs-lisp
  (require 'o-blog)
#+end_src



** plainlistify-paragraph
#+begin_src emacs-lisp
  (defun unfill-region (beg end)
      "Unfill the region, joining text paragraphs into a single
    logical line.  This is useful, e.g., for use with
    `visual-line-mode'."
      (interactive "*r")
      (let ((fill-column (point-max)))
        (fill-region beg end)))
    
    ;; Handy key definition
    (define-key global-map "\C-\M-Q" 'unfill-region)

  (defun unfill-paragraph ()
      "Takes a multi-line paragraph and makes it into a single line of text."
      (interactive)
      (let ((fill-column (point-max)))
        (fill-paragraph nil)))
    ;; Handy key definition
    (define-key global-map "\M-Q" 'unfill-paragraph)

#+end_src

#+results:
: unfill-paragraph





** org-clock
:PROPERTIES:
:OPEN: [2012-10-13 Sat 13:15]
:LAST: [2012-10-13 Sat 13:15]
:END:
#+begin_src emacs-lisp
  (require 'org-clock)
  (require 'org-colview)

#+end_src
** temporary key bindings
#+begin_src emacs-lisp
  (global-unset-key (kbd "<f10>"))
  (global-set-key (kbd "<f10> y") 'yas/new-snippet)
  (global-set-key (kbd "<f10> p") 'org-publish-blog)
  (global-set-key (kbd "<f10> d") 'scarce-to-dev)
  
#+end_src

#+results:
: scarce-to-dev


** ruby

#+begin_src emacs-lisp
  (setq exec-path (cons (expand-file-name "/usr/local/Cellar/ruby/1.9.3-p194/bin") exec-path))

#+end_src

#+results:
| /usr/local/Cellar/ruby/1.9.3-p194/bin | /Users/tonyday/.gem/ruby/1.8/bin | /usr/local/bin | /usr/local/sbin | /usr/bin | /bin | /usr/sbin | /sbin | /usr/texbin | /usr/local/Cellar/emacs/HEAD/libexec/emacs/24.2.50/i386-apple-darwin12.1.0 |


** ffip

#+begin_src emacs-lisp
  (require 'find-file-in-project)
#+end_src

#+results:
: find-file-in-project


** Info docs
:PROPERTIES:
:OPEN: [2012-08-01 Wed 14:05]
:LAST:  [2012-09-07 Fri 17:45]
:CLOSE: [2012-09-07 Fri 17:45]
:END:

There's various snafu's happening:

- Auctex seems to add to info-directory not default and this clobbers
  the default usage (cellar link). 
- ess adds elpa/doc/info (which doesnt exist)

So,
- using the table below
- change both info and default variables to the list
- first directory is my own with customised dir file there

#+TBLNAME: info-dirs
| /Users/tonyday/.emacs.d/info                   |
| /usr/share/info/                               |



| /usr/local/Cellar/emacs/HEAD/share/info/emacs/ |
| /Users/tonyday/.emacs.d/elpa/magit-1.1.1       |
| /Users/tonyday/.emacs.d/elpa/auctex-11.86      |



- function to reset org-agenda-files based on the above table of directories
  and files
  #+begin_src emacs-lisp :var table=info-dirs
     (setq clean-table
           (delete nil  
                   (loop for line in table
                         collect 
                         (delete "" (delete-dups line)))))
    (setq Info-default-directory-list (apply #'append clean-table))
    (setq Info-directory-list Info-default-directory-list)
  #+end_src

  #+results:
  | /Users/tonyday/.emacs.d/info | /usr/share/info/ |


#+begin_src emacs-lisp :tangle no
(add-to-list 'Info-default-directory-list "/Users/tonyday/.emacs.d/src/org-mode/doc/")
#+end_src

#+begin_src emacs-lisp :tangle no
  (add-to-list 'Info-directory-list "/Users/tonyday/.emacs.d/src/org-mode/doc/")
#+end_src

#+results:
| /Users/tonyday/.emacs.d/src/org-mode/doc/ | /Users/tonyday/.emacs.d/elpa/auctex-11.86 | /usr/share/info/ |


#+begin_src emacs-lisp :tangle no
  (getenv "INFOPATH")
#+end_src

#+begin_src emacs-lisp :tangle no
  (print (loop for f in Info-default-directory-list
               collect
               (list f)))
#+end_src

#+results:
| /Users/tonyday/.emacs.d/elpa/doc/info/         |
| /Users/tonyday/.emacs.d/src/org-mode/doc/      |
| /usr/local/Cellar/emacs/HEAD/share/info/emacs/ |
| /usr/share/info/                               |

#+begin_src emacs-lisp :tangle no
  (print (loop for f in Info-directory-list
               collect
               (list f)))
#+end_src

#+results:
| /Users/tonyday/.emacs.d/src/org-mode/doc/ |
| /Users/tonyday/.emacs.d/elpa/auctex-11.86 |
| /usr/share/info/                          |


** elnode
#+begin_src emacs-lisp
  (require 'elnode)
#+end_src
