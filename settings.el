(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(Info-scroll-prefer-subnodes t)
 '(ansi-color-names-vector ["#3f3f3f" "#cc9393" "#7f9f7f" "#f0dfaf" "#8cd0d3" "#dc8cc3" "#93e0e3" "#dcdccc"])
 '(backup-directory-alist (quote (("." . "~/.emacs.d/backups"))))
 '(bbdb-default-country "")
 '(bbdb-file "~/Documents/bbdb")
 '(bbdb-message-caching-enabled nil)
 '(bbdb-no-duplicates t)
 '(bbdb-offer-save (quote savenoprompt))
 '(bbdb-silent-running t)
 '(bbdb-use-pop-up nil)
 '(bbdb-vcard-import-translation-table (quote (("CELL\\|CAR" . "Mobile") ("WORK" . "Work") ("HOME" . "Home") ("^$" . "Work"))))
 '(bbdb/mail-auto-create-p nil)
 '(blink-cursor-mode nil)
 '(clean-buffer-list-kill-never-buffer-names (quote ("*scratch*" "*Messages*" "*server*" "*Group*" "*Org Agenda*" "todo.txt" "&bitlbee")))
 '(clean-buffer-list-kill-never-regexps (quote ("^ \\*Minibuf-.*\\*$" "^\\*Summary" "^\\*Article" "^#")))
 '(clean-buffer-list-kill-regexps (quote (".*")))
 '(column-number-mode t)
 '(custom-file "/Users/tonyday/.emacs.d/settings.el")
 '(custom-safe-themes (quote ("1b7caa779ad718320632954165993f48d9a0418efb59e131d53f3b952f83bde3" "c34923d2626e38a71679f6d3c9d27b01dcff57e249e399fc727528ca0533f1d3" "fcbdc19b1b8adf59c3fc41b5030ed5b6af8c40564be4fa90c56971e4cefb96c9" "951e10f17de57de1e0c9cbeb44fcdda1b6c6d26beab40c3bd0abbfc38dd5c9c8" "1f213419f5950f893b774696c6b62bb942f7e61138e0c9f1f22ef8525cf8b23e" "71b172ea4aad108801421cc5251edb6c792f3adbaecfa1c52e94e3d99634dee7" default)))
 '(custom-theme-directory "~/.emacs.d/themes")
 '(custom-theme-load-path (quote (custom-theme-directory t "/Users/tonyday/.emacs.d/elpa/zenburn-theme-1.5")))
 '(default-frame-alist (quote ((font . "Monaco-12") (cursor-color . "#cabb59"))))
 '(default-input-method "latin-1-prefix")
 '(default-major-mode (quote text-mode) t)
 '(diary-file "~/Documents/diary")
 '(diff-default-read-only t nil nil "
If you don't do this, all the nice navigation stuff is disabled by
default.  Who wants to edit diffs by hand, anyway?")
 '(diff-jump-to-old-file t)
 '(diff-mode-hook (quote (diff-delete-empty-files diff-make-unified smerge-mode)))
 '(diff-switches "-du")
 '(dired-auto-revert-buffer t)
 '(dired-dwim-target t nil nil "This customization replaces John's entire desire for sunrise,
which I now deinstall with relish")
 '(dired-listing-switches "-alh" nil nil "
Added -h so I can read file sizes")
 '(dired-no-confirm (quote (byte-compile chgrp chmod chown copy hardlink symlink touch)))
 '(dired-omit-files "^\\.?#\\|^\\.\\(DS_Store\\|localized\\|AppleDouble\\)$\\|^\\.\\.$")
 '(dired-omit-mode nil t)
 '(dired-recursive-copies (quote always))
 '(dired-recursive-deletes (quote always))
 '(ede-project-directories (quote ("/Users/tonyday/projects/tpoker/include" "/Users/tonyday/projects/tpoker/src" "/Users/tonyday/projects/tpoker")))
 '(ediff-combination-pattern (quote ("<<<<<<< A: HEAD" A "||||||| Ancestor" Ancestor "=======" B ">>>>>>> B: Incoming")))
 '(ediff-custom-diff-options "-u" nil nil "
Show me unified diffs by default")
 '(ediff-diff-options "-d")
 '(ediff-highlight-all-diffs nil nil nil "
only highlight the selected diff (keeps down gray cruft onscreen)")
 '(ediff-keep-variants nil nil nil "
Any unchanged buffers in the ediff are removed when the session ends. 
`C-u q' to override when quitting.")
 '(ediff-merge-filename-prefix "")
 '(ediff-show-clashes-only t)
 '(ediff-skip-merge-regions-that-differ-from-default nil)
 '(ediff-split-window-function (quote split-window-horizontally) nil nil "
Show diffs side-by-side")
 '(ediff-window-setup-function (quote ediff-setup-windows-plain) nil nil "
Run Ediff all in one frame.  The default when there's a window manager is for
emacs to pop up a separate frame for the `*Ediff Control Panel*' buffer")
 '(edit-server-new-frame nil)
 '(erc-auto-query (quote window-noselect))
 '(erc-autojoin-channels-alist (quote (("localhost" "&bitlbee") ("freenode.net" "#org-mode" "#emacs"))))
 '(erc-autojoin-mode t)
 '(erc-hide-list (quote ("JOIN" "KICK" "NICK" "PART" "QUIT" "MODE")))
 '(erc-keyword-highlight-type (quote all))
 '(erc-keywords (quote ("emacs")))
 '(erc-log-channels-directory "~/Messages/ERC")
 '(erc-log-write-after-send t)
 '(erc-modules (quote (autojoin button completion fill irccontrols list match menu move-to-prompt netsplit networks noncommands readonly ring scrolltobottom services stamp track)))
 '(erc-nick "tonyday567")
 '(erc-port 6667)
 '(erc-prompt-for-nickserv-password nil)
 '(erc-prompt-for-password nil)
 '(erc-server "irc.freenode.net")
 '(erc-services-mode t)
 '(erc-text-matched-hook (quote (erc-log-matches erc-hide-fools my-erc-hook)))
 '(erc-track-enable-keybindings t)
 '(erc-track-exclude-types (quote ("JOIN" "KICK" "NICK" "PART" "QUIT" "MODE" "333" "353")))
 '(erc-track-faces-priority-list (quote (erc-error-face (erc-nick-default-face erc-current-nick-face) erc-current-nick-face erc-keyword-face (erc-nick-default-face erc-pal-face) erc-pal-face erc-nick-msg-face erc-direct-msg-face)))
 '(erc-user-full-name (quote user-full-name))
 '(erc-warn-about-blank-lines nil)
 '(eshell-directory-name "~/.emacs.d/eshell/")
 '(eshell-history-size 1000)
 '(eshell-ls-dired-initial-args (quote ("-h")))
 '(eshell-ls-exclude-regexp "~\\'")
 '(eshell-ls-initial-args "-h")
 '(eshell-modules-list (quote (eshell-alias eshell-basic eshell-cmpl eshell-dirs eshell-glob eshell-hist eshell-ls eshell-pred eshell-prompt eshell-rebind eshell-script eshell-smart eshell-term eshell-unix eshell-xtra)))
 '(eshell-prefer-to-shell t nil (eshell))
 '(eshell-prompt-function (lambda nil (concat (abbreviate-file-name (eshell/pwd)) (if (= (user-uid) 0) " # " " $ "))))
 '(eshell-save-history-on-exit t)
 '(eshell-stringify-t nil)
 '(eshell-term-name "ansi")
 '(eshell-visual-commands (quote ("vi" "top" "screen" "less" "lynx" "rlogin" "telnet")))
 '(ess-history-directory "/Users/tonyday/.emacs.d/data")
 '(eval-expr-print-function (quote pp))
 '(exec-path (quote ("/Users/tonyday/bin" "/usr/local/bin" "/usr/local/opt/git/share/git-core" "/usr/bin" "/bin" "/usr/local/sbin" "/usr/sbin" "/sbin" "/usr/X11R6/bin")))
 '(fci-rule-color "#383838")
 '(fill-column 78)
 '(find-ls-subdir-switches "-alh")
 '(flymake-no-changes-timeout 2)
 '(flyspell-abbrev-p nil)
 '(flyspell-incorrect-hook (quote (flyspell-maybe-correct-transposition)))
 '(flyspell-issue-message-flag nil)
 '(flyspell-use-meta-tab nil)
 '(frame-title-format (quote (:eval (concat (if buffer-file-name default-directory "%b") "    " (number-to-string (cdr (assq (quote width) (frame-parameters)))) "x" (number-to-string (cdr (assq (quote height) (frame-parameters))))))) t)
 '(global-font-lock-mode t nil (font-lock))
 '(gnus-activate-level 1)
 '(gnus-after-getting-new-news-hook (quote (gnus-display-time-event-handler gnus-group-save-newsrc)))
 '(gnus-agent-expire-all nil)
 '(gnus-agent-expire-days 14)
 '(gnus-agent-mark-unread-after-downloaded nil)
 '(gnus-agent-synchronize-flags t)
 '(gnus-always-read-dribble-file t)
 '(gnus-article-address-banner-alist nil)
 '(gnus-article-sort-functions (quote ((not gnus-article-sort-by-number))))
 '(gnus-article-update-date-headers nil)
 '(gnus-asynchronous t)
 '(gnus-auto-select-next nil nil nil "
VERY IMPORTANT SETTING ***.  See http://debbugs.gnu.org/cgi/bugreport.cgi?bug=9399")
 '(gnus-buttonized-mime-types (quote ("multipart/alternative")))
 '(gnus-check-new-newsgroups nil)
 '(gnus-cited-closed-text-button-line-format "...<schnipp %n>...
")
 '(gnus-cited-lines-visible (quote (5 . 10)))
 '(gnus-cited-opened-text-button-line-format "")
 '(gnus-completing-read-function (quote gnus-ido-completing-read))
 '(gnus-default-article-saver (quote gnus-summary-write-to-file))
 '(gnus-default-directory "~")
 '(gnus-duplicate-list-length 100000)
 '(gnus-extra-headers (quote (To Cc Content-Type)))
 '(gnus-fetch-old-headers t)
 '(gnus-gcc-mark-as-read t)
 '(gnus-generate-tree-function (quote gnus-generate-horizontal-tree))
 '(gnus-group-default-list-level 4)
 '(gnus-group-line-format "%S%p%P%5y%5T: %(%B%G%B%)
")
 '(gnus-group-mode-hook (quote (gnus-topic-mode gnus-agent-mode)))
 '(gnus-group-use-permanent-levels t)
 '(gnus-ignored-from-addresses "^zygomega\\|tonyday567\\|tony.day")
 '(gnus-ignored-mime-types (quote ("application/x-pkcs7-signature" "application/ms-tnef" "text/x-vcard")))
 '(gnus-interactive-exit (quote quiet))
 '(gnus-large-newsgroup 1000)
 '(gnus-message-archive-group (quote ((format-time-string "sent.%Y-%m"))))
 '(gnus-message-replyencrypt nil)
 '(gnus-novice-user nil)
 '(gnus-parameters (quote (("^INBOX" (expiry-wait . immediate) (expiry-target . delete) (display . [or (not reply) (not expire)])) ("^Work" (display . all) (posting-style (name "Tony Day") (address "tony.day@scarcecapital.com"))) ("^Home" (display . all) (posting-style (name "Tony Day") (address "tonyday567@gmail.com"))))))
 '(gnus-permanently-visible-groups ".*")
 '(gnus-read-active-file nil)
 '(gnus-read-newsrc-file nil)
 '(gnus-refer-article-method (quote current) nil nil "***** NOTE: NEED TO RESTORE (nnregistry) here")
 '(gnus-refer-thread-use-nnir t)
 '(gnus-safe-html-newsgroups ".")
 '(gnus-save-duplicate-list t)
 '(gnus-save-killed-list nil)
 '(gnus-save-newsrc-file nil)
 '(gnus-score-default-duration (quote p))
 '(gnus-score-expiry-days 30)
 '(gnus-score-find-score-files-function (quote (gnus-score-find-hierarchical)))
 '(gnus-secondary-select-methods nil)
 '(gnus-select-group-hook (quote (gnus-group-set-timestamp)))
 '(gnus-select-method (quote (nnimap "LocalIMAP" (nnimap-address "localhost") (nnimap-user "tonyday") (nnimap-stream network))))
 '(gnus-signature-separator (quote ("^-- $" "^-- *$" "^_____+$" "^-----+
?
NOTICE: ")))
 '(gnus-simplify-subject-functions (quote (gnus-simplify-subject-fuzzy)))
 '(gnus-sort-gathered-threads-function (quote gnus-thread-sort-by-date) t)
 '(gnus-spam-process-destinations (quote (("^\\(\\(nnimap\\+\\)?Mail:\\)?[^+]*$" "[Gmail].Spam"))))
 '(gnus-spam-process-newsgroups (quote (("^\\(\\(nntp\\+\\)?LocalNNTP:\\)?gmane\\." ((spam spam-use-gmane))))))
 '(gnus-split-methods (quote ((gnus-save-site-lisp-file) (gnus-article-archive-name) (gnus-article-nndoc-name))))
 '(gnus-started-hook (quote ((lambda nil (run-hooks (quote gnus-after-getting-new-news-hook))))))
 '(gnus-subscribe-newsgroup-method (quote gnus-subscribe-topics))
 '(gnus-summary-expunge-below -100)
 '(gnus-summary-highlight (quote (((eq mark gnus-spam-mark) . spam) ((eq mark gnus-spam-mark) . spam) ((eq mark gnus-expirable-mark) . gnus-summary-expirable-face) ((eq mark gnus-spam-mark) . spam) ((eq mark gnus-spam-mark) . spam) ((eq mark gnus-canceled-mark) . gnus-summary-cancelled) ((and uncached (> score default-high)) . gnus-summary-high-undownloaded) ((and uncached (< score default-low)) . gnus-summary-low-undownloaded) (uncached . gnus-summary-normal-undownloaded) ((and (> score default-high) (or (eq mark gnus-dormant-mark) (eq mark gnus-ticked-mark))) . gnus-summary-high-ticked) ((and (< score default-low) (or (eq mark gnus-dormant-mark) (eq mark gnus-ticked-mark))) . gnus-summary-low-ticked) ((or (eq mark gnus-dormant-mark) (eq mark gnus-ticked-mark)) . gnus-summary-normal-ticked) ((and (> score default-high) (eq mark gnus-ancient-mark)) . gnus-summary-high-ancient) ((and (< score default-low) (eq mark gnus-ancient-mark)) . gnus-summary-low-ancient) ((eq mark gnus-ancient-mark) . gnus-summary-normal-ancient) ((and (> score default-high) (eq mark gnus-unread-mark)) . gnus-summary-high-unread) ((and (< score default-low) (eq mark gnus-unread-mark)) . gnus-summary-low-unread) ((eq mark gnus-unread-mark) . gnus-summary-normal-unread) ((> score default-high) . gnus-summary-high-read) ((< score default-low) . gnus-summary-low-read) (t . gnus-summary-normal-read))))
 '(gnus-summary-line-format "%O%U%R%z%~(form my-align-gnus-summary)@%B%&user-date;: %(%f%~(form my-align-gnus-subject)@%)               %s
")
 '(gnus-suppress-duplicates t)
 '(gnus-suspend-gnus-hook (quote (gnus-group-save-newsrc)))
 '(gnus-thread-hide-subtree (quote (not gnus-article-unread-p)))
 '(gnus-thread-sort-functions (quote ((not gnus-thread-sort-by-number) (not gnus-thread-sort-by-most-recent-date) gnus-thread-sort-by-total-score)))
 '(gnus-topic-display-empty-topics nil)
 '(gnus-topic-line-format "%i[ %A: %(%{%n%}%) ]%v
")
 '(gnus-treat-date-lapsed (quote head))
 '(gnus-treat-display-smileys nil)
 '(gnus-treat-from-gravatar (quote head))
 '(gnus-treat-hide-citation t)
 '(gnus-treat-mail-gravatar (quote head))
 '(gnus-treat-strip-cr t)
 '(gnus-treat-strip-leading-blank-lines (quote first))
 '(gnus-treat-strip-multiple-blank-lines t)
 '(gnus-treat-strip-trailing-blank-lines (quote last))
 '(gnus-tree-minimize-window nil)
 '(gnus-uncacheable-groups "^nnml")
 '(gnus-use-cache t)
 '(gnus-use-trees t)
 '(gnus-valid-select-methods (quote (("nntp" post address prompt-address physical-address) ("nnspool" post address) ("nnvirtual" post-mail prompt-address virtual) ("nnmbox" mail address respool) ("nnml" post-mail address respool) ("nnmh" mail address respool) ("nndir" post-mail prompt-address physical-address) ("nneething" none address prompt-address physical-address) ("nndoc" none address prompt-address virtual) ("nnbabyl" mail address respool) ("nndraft" post-mail) ("nnfolder" mail address respool) ("nngateway" post-mail address prompt-address physical-address) ("nnweb" none) ("nnrss" none) ("nnagent" post-mail) ("nnimap" post-mail address prompt-address physical-address respool server-marks) ("nnmaildir" mail address respool server-marks) ("nnnil" none) ("nndiary" post-mail respool address) ("nnir" mail virtual))))
 '(gnus-verbose 4)
 '(hippie-expand-try-functions-list (quote (yas/hippie-try-expand try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-list try-expand-line try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-lisp-symbol-partially try-complete-lisp-symbol)))
 '(history-delete-duplicates t)
 '(history-length 200)
 '(html-mode-hook (quote ((lambda nil (let* ((name "<return>") (key (read-kbd-macro name)) (binding (lookup-key (or html-mode-map global-map) key))) (let ((entry (assoc (cons name (quote html-mode-map)) personal-keybindings))) (if entry (setq personal-keybindings (delq entry personal-keybindings)))) (setq personal-keybindings (cons (list (cons name (quote html-mode-map)) (quote newline-and-indent) (if (numberp binding) nil binding)) personal-keybindings)) (define-key (or html-mode-map global-map) key (quote newline-and-indent)))) zencoding-mode)))
 '(ibuffer-default-display-maybe-show-predicates t)
 '(ibuffer-expert t)
 '(ibuffer-formats (quote ((mark modified read-only " " (name 16 -1) " " (size 6 -1 :right) " " (mode 16 16) " " filename) (mark " " (name 16 -1) " " filename))))
 '(ibuffer-maybe-show-regexps nil)
 '(ibuffer-saved-filter-groups (quote (("default" ("Commands" (or (mode . shell-mode) (mode . eshell-mode) (mode . term-mode) (mode . compilation-mode))) ("Helm" (mode . helm-mode)) ("Magit" (or (mode . magit-status-mode) (mode . magit-log-mode))) ("C++" (or (mode . c-mode) (mode . c++-mode))) ("Lisp" (mode . emacs-lisp-mode)) ("Dired" (mode . dired-mode)) ("Gnus" (or (mode . message-mode) (mode . mail-mode) (mode . gnus-group-mode) (mode . gnus-summary-mode) (mode . gnus-article-mode) (name . "^\\.newsrc-dribble"))) ("Org" (or (name . "^\\*Calendar\\*$") (name . "^diary$") (mode . org-mode))) ("Emacs" (or (name . "^\\*scratch\\*$") (name . "^\\*Messages\\*$")))))))
 '(ibuffer-show-empty-filter-groups nil)
 '(ibuffer-shrink-to-minimum-size t t)
 '(ibuffer-use-other-window t)
 '(ido-default-file-method (quote selected-window))
 '(ido-enable-flex-matching t)
 '(ido-enable-tramp-completion nil)
 '(ido-enter-matching-directory (quote first))
 '(ido-file-extensions-order (quote (".org")))
 '(ido-ignore-files (quote ("\\`CVS/" "\\`#" "\\`.#" "\\`\\.\\./" "\\`\\./" "\\`\\.DS_Store" "\\`\\.localized" "\\.sparsebundle/" "\\.dmg\\'")))
 '(ido-save-directory-list-file "~/.emacs.d/data/ido.last")
 '(ido-use-virtual-buffers t)
 '(image-dired-dir "~/.emacs.d/data/image-dired/")
 '(indent-tabs-mode nil)
 '(initial-scratch-message "")
 '(kill-whole-line t)
 '(line-number-mode t)
 '(mail-dont-reply-to-names "tonyday567@gmail.com")
 '(mail-envelope-from (quote header))
 '(mail-setup-with-from nil)
 '(mail-signature t)
 '(mail-source-delete-incoming t)
 '(mail-source-delete-old-incoming-confirm nil)
 '(mail-source-report-new-mail-interval 15)
 '(mail-specify-envelope-from t)
 '(mail-user-agent (quote gnus-user-agent))
 '(nnir-hyrex-remove-prefix "~/Library/Data/Gnus/Mail")
 '(nnir-ignored-newsgroups "^\"\\([^[]\\|\\[Gmail][/.][^A]\\)")
 '(nnir-imap-default-search-key "imap")
 '(nnir-namazu-index-directory "~/Library/Data/Gnus/Mail/namazu")
 '(nnir-namazu-remove-prefix "~/Library/Data/Gnus/Mail")
 '(nnir-notmuch-remove-prefix "~/Library/Data/Gnus/Mail")
 '(nnir-swish++-configuration-file "~/Library/Data/Gnus/Mail/swish++.conf")
 '(nnir-swish++-remove-prefix "~/Library/Data/Gnus/Mail/")
 '(nnir-swish-e-index-file "~/Library/Data/Gnus/Mail/index.swish-e")
 '(nnir-swish-e-index-files (quote ("~/Library/Data/Gnus/Mail/index.swish-e")))
 '(nnir-swish-e-remove-prefix "~/Library/Data/Gnus/Mail/")
 '(nnmail-crosspost nil)
 '(nnmail-expiry-wait 30)
 '(nnmail-extra-headers (quote (To Cc Content-Type)))
 '(nnmail-scan-directory-mail-source-once t)
 '(ns-function-modifier (quote hyper))
 '(nxhtml-menu-mode t)
 '(org-agenda-auto-exclude-function (quote bh/org-auto-exclude-function))
 '(org-agenda-cmp-user-defined (quote bh/agenda-sort))
 '(org-agenda-compact-blocks t)
 '(org-agenda-diary-file "~/stuff/org/diary.org")
 '(org-agenda-include-diary t)
 '(org-agenda-insert-diary-extract-time nil)
 '(org-agenda-persistent-filter t)
 '(org-agenda-skip-additional-timestamps-same-entry t)
 '(org-agenda-skip-deadline-if-done nil)
 '(org-agenda-skip-scheduled-if-done nil)
 '(org-agenda-skip-timestamp-if-done t)
 '(org-agenda-sorting-strategy (quote ((agenda habit-down time-up user-defined-up priority-down effort-up category-keep) (todo category-up priority-down effort-up) (tags category-up priority-down effort-up) (search category-up))))
 '(org-agenda-span (quote day))
 '(org-agenda-tags-column -102)
 '(org-agenda-tags-todo-honor-ignore-options t)
 '(org-agenda-window-setup (quote current-window))
 '(org-babel-post-tangle-hook (quote ((lambda nil (progn (delete-leading-whitespace) (save-buffer))))))
 '(org-babel-results-keyword "results")
 '(org-clock-in-switch-to-state (quote bh/clock-in-to-next))
 '(org-clock-into-drawer t)
 '(org-completion-use-ido t)
 '(org-confirm-babel-evaluate nil)
 '(org-crypt-disable-auto-save nil)
 '(org-crypt-key "F0B66B40")
 '(org-deadline-warning-days 30)
 '(org-default-notes-file "~/stuff/org/refile.org")
 '(org-directory "~/stuff/org")
 '(org-ditaa-jar-path "~/java/ditaa0_6b.jar")
 '(org-edit-src-content-indentation 2)
 '(org-enable-priority-commands nil)
 '(org-enforce-todo-dependencies t)
 '(org-export-babel-evaluate nil)
 '(org-export-html-inline-images t)
 '(org-export-html-style-include-default nil)
 '(org-export-html-xml-declaration (quote (("html" . "") ("was-html" . "<?xml version=\"1.0\" encoding=\"%s\"?>") ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>"))))
 '(org-fast-tag-selection-single-key (quote expert))
 '(org-link-abbrev-alist (quote (("google" . "http://www.google.com/search?q="))))
 '(org-list-indent-offset 2)
 '(org-log-done (quote time))
 '(org-log-into-drawer "LOGBOOK")
 '(org-mobile-directory "~/Dropbox/MobileOrg")
 '(org-mobile-inbox-for-pull "~/stuff/org/refile.org")
 '(org-outline-path-complete-in-steps nil)
 '(org-plantuml-jar-path "~/java/plantuml.jar")
 '(org-refile-allow-creating-parent-nodes (quote confirm))
 '(org-refile-target-verify-function (quote bh/verify-refile-target))
 '(org-refile-use-outline-path t)
 '(org-remove-highlights-with-change nil)
 '(org-src-fontify-natively t)
 '(org-startup-folded (quote content))
 '(org-startup-indented t)
 '(org-support-shift-select t)
 '(org-tag-alist (quote (("urgent" . 117) ("bill" . 98) ("scarce" . 115) ("crypt" . 99) ("emacs" . 101))))
 '(org-todo-keyword-faces (quote (("TODO" :foreground "#6775ac" :weight bold) ("NEXT" :foreground "#bc8878" :weight bold) ("DONE" :foreground "forest green" :weight bold) ("WAITING" :foreground "orange" :weight bold) ("HOLD" :foreground "magenta" :weight bold) ("CANCELLED" :foreground "forest green" :weight bold) ("PHONE" :foreground "forest green" :weight bold))))
 '(org-todo-keywords (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)"))))
 '(org-treat-S-cursor-todo-selection-as-state-change nil)
 '(org-use-speed-commands t)
 '(org-use-sub-superscripts nil)
 '(package-archives (quote (("gnu" . "http://elpa.gnu.org/packages/") ("ELPA" . "http://tromey.com/elpa/") ("Marmalade" . "http://marmalade-repo.org/packages/"))) t)
 '(read-buffer-function (quote ido-read-buffer))
 '(reb-re-syntax (quote string))
 '(recentf-auto-cleanup (quote never))
 '(recentf-exclude (quote ("~\\'" "\\`out\\'" "\\.log\\'" "^/[^/]*:" "\\.el\\.gz\\'")))
 '(recentf-max-saved-items 2000)
 '(recentf-save-file "~/.emacs.d/data/recentf")
 '(rng-nxml-auto-validate-flag nil)
 '(rng-schema-locating-files (quote ("~/.emacs.d/site-lisp/nxhtml/etc/schemas/html5-schemas.xml" "schemas.xml" "/Applications/Emacs241012.app/Contents/Resources/etc/schema/schemas.xml" "/Users/tonyday/.emacs.d/rnc/html5/html5-schemas.xml")))
 '(same-window-buffer-names (quote ("*eshell*" "*shell*" "*mail*" "*inferior-lisp*" "*ielm*" "*scheme*")))
 '(save-kill-file-name "~/.emacs.d/data/kill-ring-saved.el")
 '(save-place-file "/Users/tonyday/.emacs.d/places")
 '(scroll-bar-mode nil)
 '(semantic-default-submodes (quote (global-semantic-highlight-func-mode global-semantic-decoration-mode global-semantic-stickyfunc-mode global-semantic-idle-completions-mode global-semantic-idle-scheduler-mode global-semanticdb-minor-mode global-semantic-idle-summary-mode global-semantic-mru-bookmark-mode global-cedet-m3-minor-mode)))
 '(send-mail-function (quote smtpmail-send-it))
 '(sentence-end-double-space nil)
 '(shift-select-mode t)
 '(slime-kill-without-query-p t)
 '(slime-repl-history-file "~/.emacs.d/data/slime-history.eld")
 '(slime-startup-animation nil)
 '(tool-bar-mode nil)
 '(tramp-backup-directory-alist (quote (("." . "~/.emacs.d/backups"))))
 '(tramp-default-host "localhost")
 '(tramp-default-proxies-alist (quote (("\\`localhost\\'" nil nil) ("\\`127.0.0.1\\'" nil nil) ("\\`.+\\'" "\\`root\\'" "/ssh:%h:"))) nil nil "
Gets around the common setting that prohibits ssh login as root.

Don't do any proxying for connections to localhost (depends
on the customization of tramp-default-host to \"localhost\" for simple
matching), and otherwise, if sudo'ing somewhere, ssh there first and
then sudo on the remote host itself.")
 '(tramp-persistency-file-name "~/.emacs.d/data/tramp")
 '(tramp-remote-path (quote (tramp-default-remote-path "/usr/sbin" "/usr/local/sbin" "/usr/local/bin" "/sbin" "/local/bin")))
 '(transient-mark-mode t)
 '(truncate-partial-width-windows nil)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify))
 '(user-full-name "Tony Day")
 '(user-mail-address "tonyday567@gmail.com")
 '(validator-script "~/.emacs.d/site-lisp/flymake-html-validator")
 '(vc-diff-switches "-du")
 '(visible-bell t)
 '(visible-cursor t)
 '(w3m-command "/usr/local/bin/w3m" t)
 '(w3m-confirm-leaving-secure-page t nil nil "
I never like being nannied by regular browsers either.")
 '(w3m-cookie-accept-domains (quote ("www.google.com")))
 '(w3m-default-display-inline-images t)
 '(w3m-display-ins-del nil)
 '(w3m-fill-column -50 nil nil "
When I use variable-pitch-mode the text tends to run off the right 
side of the window.  This drastic setting was what I needed to prevent that.")
 '(w3m-use-cookies t)
 '(whitespace-auto-cleanup t)
 '(whitespace-line-column 80)
 '(whitespace-rescan-timer-time nil)
 '(whitespace-silent t)
 '(whitespace-style (quote (face trailing lines space-before-tab empty)))
 '(yas-snippet-dirs (quote ("~/.emacs.d/snippets")) nil (yasnippet))
 '(yas-wrap-around-region t)
 '(yas/triggers-in-field t)
 '(yas/wrap-around-region t))



(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(cursor ((t (:foreground "#3f3f3f" :background "#7fff00"))))
 '(diff-added ((((background dark)) (:foreground "#FFFF9B9BFFFF")) (t (:foreground "DarkGreen"))))
 '(diff-added2 ((t (:foreground "SeaGreen"))) t)
 '(diff-changed ((((background dark)) (:foreground "Yellow")) (t (:foreground "MediumBlue"))))
 '(diff-context ((((background dark)) (:foreground "White")) (t (:foreground "Black"))))
 '(diff-file-header ((((background dark)) (:foreground "Cyan" :background "Black")) (t (:foreground "Red" :background "White"))))
 '(diff-header ((((background dark)) (:foreground "Cyan")) (t (:foreground "Red"))))
 '(diff-hunk-header ((t (:background "grey90" :foreground "black"))))
 '(diff-index ((((background dark)) (:foreground "Magenta")) (t (:foreground "Green"))))
 '(diff-nonexistent ((((background dark)) (:foreground "#FFFFFFFF7474")) (t (:foreground "DarkBlue"))))
 '(diff-removed ((t (:foreground "firebrick"))))
 '(diff-removed2 ((t (:foreground "Orange"))) t)
 '(gnus-summary-expirable-face ((t (:foreground "grey55" :strike-through t :slant italic :weight normal :width condensed :family "DejaVu Sans"))))
 '(helm-M-x-key ((t (:foreground "dark red" :underline t))) t)
 '(helm-candidate-number ((t (:background "#faffb5" :foreground "black"))))
 '(helm-selection ((t (:background "alternateSelectedControlColor" :underline t))))
 '(helm-separator ((t (:foreground "#ffbfb5"))))
 '(helm-source-header ((t (:background "#abd7f0" :foreground "black" :underline t))))
 '(helm-visible-mark ((t (:background "#d1f5ae"))))
 '(hl-line ((t (:inherit (zenburn-highlight-damp)))) t)
 '(magit-branch-face ((((class color) (background light)) (:foreground "Blue"))) t)
 '(magit-diff-none-face ((((class color) (background light)) (:foreground "grey50"))) t)
 '(magit-header ((t (:weight bold))))
 '(magit-topgit-current ((t nil)))
 '(match ((t (:background "disabledControlTextColor" :foreground "controlHighlightColor" :weight bold))))
 '(message-cited-text ((((class color)) (:foreground "Blue"))) t)
 '(message-header-cc ((((class color)) (:bold t :foreground "green2"))) t)
 '(message-header-name ((t (:foreground "headerColor" :weight normal))) t)
 '(message-header-other ((t (:foreground "headerColor"))) t)
 '(message-header-subject ((t (:foreground "controlLightHighlightColor" :weight bold))) t)
 '(message-header-xheader ((t (:foreground "headerColor"))) t)
 '(message-mml ((((class color)) (:foreground "DarkGreen"))) t)
 '(message-separator ((((class color)) (:foreground "Tan"))) t)
 '(org-column ((t (:background "#505050" :strike-through nil :underline nil :slant normal :weight normal :height 120 :family "Monaco"))))
 '(org-mode-line-clock ((t (:foreground "red" :box (:line-width -1 :style released-button)))) t)
 '(org-mode-line-clock-overrun ((t (:inherit modeline :foreground "#5650d5" :background "#dccce9"))) t)
 '(org-scheduled-previously ((t (:foreground "controlHighlightColor"))))
 '(org-todo ((t (:foreground "#cc9393" :weight normal))))
 '(trailing-whitespace ((t (:background "disabledControlTextColor"))))
 '(whitespace-empty ((t (:background "keyboardFocusIndicatorColor" :foreground "#cc9393"))))
 '(whitespace-indentation ((t (:background "#3f3f3f" :foreground "#cc9393"))))
 '(whitespace-line ((t nil))))
